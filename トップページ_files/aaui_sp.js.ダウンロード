/**
 * ファイル名   aaui001.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  カレンダー機能
 *         ・カレンダー表示（カレンダーアイコン押下）
 *         ・カレンダー表示（＜＜前の月リンク押下）
 *         ・カレンダー表示（次の月＞＞リンク押下）
 *         ・カレンダー表示（今日ボタン押下）
 *         ・日付選択
 *         ・カレンダー非表示
 *
 * 修正履歴
 * 2012.05.30 NTTD 内山梓 次世代個人IB開発
 * 2013.07.12 NTTD 渡辺誠 次世代個人IB開発 Phase2
 */

/** ロケール名（ja) */
var aaui001_LOCALE_JA = 'ja';

/** カレンダー共通設定 */
var aaui001_CALENDAR_DEFALTS = {
    numberOfMonths : 2,
    nextText : '次の月＞＞',
    prevText : '＜＜前の月',
    showOn : 'button',
    buttonText : 'カレンダー',
    showButtonPanel : true,
    currentText : '今日：' + $.datepicker.formatDate('yy/mm/dd', new Date()),
    buttonImage : '/docs/images/calendar/ico_calendar.gif',
    buttonImageOnly : true,
    dateFormat : 'yymmdd'
};

/**
 * カレンダーの初期化処理を行う。
 * カレンダー個別設定用のオブジェクトの生成と、
 * カレンダー操作時のコールバック関数の設定を行う。
 *
 * @param initParams カレンダー初期化パラメータオブジェクト配列
 *                   初期化パラメータは以下のような構造で設定される
 *                          name        ：カレンダー名
 *                          basedate    ：基準日付
 *                          for         ：選択日付設定先
 *                          datelist    ：指定可能日リスト
 *                          holiday     ：祝日表示フラグ
 *                          future      ：過去/未来フラグ
 *                          startDate   ：選択可能期間開始日
 *                          endDate     ：選択可能期間終了日
 * @return なし
 */
function initCalendar(initParams) {
    if(!$.datepicker) {
        throw Error('カレンダー表示に必要な jquery-ui-1.X.X.custom.js が読み込まれていません。');
    }

    // デフォルトの最小日付、最大日付の設定
    var defminYear = parseInt(new Date().getFullYear(),10) - 10;
    aaui001_CALENDAR_DEFALTS.minDate = $.datepicker.parseDate('yymmdd', defminYear + '0101');
    var defmaxYear = parseInt(new Date().getFullYear(),10) + 10;
    aaui001_CALENDAR_DEFALTS.maxDate = $.datepicker.parseDate('yymmdd', defmaxYear + '1231');

    // ロケールの設定（デフォルト：ja）
    teralib.widget.Calender.locale = aaui001_LOCALE_JA;

    // カレンダー全体のデフォルト設定
    teralib.widget.Calender.defaults = aaui001_CALENDAR_DEFALTS;

    var _dispOptions = {};
    // カレンダー個別設定保持用オブジェクト
    var _firstDispFlg = {};
    // 初回表示フラグ保持用オブジェクト

    if(initParams && initParams instanceof Array) {
        // 個別カレンダーの設定
        for(var i = 0; i < initParams.length; i++) {

            var params = initParams[i];
            // 個別カレンダー初期化情報
            // カレンダー個別設定保持用オブジェクト
            var customParam = {
                names : [params.name]
            };

            // カレンダー個別設定プロパティ保持用オブジェクト
            var properties = {};

            // 過去/未来フラグの取得
            var future = ( typeof (params.future) === 'boolean') ? params.future : true;
            if(future === true) {
                // 過去/未来フラグがtrue（基準日付より未来日のカレンダー表示の場合）
                properties.showCurrentAtPos = 0;
            } else {
                properties.showCurrentAtPos = 1;
            }

            //　基準日付の取得
            // 未設定の場合は現在日付を取得
            var basedate = params.basedate || $.datepicker.formatDate('yymmdd', new Date());
            // 基準日付をDate型に変換
            var parseDate;
            try {
                parseDate = $.datepicker.parseDate('yymmdd', basedate);
            } catch (e) {
                alert(e);
                // Date型に変換できなかった場合は現在日付を設定
                parseDate = new Date();
            }

            // 基準日付の範囲は現在日付の±20年
            // 範囲外の場合は現在日付を設定
            var tmpYearStr = basedate.substr(0, 4);
            var minBaseYear = parseInt($.datepicker.formatDate('yy', new Date()), 10) - 20;
            var maxBaseYear = parseInt($.datepicker.formatDate('yy', new Date()), 10) + 20;

            if(parseInt(tmpYearStr, 10) < minBaseYear) {
                parseDate = new Date();
            } else if(maxBaseYear < parseInt(tmpYearStr, 10)) {
                parseDate = new Date();
            }
            
            // 基準日付をカレンダー個別設定プロパティ保持用オブジェクトに設定
            properties.defaultDate = parseDate; 

            // 表示可能最小日付・最大日付の設定
            //（基準日の年-10年1月1日〜基準日の年＋10年12月31日）
            var baseYear = $.datepicker.formatDate('yy', parseDate);
            var minYear = parseInt(baseYear,10) - 10;
            properties.minDate = $.datepicker.parseDate('yymmdd', minYear + '0101');
            var maxYear = parseInt(baseYear,10) + 10;
            maxYear = (9999 < maxYear) ? 9999 : maxYear;
            properties.maxDate = $.datepicker.parseDate('yymmdd', maxYear + '1231');

            customParam.properties = properties;

            var customs = teralib.widget.Calender.customs || [];
            customs.push(customParam);
            teralib.widget.Calender.customs = customs;

            var option = {};
            // カレンダーで選択された日付を設定するコンポーネントのIDを取得
            var settingIds = params['for'] ? params['for'].split(',') : [];
            option['for'] = settingIds;

            // 選択可能日付の取得
            option.datelist = params.datelist || '';
            
            // 日付指定の様式の取得
            var minSelectDate;
            var maxSelectDate;
            if(params.mode == '1') {
                // 日付指定の様式が年月日指定の場合、選択可能範囲は基準日の前年の1月1日から基準日の年の12月31日
                minSelectDate = (parseInt(baseYear, 10) - 1) * 10000 + 101;
                maxSelectDate = parseInt(baseYear, 10) * 10000 + 1231;
            } else if(params.mode == '2') {
                // 日付指定の様式が月日指定の場合、基準日の前年の翌日から基準日
                minSelectDate = (parseInt(baseYear, 10) - 1) * 10000 + parseInt($.datepicker.formatDate('mmdd', parseDate), 10) + 1;
                maxSelectDate = parseInt($.datepicker.formatDate('yymmdd', parseDate), 10);
            } else if(params.mode == '3') {
                // 日付指定の様式が開始終了日指定の場合、パラメータにて渡された開始日と終了日
                try {
                    var startDate = $.datepicker.parseDate('yymmdd', params.startDate);
                    var endDate = $.datepicker.parseDate('yymmdd', params.endDate);
                    minSelectDate = parseInt($.datepicker.formatDate('yymmdd', startDate));
                    maxSelectDate = parseInt($.datepicker.formatDate('yymmdd', endDate));
                    properties.minDate = startDate;
                    properties.maxDate = endDate;
                } catch (e) {
                    // 開始日または終了日が不正値の場合、全日付を選択可能とするため、空文字のままとする
                }
            }
            option.minSelectDate = minSelectDate;
            option.maxSelectDate = maxSelectDate;
            option.mode = params.mode;

            // 祝日表示フラグの取得
            var holidayFlg = ( typeof (params.holiday) === 'boolean') ? params.holiday : true;
            option.holiday = holidayFlg;

            // 表示オプションの保持
            _dispOptions[params.name] = option;
            _firstDispFlg[params.name] = true;
        }
    }

    // コールバック関数の設定
    // beforeShowDay：それぞれの日付が表示される前の処理
    teralib.widget.Calender._callbacks['beforeShowDay'] = function(date) {
        var calender = teralib.widget.Calender;
        var label = '';
        var className = '';
        var locale = calender.locale || 'ja';
        var dispOption = _dispOptions[this.name];

        /* 週末スタイルの設定 */
        switch(date.getDay()) {
            case 0:
                // 日曜日の場合
                className = 'ui-datepicker-sunday';
                break;
            case 6:
                // 土曜日の場合
                className = 'ui-datepicker-saturday';
                break;
            default:
                // その他の日場合
                break;
        }

        // 祝日表示フラグの取得
        var holiday = dispOption ? dispOption.holiday : true;

        if(holiday === true) {
            // 祝日のスタイルを設定
            var holidays = calender.holidays ? calender.holidays[locale] : undefined;
            if(holidays) {
                var target = $.datepicker.formatDate('yy/mm/dd', date);
                if( typeof (holidays[target]) !== 'undefined') {
                    label = holidays[target];
                    className = 'ui-datepicker-holiday';
                }
            }
        }

        // 指定可能日付の取得
        var selectableDays = dispOption ? dispOption.datelist : '';
        if(selectableDays !== '') {
            if(selectableDays.match($.datepicker.formatDate('yymmdd', date))) {
                return [true, className + ' ui-datepicker-selectable', label];
            } else {
                return [false, className, label];
            }

        } else {
            // モードが1〜3、かつ、3の場合は開始終了日共に指定されている場合
            if(dispOption.mode == '1' || dispOption.mode == '2' || 
                (dispOption.mode == '3' && dispOption.minSelectDate && dispOption.maxSelectDate && dispOption.minSelectDate <= dispOption.maxSelectDate)) {
                if(dispOption.minSelectDate <= parseInt($.datepicker.formatDate('yymmdd', date))
                        && parseInt($.datepicker.formatDate('yymmdd', date)) <= dispOption.maxSelectDate) {
                    return [true, className + ' ui-datepicker-selectable', label];
                } else {
                    return [false, className, label];
                }
            } else {
                return [true, className + ' ui-datepicker-selectable', label];
            }
        }
    };

    // onSelect：日付選択
    teralib.widget.Calender._callbacks['onSelect'] = function(dateText, inst) {

        var dispOption = _dispOptions[this.name];

        var settingIds = dispOption ? dispOption['for'] : [];
        if(settingIds.length == 1) {
            selectVal($('#' + settingIds[0]), dateText);
        } else if(settingIds.length == 3) {
            var year = settingIds[0];
            var month = settingIds[1];
            var day = settingIds[2];

            var yearStr = dateText.substr(0, 4);
            var monthStr = dateText.substr(4, 2);
            var dayStr = dateText.substr(6, 2);
            if(year !== '') {
                selectVal($('#' + year), yearStr);
            }
            if(month !== '') {
                selectVal($('#' + month), monthStr);
            }
            if(day !== '') {
                selectVal($('#' + day), dayStr);
            }
        }
        inst.input.trigger('change');
    };

    // beforeShow：カレンダー表示前処理
    teralib.widget.Calender._callbacks['beforeShow'] = function(input, inst) {

        if(_firstDispFlg[this.name]) {

            var calender = teralib.widget.Calender;
            var locale = calender.locale || aaui001_LOCALE_JA;

            /* ロケール情報の設定 */
            if($.datepicker.regional[locale]) {
                $.datepicker.setDefaults($.datepicker.regional[locale]);
            }

            // 初回カレンダー表示時のみ、プルダウンのchangeイベントに選択済み日付クリア処理をバインド
            var settingIds = _dispOptions[this.name]['for'];
            for(var i = 0; i < settingIds.length; i++) {
                if(settingIds[i] !== '') {
                    var settingId = '#' + settingIds[i];
                    var targetId = this.id;
                    $(settingId).on('change', function() {
                        // aaui016_ID指定状態変更機能の入力フォームクリア　を呼び出す
                        clearById(targetId);
                    });
                }
            }
            _firstDispFlg[this.name] = false;
        }
    };
}

/**
 * 日付設定処理<br>
 * プルダウンリストに存在しない日付を設定したら、
 * プルダウンリストの1個目の値で設定する。
 * 
 * @param $select
 *            プロダウンリストのselector
 * @param dateText
 *            カレンダーでの設定値
 * @return なし
 */
function selectVal($select, dateText) {
	var val = dateText;
	if ($select.find("option[value=" + dateText + "]").length == 0) {
		 val = $select.find('option:first').val();
	}
	$select.val(val);
}/*
 * ファイル名    aaui003_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  処理中メッセージ表示機能
 * 
 * 修正履歴
 * 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
 * 2012.10.16 NTTD 半田佳菜 次世代個人IB開発
 * 2013.04.10 NTTD 大竹理貴 次世代個人IB開発
 */

// カスタマイズ可能文言
var aaui003_dialogTitle = '処理中';

var aaui003_dialogMsg = '<br />ただ今処理中です。しばらくお待ち下さい。';
var aaui003_dspdnflg = false;
// 処理中メッセージダイアログ表示フラグ
var aaui003_dialogDispFlg = false;

/**
 * 処理中メッセージを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @return なし
 */
function loading(event) {
    
    //PCサイトへダイアログを表示する
    if(pcDispIconBtnIdArray.indexOf($(event).attr('id')) !== -1){
         return check(event,'topc');
    }
    
    if(pcDispIconBtnIdArrayGnav.indexOf($(event).attr('id')) !== -1){
         return check(event,'topc');
    }
    
    if (aaui003_dspdnflg) {
        //ダイアイログを作成
        confirmDialog(aaui003_dialogMsg, aaui003_dialogTitle, '230', '450', '', '', function(cancel) {
            if (cancel) {
                return;
            }
        });
        $('.ui-dialog-buttonpane').css('display', 'none');
        $('.ui-dialog-titlebar-close').css('display', 'none');
        
        // 処理中メッセージダイアログを表示するか判断
        if (!aaui003_dialogDispFlg) {
            //ダイアログを消去
            $('.ui-dialog').css('display', 'none');
            // モーダルの透明度を0に設定
            $('.ui-widget-overlay').css('opacity','0');
        }
    } else {
        setTimeout(function() {
            aaui003_dspdnflg = true;
            event.click();
            },1);
    }
    return aaui003_dspdnflg;
};

/**
 * 確認ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function confirmDialog(message, title, height, width, buttonok, buttoncancel,
        response) {
    var _dlg = $('<div>' + message + '</div>');
    var _buttons = {};
    _buttons[buttonok] = function() {
        $(this).dialog('close');
        response(false)
    };
    _buttons[buttoncancel] = function() {
        $(this).dialog('close');
        response(true)
    };

    _dlg.dialog({
        modal : true,
        draggable : false,
        resizable : false,
        title : title,
        height : height,
        width : width,
        closeOnEscape : false,
        buttons : _buttons,
        overlay : {
            opacity : 0.3,
            background : '#225B7F'
        }
    });
};/*
 * ファイル名    aaui005.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  中止処理警告メッセージ表示機能
 * 
 * 修正履歴
 * 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
 * 2012.10.16 NTTD 半田佳菜 次世代個人IB開発
 */
var stopdspflg = false;

// カスタマイズ可能文言
var aaui005_dialogTitle = '確認';

var aaui005_dialogMsg = '処理を中止します。<br />中止してよろしければ「OK」を押して下さい。<br />「キャンセル」を押すと中止せず、元の画面に戻ります。';

var aaui005_dialogOkBtnMsg = 'OK';

var aaui005_dialogCancelBtnMsg = 'キャンセル';

/**
 * 中止処理警告メッセージを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @return なし
 */
function stopprocess(event) {
    var processingflg = $('#processingflg').val();
    
    //画面表示フラグがtrue以外　中止処理警告メッセージ表示フラグがtrueの場合
    if (!stopdspflg && processingflg == 'true') {
        confirmDialog(aaui005_dialogMsg, aaui005_dialogTitle, '270', '450', aaui005_dialogOkBtnMsg, aaui005_dialogCancelBtnMsg,
            function (cancel) { 
                if (cancel) {
                    return;
                }
                stopdspflg = true;
                
                //safariのリンク押下時
                var ua = navigator.userAgent;
                if (ua.match('Safari') && $(event).attr('href')) {
                    var script = '<script type=\"text/javascript\">function link() {location.href = \"'
                        + $(event).attr('href')
                        +'\";}</script>';
                    $('body').append(script);
                    var click = $(event).attr('onclick').replace(';','&&link();');
                    $(event).attr('onclick', click);
                    $(event).trigger('click');
                } else {
                    event.click();
                }
            });
    } else {
        stopdspflg = true;
    }
    return stopdspflg;
};

/**
 * 確認ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function confirmDialog(message, title, height, width,
        buttonok, buttoncancel, response) {
    var _dlg = $('<div>' + message + '</div>');
    var _buttons = {};
    _buttons[buttonok] = function() {
        $(this).dialog('close');
        response(false)
    };
    _buttons[buttoncancel] = function() {
        $(this).dialog('close');
        response(true)
    };

    _dlg.dialog({
        modal:true,
        draggable:false,
        resizable:false,
        title:title,
        height:height,
        width:width,
        buttons:_buttons,
        overlay:{
            opacity: 0.3,
            background: '#225B7F'
        }
    });
};
/*
 * ファイル名    aaui006.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  二重押下防止機能
 * 
 * 修正履歴
 * 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
 */

/**
 * 二重押下防止オーバーレイを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @return なし
 */
function ctrldblclick(event) {
    //ダイアログを作成
    confirmDialog('', '', '200', '400', 'ok', 'キャンセル',
            function (cancel) {
                if (cancel) {
                    return;
                }
            });
    //ダイアログを消去
    $('.ui-dialog').css('display', 'none');
    return true;
};

/**
 * 確認ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function confirmDialog(message, title, height, width,
        buttonok, buttoncancel, response) {
    var _dlg = $('<div>' + message + '</div>');
    var _buttons = {};
    
    _buttons[buttonok] = function() {
        $(this).dialog('close');
        response(false)
    };
    _buttons[buttoncancel] = function() {
        $(this).dialog('close');
        response(true)
    };
    
    _dlg.dialog({
        modal: true,
        closeText:"",
        draggable: false,
        resizable: false,
        title: title,
        height: height,
        width: width,
        closeOnEscape: false,
        buttons: _buttons,
        overlay:{
            opacity: 0.3,
            background: '#225B7F'
        },
        open:function(){
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
            $(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
            $(".ui-dialog-buttonset button").addClass("ui-state-default").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
         }
    });
};
/*
* ファイル名    aaui008.js
* 開発システム   ANSER-WEB(AA)
* 著作権  Copyright(C) 2012 NTT DATA
* 収容物  画像切替機能
*
* 修正履歴
* 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
*/

/**
 * 非活性画像保持用配列
 */
var aaui008_IMGARRAY = new Array();

/**
 * 画像切替処理を各イベントにバインドする。
 *
 * @param なし
 * @return なし
 */
jQuery.fn.img = function(_rover, _click, _disable, _nomal, alt, disalt) {
    //引数にデフォルト値を設定する。
    if( typeof _rover === 'undefined' || _rover == '') {
        _rover = _nomal;
    }
    if( typeof _click === 'undefined' || _click == '') {
        _click = _nomal;
    }
    if( typeof _disable === 'undefined' || _disable == '') {
        _disable = _nomal;
    }
    if( typeof disalt === 'undefined' || disalt == '') {
        disalt = alt;
    }
    return this.each(function() {
        var evt = $(this);
        aaui008_IMGARRAY[evt.parent().attr('id')+'_disable'] = _disable;
        aaui008_IMGARRAY[evt.parent().attr('id')+'_nomal'] = _nomal;
        aaui008_IMGARRAY[evt.parent().attr('id')+'alt'] = alt;
        aaui008_IMGARRAY[evt.parent().attr('id')+'disalt'] = disalt;
        
        //buttonタグのマウスオーバーイベントに配下のimgタグの画像を切り替えるイベントをバインドする。
        evt.parent().hover(function() {
            imgch(evt, _rover, alt);
        }, function() {
            imgch(evt, _nomal, alt);
        });
        
        //buttonタグのマウスダウンイベントに配下のimgタグの画像を切り替えるイベントをバインドする。
        evt.parent().mousedown(function() {
            imgch(evt, _click, alt);
        });

        //非活性処理に画像を切り替えるイベントをバインドする。
        jQuery.fn.setDisabled = function(status) {
            var e = $(this);
            if(status == "disabled") {
                e.attr('disabled', 'disabled');
                e.children().attr('disabled', 'disabled');
                imgch(e.children(), aaui008_IMGARRAY[e.attr('id')+'_disable'],
                        aaui008_IMGARRAY[e.attr('id')+'disalt']);
            } else {
                e.removeAttr('disabled');
                e.children().removeAttr('disabled', false);
                imgch(e.children(), aaui008_IMGARRAY[e.attr('id')+'_nomal'],
                        aaui008_IMGARRAY[e.attr('id')+'alt']);
            }
        }
    });
};

/**
 * 画像のURLとaltを切り替える。
 *
 * @param evt 切り替える対象のDOM要素
 * @param src 切り替えるURL
 * @param alt 切り替えるalt属性値
 * @return なし
 */
function imgch(evt, src, alt) {
    //imgタグのsrc属性とalt属性を引数の値に変更する。
    evt.attr("src", src);
    evt.attr("alt", alt);
}
/*
 * ファイル名    aaui011_sp.js
 * 開発システム    ANSER-WEB(AA)
 * 著作権    Copyright(C) 2012 NTT DATA
 * 収容物    行選択機能
 * 
 * 修正履歴
 * 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
 * 2012.07.19 NTTD 牧本健 次世代個人IB開発
 * 2017.02.24 NTTDFR 堀祐貴 次世代個人IB開発
 */

/**
 * 行クリック時の色付処理をバインドする。
 * 
 * @param なし
 * @return なし
 */
$().ready(function() {
    var selectClass = 'selected';
    var $tagTarget = $('li.radio-selectlistA01');
    var checkboxTagTarget = 'li.checkbox-selectlistA01';
    var checkBoxFlag = false;
    
    //クリック時の選択行色付け
    $tagTarget.click(function() {
        //選択
        $(this).find('input[type=radio]').prop('checked', true);
        $(this).find('input[type=radio]').triggerHandler('click');
        //行の色付け
        $tagTarget.each(function() {
            selectRow($(this), selectClass);
        });
    });
    $(checkboxTagTarget).click(function() {
        //選択
        if(!checkBoxFlag){
            if(!$(this).find('input[type=checkbox]').prop('disabled')){
                if($(this).find('input[type=checkbox]').prop('checked')){
                    $(this).find('input[type=checkbox]').prop('checked',false);
                 } else {
                    $(this).find('input[type=checkbox]').prop('checked',true);
                 }
            }
        }
        
        checkBoxFlag = false;
         
        if($(this).find('input[type=checkbox]').prop('checked')){
            $(this).addClass(selectClass);
         } else {
            $(this).removeClass(selectClass);
         }
    });
    
    $(checkboxTagTarget + ' input[type=checkbox]').click(function() {
        checkBoxFlag = true;
    });
    $(checkboxTagTarget + ' label').click(function() {
        checkBoxFlag = true;
    });

});

/**
 * 選択された行のスタイルを変更する。
 * 
 * @param $this スタイルを設定する対象要素
 * @param style 変更するスタイルのクラス属性
 * @return なし
 */
function selectRow($this, style) {
    var input = $this.find('input[type=radio]')[0];
    if (typeof input == 'object') {
        if (input.checked) {
            $this.addClass(style);
        } else {
            $this.removeClass(style);
        }
    } else {
        return false;
    }
}/*
* ファイル名    aaui012_sp.js
* 開発システム   ANSER-WEB(AA)
* 著作権  Copyright(C) 2012 NTT DATA
* 収容物  ラジオボタン選択機能
*
* 修正履歴
* 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
* 2013.07.10 NTTD 平 貴寛 次世代個人 IB開発 Phase2
*/

/**
 * 各イベントをバインドする。
 *
 * @param なし
 * @return なし
 */
jQuery.event.add(window, "load", function() {
    // ラジオボタン、チェックボックス選択時に、太字にするイベントをバインドする。
    addCheckEvent();
    // 選択されているラジオボタンのonclickイベントを実行する。
    $('input[type=radio]:checked').each(function () {
        $(this).triggerHandler('click');
    });
    $('input[type=checkbox]:checked').each(function () {
        bold($(this));
        
        if($(this).parent("li").hasClass("aaui012_selected")){
            changeClassById($(this).parent("li").attr("id"), "c_on", '0');
        }
    });
    
    $(".aaui012_selected").each(function () {
        $(this).click(function() {
            //選択
            $(this).find('input[type=radio]').prop('checked', true);
            $(this).find('input[type=radio]').triggerHandler('click');
        });
    });
    
    var ua = navigator.userAgent.toLowerCase();
    if (ua.indexOf('firefox') != -1 || ua.indexOf('ie') != -1 || ua.indexOf('trident') != -1) {
        $('html').scrollTop(0);
    } else {
        $('body').scrollTop(0);
    }
});

/**
 * input項目のtype属性が、ラジオボタン、チェックボックスの場合に、boldイベントをバインドする。
 *
 * @param なし
 * @return なし
 */
function addCheckEvent() {
    $('input[type=radio]').click(function () {
        var $radiogroup = $('input[type=radio][name=\'' + $(this).attr('name') + '\']');
        $radiogroup.each(function () {
            $('label[for=\'' + $(this).attr('id') + '\']').css('font-weight', '');
          // 強調表示解除
            changeClassById($(this).parent("li").attr("id"), 'c_on', '1');
        });
        bold($(this));
        // 強調表示
        if($(this).parent("li").hasClass("aaui012_selected")){
            	changeClassById($(this).parent("li").attr("id"), "c_on", '0');
        }
        //画面再描画
        $radiogroup.parent().css('visibility', 'hidden');
        $radiogroup.parent().css('visibility', 'visible');
    });
    $('input[type=checkbox]').click(function () {
        var $this = $(this);
        $('label[for=\'' + $(this).attr('id') + '\']').css('font-weight', '');
        // 強調表示解除
        changeClassById($this.parent("li").attr("id"), 'c_on', '1');
        
        if ($this.prop('checked')) {
            bold($this);
            // 強調表示
            if($(this).parent("li").hasClass("aaui012_selected")){
                changeClassById($(this).parent("li").attr("id"), "c_on", '0');
            }
        }
    	     
        //画面再描画
        $this.parent().css('visibility', 'hidden');
        $this.parent().css('visibility', 'visible');
    });
}

/**
 * ラベルを太字にする。
 *
 * @param なし
 * @return なし
 */
function bold(target) {
    //チェックされているラベルを太字にする。
    $('label[for=\'' + target.attr('id') + '\']').css('font-weight', 'bold');
}
/**
 * ファイル名   aaui014.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   ページリンク表示機能
 *
 * 修正履歴
 * 2012.10.10 NTTD 及川智之 次世代個人IB開発
 */

/** ページ直接移動有ページリンクカスタムタグの「前へ」リンクのボタン名 */
var aaui014_pageLinksPreBtnMsg = '前ページ';
/** ページ直接移動有ページリンクカスタムタグの「次へ」リンクのボタン名 */
var aaui014_pageLinksNextBtnMsg = '次ページ';
/** ページ直接移動無ページリンクカスタムタグの「前へ」リンクのボタン名 */
var aaui014_pageLinksNoPageNumPreBtnMsg = '前の{0}件';
/** ページ直接移動無ページリンクカスタムタグの「次へ」リンクのボタン名 */
var aaui014_pageLinksNoPageNumNextBtnMsg = '次の{0}件';

/**
 * ページリンクの「前へ」「次へ」のボタン名をカスタマイズデータで置換する。
 */
$(document).ready(function() {
	// ページ直接移動有ページリンクの「前へ」ボタン
	$(".aaui014-prev-buttonB01,.aaui014-prev-buttonB02").each(function() {
		var rowVal = $(this).attr("row");
		if (!rowVal) {
			rowVal = $(this).prevAll("[name='row']").attr("value");
		}
		var newVal = aaui014_pageLinksPreBtnMsg.replace(/\{0\}/g, rowVal);
		$(this).attr("value", newVal);
	});

	// ページ直接移動有ページリンクの「次へ」ボタン
	$(".aaui014-next-buttonB01,.aaui014-next-buttonB02").each(function() {
		var rowVal = $(this).attr("row");
		if (!rowVal) {
			rowVal = $(this).prevAll("[name='row']").attr("value");
		}
		var newVal = aaui014_pageLinksNextBtnMsg.replace(/\{0\}/g, rowVal);
		$(this).attr("value", newVal);
	});

	// ページ直接移動無ページリンクの「前へ」ボタン
	$(".aaui014-prev-buttonC01,.aaui014-prev-buttonC02").each(function() {
		var rowVal = $(this).attr("row");
		if (!rowVal) {
			rowVal = $(this).prevAll("[name='row']").attr("value");
		}
		var newVal = aaui014_pageLinksNoPageNumPreBtnMsg.replace(/\{0\}/g, rowVal);
		$(this).attr("value", newVal);
	});

	// ページ直接移動無ページリンクの「次へ」ボタン
	$(".aaui014-next-buttonC01,.aaui014-next-buttonC02").each(function() {
		var rowVal = $(this).attr("row");
		if (!rowVal) {
			rowVal = $(this).prevAll("[name='row']").attr("value");
		}
		var newVal = aaui014_pageLinksNoPageNumNextBtnMsg.replace(/\{0\}/g, rowVal);
		$(this).attr("value", newVal);
	});
});

/**
 * ページリンクのアクションパスにパラメータを追加する。
 * @param formオブジェクト
 * @return なし
 */
function pageLink(form) {
	var addParam = null;
	if (typeof pageLinkGo === "function") {
		addParam = pageLinkGo(form);
	}
	var url = form.action;
	if (addParam) {
		url = url + "&" + addParam;
	}
	form.action = url;
}

/**
 * 指定されたidのformに対してsubmitイベントを発生させる。
 * @param formのid
 * @return なし
 */
function pageLinkSubmit(formId) {
	var formObj = document.getElementById(formId);
	if (formObj) {
		pageLink(formObj);
		formObj.submit();
	}
}
/**
 * ファイル名   aaui016.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   ID指定状態変更機能
 *          ID指定項目選択状態変更
 *          入力フォーム活性状態変更
 *          入力フォームクリア
 *          指定ID目以外入力フォームクリア
 *          ID指定項目クラス変更
 *          ID指定項目表示状態変更
 *
 * 修正履歴
 * 2012.05.30 NTTD 久慈智行 次世代個人IB開発
 * 2013.07.12 NTTD 渡辺誠 次世代個人IB開発 Phase2
 * 2022.08.04 石川 淳 AnserParaSOL 次期FW更改
 */

/**
 * 引数に指定された状態変更対象項目IDのラジオボタン、もしくはチェックボックスの選択状態を、
 * 選択状態指定フラグで指定された状態に変更する。
 * 
 * @param formId　状態変更対象項目ID
 * @param isSelect 選択状態指定フラグ
 * @return なし
 */
function selectById(formId, isSelect) {
    if (isSelect) {
        $('#' + formId).prop('checked', true);
    } else {
        $('#' + formId).removeAttr('checked');
    }
    $('#' + formId).triggerHandler('click');
}

/**
 * 引数に指定された状態変更対象項目IDのラジオボタン、もしくはチェックボックスの選択状態を、
 * 選択状態指定フラグで指定された状態に変更する。（ラジオボタンのクリックイベントを実施しない）
 * 
 * @param formId　状態変更対象項目ID
 * @param isSelect 選択状態指定フラグ
 * @return なし
 */
function selectById2(formId, isSelect) {
    if (isSelect) {
        $('#' + formId).prop('checked', true);
    } else {
        $('#' + formId).removeAttr('checked');
    }

    var thiss = $('#' + formId);
    var $radiogroup = $('input[type=radio][name=\'' + thiss.attr('name') + '\']');
    $radiogroup.each(function () {
        $('label[for=\'' + $(this).attr('id') + '\']').css('font-weight', '');
    });
    bold(thiss);
    //画面再描画
    $radiogroup.parent().css('visibility', 'hidden');
    $radiogroup.parent().css('visibility', 'visible');
}

/**
 * 引数に指定された状態変更対象項目IDの入力フォームを、活性状態指定フラグで
 * 指定された状態に変更する。
 * @param formId　状態変更対象項目ID
 * @param isEnable 活性状態指定フラグ
 * @return なし
 */
function enableById(formId, isEnable) {
    if (isEnable) {
        $('#' + formId).removeAttr('disabled');
        if ($('#' + formId).attr('type') == "text" || $('#' + formId).attr('type') == "password") {
            $('#' + formId).removeClass('disabled-input');
        }
    } else {
        $('#' + formId).attr('disabled', 'disabled');
        if ($('#' + formId).attr('type') == "text" || $('#' + formId).attr('type') == "password") {
            $('#' + formId).addClass('disabled-input');
        }
    }
}

/**
 * 引数に指定された状態変更対象項目IDの入力フォームに値が入っていた場合は
 * 未入力状態に変更する。
 * @param formId　状態変更対象項目ID
 * @return なし
 */
function clearById(formId) {
    // JQueryバージョンアップに伴い、ドロップダウンリストに対して存在しない値（空文字）を設定した際の振る舞いが変更となった。
    // 旧バージョンと同等の振る舞いを再現するため、1つ目を選択するようロジックを変更する。
    var target = $('#' + formId);
    if (target.is('select')) {
        var value = target.find('option:first').val();
        target.val(value);
        return;
    }
    $('#' + formId).val('');
}

/**
 * 引数に指定されたプレフィックスを含むID群の内、除外対象ID以外のIDに対して
 * クリア処理を呼び出す。
 * @param prefix プレフィックス
 * @param index インデックス
 * @param total 要素数 
 */
function clearByIdPrefix(prefix, index, total) {
    // 要素数分ループ
    for (var i = 1; i <= total; i++) {
        if (i != index) {
            // IDが除外対象でなければ、クリア処理をコール
            var id = prefix + i;
            if ($('#' + id).length > 0) {
                clearById(id);
            }
        }
    }
}

/**
 * 引数に指定された状態変更対象項目IDのclass属性を<br>
 * 引数で指定された状態に変更する。<br>
 * 0：追加、なければ追加<br>
 * 1：削除、あれば削除<br>
 * 2：トグル形式<br>
 * @param areaId　状態変更対象項目ID
 * @param className　class属性
 * @param isChange　変更状態指定値
 * @return なし
 */
 function changeClassById(areaId, className, isChange) {
	    var $target = $('#' + areaId);
	    if (isChange == '0') {
	        $target.addClass(className);
	    } else if (isChange == '1') {
	        $target.removeClass(className);
	    } else {
	        $target.toggleClass(className);
	    }
	}

/**
 * 引数に指定された状態変更対象項目IDの表示状態を<br>
 * 引数で指定された状態に変更する。<br>
 * 0：表示<br>
 * 1：非表示<br>
 * 2：トグル形式<br>
 * @param areaId　状態変更対象項目ID
 * @param isVisible　表示状態指定値
 * @return なし
 */
function visibleById(areaId, isVisible) {
    var $target = $('#' + areaId);
    if (isVisible == '0') {
        $target.css('display', 'block');
    } else if (isVisible == '1') {
        $target.css('display', 'none');
    } else {
        if ($target.css('display') != 'none') {
            $target.css('display', 'none');
        } else {
            $target.css('display', 'block');
        }
    }
}

/**
 * ファイル名   aaui017.js
 * 開発システム ANSER-WEB(AA)
 * 著作権   Copyright(C) 2012 NTT DATA
 * 収容物    金融機関名サジェスト機能
 *
 * 修正履歴
 * 2012.06.05 NTTD 牧本健 次世代個人IB開発
 * 2012.06.28 NTTD 中野聡洋 次世代個人IB開発
 */

/**
 * 金融機関名サジェスト初期化処理
 * 初期化パラメータをもとに金融機関名サジェストの初期表示を行う
 *
 * @param   contextPath     金融機関情報取得処理のコンテキストパス
 * @param   inputId         入力コンポーネントのID
 * @param   bankInfoSetObj  候補一覧で選択した金融機関の情報を設定する
 *                          コンポーネントを指定するためのパラメータ
 * @param   sessionIdName   セッションID設定名
 * @param   sessionIdValue  セッションID
 * @param   serverIdName    サーバID識別子設定名
 * @param   serverIdValue   サーバID識別子値
 */
function initBankSuggest(contextPath, inputId, bankInfoSetObj, sessionIdName
                        , sessionIdValue, serverIdName, serverIdValue) {
    var timerId = null;
    var beforeQuery = null;
    $().ready(function() {
        $('#' + inputId).autocomplete(
        {
            source:function(request, response) {
                $.ajax({
                    url: contextPath + '/BankSuggest'
                     + '?' + sessionIdName + '=' + sessionIdValue
                     + '&PT=BS&' + serverIdName + '=' + serverIdValue,
                    dataType: "json",
                    data: {
                          q: encodeURI(request.term)
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            var obj = {};
                            obj.data = item;
                            obj.label = item.bankNameKanzi + '(' + item.bankcode + ')';
                            obj.value = item.bankNameKanzi;
                            for (var i = 0; i < bankInfoSetObj.length; i++) {
                                obj[bankInfoSetObj[i].id] = item[bankInfoSetObj[i].item];
                            }
                            return obj;
                       }));
                    }
               });
            },
            minLength: 1,
            // 結果取得後の後処理
            select: function(event, ui) {
                $('#' + inputId).val(ui.item.value);
                for (var i = 0; i < bankInfoSetObj.length; i++) {
                    var id = bankInfoSetObj[i].id;
                    var value = ui.item[id];
                    $('#' + id).val(value);
                }
                return false;
            },
            isSuggest: "true",
            focus: function(){
                $('div.ui-menu-item-wrapper').removeClass("ui-state-active");
            },
            open: function(){
                $('ul.ui-menu').addClass("ui-corner-all");
                $('div.ui-menu-item-wrapper').hover(function() {
                    $(this).addClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "-1px");
                }, function() {
                    $(this).removeClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "unset");
                });
            }
        })
        .focusout(function(event) {
            // focusOut時にhiddenの内容と入力フィールドの内容をチェックし
            // 異なっている場合は、hiddenを初期化する。
            var hiddenValue = $('#' + bankInfoSetObj[1].id).val();
            var value = $('#' + inputId).val();
            if (hiddenValue !== value) {
                $('#' + bankInfoSetObj[0].id).val('');
                $('#' + bankInfoSetObj[1].id).val('');
            }

            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .mousedown(function(event) {
            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keyup(function(event) {
            // FireFoxでかつEnterのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0 && event.keyCode == 13) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keydown(function(event) {
            // FireFoxのみ後続処理
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                // 日本語のみtimerを設定
                if (event.keyCode == 229) {
                    var isFirstRequest = true;
                    if (timerId == null) {
                        var delay = $('#' + inputId).autocomplete('option', 'delay');
                        var obj = $(this);
                        var timerHandler = function() {
                            if ($('#' + inputId).val() != beforeQuery) {
                                beforeQuery = $('#' + inputId).val();
                                if (!isFirstRequest) {
                                    obj.autocomplete("search");
                                }
                            }
                            isFirstRequest = false;
                            timerId = setTimeout(timerHandler, delay);
                        }
                        timerId = setTimeout(timerHandler, delay);
                    }
                // 日本語以外はtimer解除
                } else {
                    if (timerId != null) {
                        clearTimeout(timerId);
                        beforeQuery = null;
                        timerId = null;
                    }
                }
            }
        })
        .on('input', function(event) {
            if (navigator.userAgent.toLowerCase().match('android')) {
                var obj = $(this);
                if ($('#' + inputId).val() != beforeQuery
                		&& $('#' + inputId).val().length != 0) {
                    beforeQuery = $('#' + inputId).val();
                    obj.autocomplete("search");
                }
            }
        });
    });
}

/**
 * 金融機関名サジェスト初期化処理2
 * 初期化パラメータをもとに金融機関名サジェストの初期表示を行う
 *
 * @param   contextPath     金融機関情報取得処理のコンテキストパス
 * @param   inputId         入力コンポーネントのID
 * @param   bankInfoSetObj  候補一覧で選択した金融機関の情報を設定する
 *                          コンポーネントを指定するためのパラメータ
 * @param   sessionIdName   セッションID設定名
 * @param   sessionIdValue  セッションID
 * @param   serverIdName    サーバID識別子設定名
 * @param   serverIdValue   サーバID識別子値
 * @param   execId          実行コンポーネントのID
 */
function initBankSuggest2(contextPath, inputId, bankInfoSetObj, sessionIdName
                        , sessionIdValue, serverIdName, serverIdValue, execId) {
    var timerId = null;
    var beforeQuery = null;
    $().ready(function() {
        $('#' + inputId).autocomplete(
        {
            source:function(request, response) {
                $.ajax({
                    url: contextPath + '/BankSuggest'
                     + '?' + sessionIdName + '=' + sessionIdValue
                     + '&PT=BS&' + serverIdName + '=' + serverIdValue,
                    dataType: "json",
                    data: {
                          q: encodeURI(request.term)
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            var obj = {};
                            obj.data = item;
                            obj.label = item.bankNameKanzi + '(' + item.bankcode + ')';
                            obj.value = item.bankNameKanzi;
                            for (var i = 0; i < bankInfoSetObj.length; i++) {
                                obj[bankInfoSetObj[i].id] = item[bankInfoSetObj[i].item];
                            }
                            return obj;
                       }));
                    }
               });
            },
            minLength: 1,
            // 結果取得後の後処理
            select: function(event, ui) {
                $('#' + inputId).val(ui.item.value);
                for (var i = 0; i < bankInfoSetObj.length; i++) {
                    var id = bankInfoSetObj[i].id;
                    var value = ui.item[id];
                    $('#' + id).val(value);
                }
                $('#' + execId).click();
                return false;
            },
            isSuggest: "true",
            focus: function(){
                $('div.ui-menu-item-wrapper').removeClass("ui-state-active");
            },
            open: function(){
                $('ul.ui-menu').addClass("ui-corner-all");
                $('div.ui-menu-item-wrapper').hover(function() {
                    $(this).addClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "-1px");
                }, function() {
                    $(this).removeClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "unset");
                });
            }
        })
        .focusout(function(event) {
            // focusOut時にhiddenの内容と入力フィールドの内容をチェックし
            // 異なっている場合は、hiddenを初期化する。
            var hiddenValue = $('#' + bankInfoSetObj[1].id).val();
            var value = $('#' + inputId).val();
            if (hiddenValue !== value) {
                $('#' + bankInfoSetObj[0].id).val('');
                $('#' + bankInfoSetObj[1].id).val('');
            }

            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .mousedown(function(event) {
            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keyup(function(event) {
            // FireFoxでかつEnterのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0 && event.keyCode == 13) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keydown(function(event) {
            // FireFoxのみ後続処理
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                // 日本語のみtimerを設定
                if (event.keyCode == 229) {
                    var isFirstRequest = true;
                    if (timerId == null) {
                        var delay = $('#' + inputId).autocomplete('option', 'delay');
                        var obj = $(this);
                        var timerHandler = function() {
                            if ($('#' + inputId).val() != beforeQuery) {
                                beforeQuery = $('#' + inputId).val();
                                if (!isFirstRequest) {
                                    obj.autocomplete("search");
                                }
                            }
                            isFirstRequest = false;
                            timerId = setTimeout(timerHandler, delay);
                        }
                        timerId = setTimeout(timerHandler, delay);
                    }
                // 日本語以外はtimer解除
                } else {
                    if (timerId != null) {
                        clearTimeout(timerId);
                        beforeQuery = null;
                        timerId = null;
                    }
                }
            }
        })
        .on('input', function(event) {
            if (navigator.userAgent.toLowerCase().match('android')) {
                var obj = $(this);
                if ($('#' + inputId).val() != beforeQuery
                		&& $('#' + inputId).val().length != 0) {
                    beforeQuery = $('#' + inputId).val();
                    obj.autocomplete("search");
                }
            }
        });
    });
}
/**
 * ファイル名   aaui018.js
 * 開発システム ANSER-WEB(AA)
 * 著作権   Copyright(C) 2012 NTT DATA
 * 収容物    支店名サジェスト機能
 *
 * 修正履歴
 * 2012.06.05 NTTD 牧本健 次世代個人IB開発
 * 2012.06.28 NTTD 中野聡洋 次世代個人IB開発
 */

/**
 * 支店名サジェスト初期化処理
 * 初期化パラメータをもとに支店名サジェストの初期表示を行う
 *
 * @param   contextPath     支店情報取得処理のコンテキストパス
 * @param   inputId         入力コンポーネントのID
 * @param   bankCodeId      金融機関コード設定先ID
 * @param   bankInfoSetObj  候補一覧で選択した支店名を設定する
 *                          コンポーネントを指定するためのパラメータ
 * @param   sessionIdName   セッションID設定名
 * @param   sessionIdValue  セッションID
 * @param   serverIdName    サーバID識別子設定名
 * @param   serverIdValue   サーバID識別子値
 */
function initBranchSuggest(contextPath, inputId, bankCodeID, bankNameID, bankInfoSetObj
                          , sessionIdName, sessionIdValue, serverIdName, serverIdValue) {
    var timerId = null;
    var beforeQuery = null;
    $().ready(function() {
        $('#' + inputId).autocomplete(
        {
            source:function(request, response) {
                $.ajax({
                    url: contextPath + '/BranchSuggest'
                     + '?' + sessionIdName + '=' + sessionIdValue
                     + '&PT=BS&' + serverIdName + '=' + serverIdValue
                     + '&SEARCH_BANK_CODE=' + $('#' + bankCodeID).val(),
                    dataType: "json",
                    data: {
                          q: encodeURI(request.term),
                          SEARCH_BANK_NAME: encodeURI($('#' + bankNameID).val())
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            var obj = {};
                            obj.data = item;
                            obj.label = item.branchNameKanzi + '(' + item.branchcode + ')';
                            obj.value = item.branchNameKanzi;
                            for (var i = 0; i < bankInfoSetObj.length; i++) {
                                obj[bankInfoSetObj[i].id] = item[bankInfoSetObj[i].item];
                            }
                            return obj;
                       }));
                    }
               });
            },
            minLength: 1,
            // 結果取得後の後処理
            select: function(event, ui) {
                $('#' + inputId).val(ui.item.value);
                for (var i = 0; i < bankInfoSetObj.length; i++) {
                    var id = bankInfoSetObj[i].id;
                    var value = ui.item[id];
                    $('#' + id).val(value);
                }
                return false;
            },
            isSuggest: "true",
            focus: function(){
                $('div.ui-menu-item-wrapper').removeClass("ui-state-active");
            },
            open: function(){
                $('ul.ui-menu').addClass("ui-corner-all");
                $('div.ui-menu-item-wrapper').hover(function() {
                    $(this).addClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "-1px");
                }, function() {
                    $(this).removeClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "unset");
                });
            }
        })
        .focusout(function(event) {
            // focusOut時にhiddenの内容と入力フィールドの内容をチェックし
            // 異なっている場合は、hiddenを初期化する。
            var hiddenValue = $('#' + bankInfoSetObj[1].id).val();
            var value = $('#' + inputId).val();
            if (hiddenValue !== value) {
                $('#' + bankInfoSetObj[0].id).val('');
                $('#' + bankInfoSetObj[1].id).val('');
            }

            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .mousedown(function(event) {
            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keyup(function(event) {
            // FireFoxでかつEnterのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0 && event.keyCode == 13) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keydown(function(event) {
            // FireFoxのみ後続処理
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                // 日本語のみtimerを設定
                if (event.keyCode == 229) {
                    var isFirstRequest = true;
                    if (timerId == null) {
                        var delay = $('#' + inputId).autocomplete('option', 'delay');
                        var obj = $(this);
                        var timerHandler = function() {
                            if ($('#' + inputId).val() != beforeQuery) {
                                beforeQuery = $('#' + inputId).val();
                                if (!isFirstRequest) {
                                    obj.autocomplete("search");
                                }
                            }
                            isFirstRequest = false;
                            timerId = setTimeout(timerHandler, delay);
                        }
                        timerId = setTimeout(timerHandler, delay);
                    }
                // 日本語以外はtimer解除
                } else {
                    if (timerId != null) {
                        clearTimeout(timerId);
                        beforeQuery = null;
                        timerId = null;
                    }
                }
            }
        })
        .on('input', function(event) {
            if (navigator.userAgent.toLowerCase().match('android')) {
                var obj = $(this);
                if ($('#' + inputId).val() != beforeQuery
                        && $('#' + inputId).val().length != 0) {
                    beforeQuery = $('#' + inputId).val();
                    obj.autocomplete("search");
                }
            }
        });
        $('#' + inputId).on('compositionstart', function(){$('#' + inputId).autocomplete('disable');});
        $('#' + inputId).on('compositionend', function(){$('#' + inputId).autocomplete('enable').autocomplete('search');});
    });
}

/**
 * 支店名サジェスト初期化処理2
 * 初期化パラメータをもとに支店名サジェストの初期表示を行う
 *
 * @param   contextPath     支店情報取得処理のコンテキストパス
 * @param   inputId         入力コンポーネントのID
 * @param   bankCodeId      金融機関コード設定先ID
 * @param   bankInfoSetObj  候補一覧で選択した支店名を設定する
 *                          コンポーネントを指定するためのパラメータ
 * @param   sessionIdName   セッションID設定名
 * @param   sessionIdValue  セッションID
 * @param   serverIdName    サーバID識別子設定名
 * @param   serverIdValue   サーバID識別子値
 * @param   execId          実行コンポーネントのID
 */
function initBranchSuggest2(contextPath, inputId, bankCodeID, bankNameID, bankInfoSetObj
                          , sessionIdName, sessionIdValue, serverIdName, serverIdValue, execId) {
    var timerId = null;
    var beforeQuery = null;
    $().ready(function() {
        $('#' + inputId).autocomplete(
        {
            source:function(request, response) {
                $.ajax({
                    url: contextPath + '/BranchSuggest'
                     + '?' + sessionIdName + '=' + sessionIdValue
                     + '&PT=BS&' + serverIdName + '=' + serverIdValue
                     + '&SEARCH_BANK_CODE=' + $('#' + bankCodeID).val(),
                    dataType: "json",
                    data: {
                          q: encodeURI(request.term),
                          SEARCH_BANK_NAME: encodeURI($('#' + bankNameID).val())
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            var obj = {};
                            obj.data = item;
                            obj.label = item.branchNameKanzi + '(' + item.branchcode + ')';
                            obj.value = item.branchNameKanzi;
                            for (var i = 0; i < bankInfoSetObj.length; i++) {
                                obj[bankInfoSetObj[i].id] = item[bankInfoSetObj[i].item];
                            }
                            return obj;
                       }));
                    }
               });
            },
            minLength: 1,
            // 結果取得後の後処理
            select: function(event, ui) {
                $('#' + inputId).val(ui.item.value);
                for (var i = 0; i < bankInfoSetObj.length; i++) {
                    var id = bankInfoSetObj[i].id;
                    var value = ui.item[id];
                    $('#' + id).val(value);
                }
                $('#' + execId).click();
                return false;
            },
            isSuggest: "true",
            focus: function(){
                $('div.ui-menu-item-wrapper').removeClass("ui-state-active");
            },
            open: function(){
                $('ul.ui-menu').addClass("ui-corner-all");
                $('div.ui-menu-item-wrapper').hover(function() {
                    $(this).addClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "-1px");
                }, function() {
                    $(this).removeClass("ui-state-hover ui-corner-all");
                    $(this).css("margin", "unset");
                });
            }
        })
        .focusout(function(event) {
            // focusOut時にhiddenの内容と入力フィールドの内容をチェックし
            // 異なっている場合は、hiddenを初期化する。
            var hiddenValue = $('#' + bankInfoSetObj[1].id).val();
            var value = $('#' + inputId).val();
            if (hiddenValue !== value) {
                $('#' + bankInfoSetObj[0].id).val('');
                $('#' + bankInfoSetObj[1].id).val('');
            }

            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .mousedown(function(event) {
            // FireFoxのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keyup(function(event) {
            // FireFoxでかつEnterのみtimerを解除
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0 && event.keyCode == 13) {
                if (timerId != null) {
                    clearTimeout(timerId);
                    if ($('#' + inputId).val() != beforeQuery) {
                        $(this).autocomplete("search");
                    }
                    beforeQuery = null;
                    timerId = null;
                }
            }
        })
        .keydown(function(event) {
            // FireFoxのみ後続処理
            if (navigator.userAgent.toLowerCase().indexOf("firefox") >= 0) {
                // 日本語のみtimerを設定
                if (event.keyCode == 229) {
                    var isFirstRequest = true;
                    if (timerId == null) {
                        var delay = $('#' + inputId).autocomplete('option', 'delay');
                        var obj = $(this);
                        var timerHandler = function() {
                            if ($('#' + inputId).val() != beforeQuery) {
                                beforeQuery = $('#' + inputId).val();
                                if (!isFirstRequest) {
                                    obj.autocomplete("search");
                                }
                            }
                            isFirstRequest = false;
                            timerId = setTimeout(timerHandler, delay);
                        }
                        timerId = setTimeout(timerHandler, delay);
                    }
                // 日本語以外はtimer解除
                } else {
                    if (timerId != null) {
                        clearTimeout(timerId);
                        beforeQuery = null;
                        timerId = null;
                    }
                }
            }
        })
        .on('input', function(event) {
            if (navigator.userAgent.toLowerCase().match('android')) {
                var obj = $(this);
                if ($('#' + inputId).val() != beforeQuery
                        && $('#' + inputId).val().length != 0) {
                    beforeQuery = $('#' + inputId).val();
                    obj.autocomplete("search");
                }
            }
        });
    });
}
/**
 * ファイル名   aaui019_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  セッションタイムアウト警告表示機能
 *         ・セッションタイムアウト延長（クライアント）
 * 
 * 修正履歴
 * 2012.05.30 NTTD 内山梓 次世代個人IB開発
 * 2012.10.16 NTTD 半田佳菜 次世代個人IB開発
 */

// カスタマイズ可能文言
var aaui019_dialogTitle = '延長失敗';

var aaui019_dialogMsg = 'ご利用時間の延長処理に失敗しました。<br />すでにログアウトされている可能性があります。';

var aaui019_dialogOkBtnMsg = 'OK';

/**
 * セッションタイムアウト時間延長処理を実行する。
 * 
 * @param contextPath コンテキストパス
 * @param sessionIdName セッションID名
 * @param sessionIdValue セッションID値
 * @param serverIdName サーバ識別子名
 * @param serverIdValue サーバ識別子値
 * @param successFunc 延長処理成功後処理
 */
function execTimeoutExtension(contextPath, sessionIdName, sessionIdValue,
    serverIdName, serverIdValue, successFunc) {

    var dataObj = {};
    dataObj[sessionIdName] = sessionIdValue;
    dataObj.PT = 'BS';

    // 延長失敗ダイアログ用パラメータ
    var _buttons = {};
    _buttons[aaui019_dialogOkBtnMsg] = function() {
        $(this).dialog('close');
        //resize処理をアンバインド
        $(window).off("resize load");
        
        return true;
    };

    var failedDialogParam = {
        autoOpen : false, 
        modal : true, 
        closeText:"", 
        height : 'auto', 
        width : '90%', 
        title : aaui019_dialogTitle, 
        resizable : false, 
        buttons : _buttons,
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          var timeoutMsg2Obj = $('[aria-describedby=extensionFailedMsg]');
          if (window.innerHeight - timeoutMsg2Obj.height() < 0) {
              $('#extensionFailedMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#extensionFailedMsg').dialog("option", "maxHeight",'200');
              fixPositionSpObj(timeoutMsg2Obj);
          }
          var version = androidVersion();
          if ('2.3' == version) {
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
        }
    };
    
    // 延長処理失敗ダイアログ表示処理
    var errorMsgFunc = function() {
        $('body').prepend(
            '<div id=\'extensionFailedMsg\' title=\'延長失敗\' '
            +'style=\'display : none;\'>'
            + aaui019_dialogMsg + '</div>');
        $('#extensionFailedMsg').dialog(failedDialogParam);
        $('#extensionFailedMsg').dialog('open');
        //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
        $(window).on("resize load",function(){
           var timeoutMsg2Obj = $('[aria-describedby=extensionFailedMsg]');
           $('#extensionFailedMsg').dialog("option", "height",'auto');
           if (window.innerHeight - timeoutMsg2Obj.height() < 0) {
               $('#extensionFailedMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
               $('#extensionFailedMsg').dialog("option", "maxHeight",'200');
             } else {
                 $('#extensionFailedMsg').dialog("option", "height",'auto');
             }
             //windowサイズ変更時の表示位置の決定
           fixPositionSpObj(timeoutMsg2Obj);
        });
    };

    // セッションタイムアウト延長（サーバ）のパス
    var url = contextPath + '/SessionTimeoutExtension?' 
        + serverIdName + '=' + serverIdValue;
    
    // セッションタイムアウト延長（サーバ）呼出
    $.ajax({
        type : 'POST',
        url : url, 
        data : dataObj, 
        success : function(data) {
            if (data == 'success') {
                successFunc();
            } else {
                errorMsgFunc();
            }
        }, 
        dataType : 'text', 
        error : function() {
            // エラー発生時の処理
            errorMsgFunc();
        }, 
        timeout : 60000
    });
}
/**
 * ファイル名   aaui020_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012-2013 NTT DATA
 * 収容物  セッションタイムアウト警告表示機能
 *         ・セッションタイムアウト警告メッセージ表示
 *         ・セッションタイムアウト延長
 *         ・セッションタイムアウト警告メッセージ非表示
 *         ・セッションタイムアウトメッセージ非表示
 * 
 * 修正履歴
 * 2012.05.30 NTTD 内山梓 次世代個人IB開発
 * 2012.10.16 NTTD 半田佳菜 次世代個人IB開発
 * 2013.08.22 NTTD 川添晃臣 次世代個人IB開発 R006-1
 */

// カスタマイズ可能文言
var aaui020_dialogNoticeTitle = 'お取引継続確認';

var aaui020_dialogNoticeMsg = '一定時間お客様からの操作が行われませんでした。<br />引き続きご利用いただく場合は「OK」ボタンを押して下さい。<br /><br />自動的に切断するまでの時間  ：<span id = \'countdown\'>60</span>秒';

var aaui020_dialogNoticeOkBtnMsg = 'OK';

var aaui020_dialogTimeoutTitle = '切断通知';

var aaui020_dialogTimeoutMsg = '一定時間お客様からの操作が行われなかったため、<br />自動的に切断させていただきました。<br />ご利用ありがとうございました。';

var aaui020_dialogTimeoutOkBtnMsg = 'OK';

/**
 * セッションタイムアウト警告ダイアログ表示機能の初期化処理を行う。
 * 
 * @param timeout セッションタイムアウト時間
 * @param noticeTime セッションタイムアウト警告表示時間
 * @param useNotice セッションタイムアウト警告表示有無
 * @param contextPath コンテキストパス
 * @param sessionIdName セッションID名
 * @param sessionIdValue セッションID値
 * @param serverIdName サーバID識別子名
 * @param serverIdValue サーバID識別子値
 */
function initTimeoutNotice(timeout, noticeTime, useNotice, contextPath,
    sessionIdName, sessionIdValue, serverIdName, serverIdValue) {

    var timer;
    var countDown;
    var start;
    
    if (isNaN(timeout) || isNaN(noticeTime) || 
        timeout <= 0 || noticeTime <= 0 || timeout <= noticeTime) {
        return;
    }
    
    // セッションタイムアウト警告ダイアログ表示待機処理
    var standbyFunc = function() {
        // 金融機関ごとの警告表示有無の判定
        if (useNotice === true) {
            //　警告表示までの待機時間の算出(ミリ秒)
            var standbyTime = (timeout - noticeTime) * 1000;
            countDown = timeout;
            // タイマー開始時間取得
            var date = new Date();
            start = (date.getTime() / 1000) | 0;
            // 警告メッセージ表示待機タイマー起動
            setTimeout(noticeFunc, standbyTime);
        }
    };

    // セッションタイムアウト警告メッセージダイアログ用設定
    var _buttons = {};
    _buttons[aaui020_dialogNoticeOkBtnMsg] = function() {
        $(this).dialog('close');
        //ポップアップクローズ時にポップアップの位置変更の処理をアンバインド
        $(window).off("resize load");
        // タイムアウト延長機能の呼び出し
        execTimeoutExtension(contextPath, sessionIdName, sessionIdValue,
             serverIdName, serverIdValue, standbyFunc);
        return true;
    };
    var notisDialogParam = {
        autoOpen : false, 
        modal : true,
        closeText:"",
        height : 'auto', 
        width : '90%',
        title : aaui020_dialogNoticeTitle, 
        resizable : false, 
        buttons : _buttons, 
        beforeClose : function(event) {
            // 警告メッセージカウントダウンタイマーをクリアする
            clearInterval(timer);
        },
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          var timeoutNoticeMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutNoticeMsg]');
          if (window.innerHeight - timeoutNoticeMsgObj.height() < 0) {
              $('#timeoutNoticeMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#timeoutNoticeMsg').dialog("option", "maxHeight",'230');
              fixPositionSpObj(timeoutNoticeMsgObj);
          }
          var version = androidVersion();
          if ('2.3' == version) {
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
        }
    };
        
    // 警告ダイアログ表示時の処理
    var noticeFunc = function() {
        // 警告ダイアログの準備
        $('#timeoutNoticeMsg').dialog(notisDialogParam);
        $('#countdown').html(noticeTime);
        // セッションタイムアウト警告ダイアログを開く
        $('#timeoutNoticeMsg').dialog('open');
        //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
        $(window).on("resize load",function(){          
           var timeoutNoticeMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutNoticeMsg]');
           $('#timeoutNoticeMsg').dialog("option", "height",'auto');
           if (window.innerHeight - timeoutNoticeMsgObj.height() < 0) {
               $('#timeoutNoticeMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
               $('#timeoutNoticeMsg').dialog("option", "maxHeight",'230');
             } else {
                 $('#timeoutNoticeMsg').dialog("option", "height",'auto');
             }
           //windowサイズ変更時の表示位置の決定
           fixPositionSpObj(timeoutNoticeMsgObj);
        });
        // 警告メッセージカウントダウンタイマー起動
        // タイマー間隔：1秒
        timer = setInterval(countDownFunc, 1000);
    };

    // タイムアウトダイアログ用設定
    var _buttons2 = {};
    _buttons2[aaui020_dialogTimeoutOkBtnMsg] = function() {
        $(this).dialog('close');
        $(window).off("resize load");
        return true;
    };
    var timeoutDialogParam = {
        autoOpen : false, 
        modal : true,
        closeText:"",
        height : 'auto', 
        width : '90%',
        title : aaui020_dialogTimeoutTitle, 
        resizable : false, 
        buttons : _buttons2,
        beforeClose : function(event) {
          // 警告メッセージカウントダウンタイマーをクリアする
          clearInterval(timer);
        },
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          var timeoutMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutMsg]');
          if (window.innerHeight - timeoutMsgObj.height() < 0) {
              $('#timeoutMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#timeoutMsg').dialog("option", "maxHeight",'200');
              fixPositionSpObj(timeoutMsgObj);
          } 
          var version = androidVersion();
          if ('2.3' == version) {
              $('#dummytable').remove();
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
        }
    };

    // 警告ダイアログのカウントダウン更新処理
    var countDownFunc = function() {
        var nowdate = new Date();
        var now = (nowdate.getTime() / 1000) | 0;
        var count = countDown - (now - start);
        if (count <= 0) {
            // カウントダウン秒数が0以下（タイムアウトした）の場合
            //$('#timeoutNoticeMsg').dialog('close');
            // タイムアウトダイアログの準備
            $('#timeoutMsg').dialog(timeoutDialogParam);
            $('#timeoutMsg').dialog('open');

            if($('#timeoutNoticeMsg').dialog(notisDialogParam).dialog('isOpen')){
                $('#timeoutNoticeMsg').dialog('destroy');
            }

            //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
            $(window).on("resize load",function(){          
               var timeoutMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutMsg]');
               $('#timeoutMsg').dialog("option", "height",'auto');
               if (window.innerHeight - timeoutMsgObj.height() < 0) {
                   $('#timeoutMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
                   $('#timeoutMsg').dialog("option", "maxHeight",'200');
                 } else {
                     $('#timeoutMsg').dialog("option", "height",'auto');
                 }
               //windowサイズ変更時の表示位置の決定
               fixPositionSpObj(timeoutMsgObj);
            });
        } else {
            // カウントダウン秒数が0より大きい（タイムアウト前）場合
            // セッションタイムアウト警告ダイアログのカウントダウン秒数を更新
            $('#timeoutNoticeMsg').dialog(notisDialogParam);
            $('#timeoutNoticeMsg').dialog('open');
            $('#countdown').html(count);
        }
    };

    //セッションタイムアウト警告ダイアログ表示待機処理実行
    standbyFunc();
    
    $(
        function(){
                
            $('body').append(
                '<div id = \'timeoutNoticeMsg\' title = \'お取引継続確認\' '
                +'style = \'display : none;\'>'
                + aaui020_dialogNoticeMsg + '</div>');

            $('body').append(
                '<div id = \'timeoutMsg\' title = \'切断通知\''
                +' style = \'display : none;\'>'
                + aaui020_dialogTimeoutMsg + '</div>');
        }
    );
}

//ポップアップの表示位置の指定（idなしのタイムアウトポップアウト用)
function fixPositionSpObj(popupObj){
     var timeouttop = Math.floor((window.innerHeight - popupObj.height()) / 2);
     var timeoutleft = Math.floor((window.innerWidth - popupObj.width()) / 2);
     $(popupObj).css({"top": timeouttop, "left": timeoutleft});
}/**
 * ファイル名   aaui022.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   全角半角変換機能
 *          全角to 半角変換機能(クライアント)
 *          半角to全角変換機能(クライアント)
 *
 * 修正履歴
 * 2012.06.11 NTTD 久慈智行 次世代個人IB開発
 */

/** 半角to全角変換1、半角to全角変換2用半角文字定義配列 */
var aaui022_HAN_TO_ZEN_HANKAKU_MAP = ['ｱ', 'ｲ', 'ｳ', 'ｴ', 'ｵ', 'ｶ', 'ｷ', 'ｸ', 
    'ｹ', 'ｺ', 'ｻ', 'ｼ', 'ｽ', 'ｾ','ｿ', 'ﾀ', 'ﾁ', 'ﾂ', 'ﾃ', 'ﾄ', 'ﾅ', 'ﾆ', 'ﾇ', 
    'ﾈ', 'ﾉ', 'ﾊ', 'ﾋ', 'ﾌ', 'ﾍ', 'ﾎ', 'ﾏ', 'ﾐ', 'ﾑ', 'ﾒ', 'ﾓ', 'ﾔ', 'ﾕ', 'ﾖ',
    'ﾗ','ﾘ', 'ﾙ', 'ﾚ', 'ﾛ', 'ﾜ', 'ｦ', 'ﾝ', 'ｶﾞ', 'ｷﾞ', 'ｸﾞ', 'ｹﾞ', 'ｺﾞ', 'ｻﾞ', 
    'ｼﾞ', 'ｽﾞ', 'ｾﾞ', 'ｿﾞ', 'ﾀﾞ', 'ﾁﾞ', 'ﾂﾞ', 'ﾃﾞ', 'ﾄﾞ', 'ﾊﾞ', 'ﾋﾞ', 'ﾌﾞ', 'ﾍﾞ', 
    'ﾎﾞ', 'ﾊﾟ', 'ﾋﾟ', 'ﾌﾟ', 'ﾍﾟ', 'ﾎﾟ', 'ｳﾞ', '-', 'A', 'B', 'C', 'D', 'E', 'F', 
    'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 
    'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
    ' ', 'ﾞ', 'ﾟ'];

/** 半角to全角変換1、半角to全角変換2用全角文字定義配列 */
var aaui022_HAN_TO_ZEN_ZENKAKU_MAP = ['ア', 'イ', 'ウ', 'エ', 'オ', 'カ', 'キ', 
    'ク', 'ケ', 'コ', 'サ', 'シ', 'ス', 'セ', 'ソ', 'タ', 'チ', 'ツ', 'テ', 'ト', 'ナ', 
    'ニ', 'ヌ', 'ネ', 'ノ', 'ハ', 'ヒ', 'フ', 'ヘ', 'ホ', 'マ', 'ミ', 'ム', 'メ', 'モ', 
    'ヤ', 'ユ', 'ヨ', 'ラ', 'リ', 'ル', 'レ', 'ロ', 'ワ', 'ヲ', 'ン', 'ガ', 'ギ', 'グ', 
    'ゲ', 'ゴ', 'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ', 'ダ', 'ヂ', 'ヅ', 'デ', 'ド', 'バ', 
    'ビ', 'ブ', 'ベ','ボ', 'パ', 'ピ', 'プ', 'ペ', 'ポ', 'ヴ', 'ー', 'Ａ', 'Ｂ', 
    'Ｃ', 'Ｄ', 'Ｅ', 'Ｆ', 'Ｇ', 'Ｈ', 'Ｉ', 'Ｊ', 'Ｋ', 'Ｌ', 'Ｍ', 'Ｎ', 'Ｏ', 
    'Ｐ', 'Ｑ', 'Ｒ', 'Ｓ', 'Ｔ', 'Ｕ', 'Ｖ', 'Ｗ', 'Ｘ', 'Ｙ', 'Ｚ', '０', '１', 
    '２', '３', '４', '５', '６', '７', '８', '９', '　', '゛', '゜'];

/** 全角to半角変換1、2用半角文字定義配列 */
var aaui022_ZEN_TO_HAN_HANKAKU_MAP = ['ｱ', 'ｱ', 'ｱ', 'ｱ', 'ｲ', 'ｲ', 'ｲ', 'ｲ', 
    'ｲ', 'ｳ', 'ｳ', 'ｳ', 'ｳ', 'ｴ', 'ｴ', 'ｴ', 'ｴ', 'ｴ', 'ｵ', 'ｵ', 'ｵ', 'ｵ', 
    'ｶ', 'ｶ', 'ｷ', 'ｷ', 'ｸ', 'ｸ', 'ｹ', 'ｹ', 'ｺ', 'ｺ', 'ｻ', 'ｻ', 'ｼ', 'ｼ', 'ｽ', 
    'ｽ', 'ｾ', 'ｾ', 'ｿ', 'ｿ', 'ﾀ', 'ﾀ', 'ﾁ', 'ﾁ', 'ﾂ', 'ﾂ', 'ﾂ', 'ﾂ', 'ﾃ', 
    'ﾃ', 'ﾄ', 'ﾄ', 'ﾅ', 'ﾅ', 'ﾆ', 'ﾆ', 'ﾇ', 'ﾇ', 'ﾈ', 'ﾈ', 'ﾉ', 'ﾉ', 'ﾊ', 
    'ﾊ', 'ﾋ', 'ﾋ', 'ﾌ', 'ﾌ', 'ﾍ', 'ﾍ', 'ﾎ', 'ﾎ', 'ﾏ', 'ﾏ', 'ﾐ', 'ﾐ', 'ﾑ', 
    'ﾑ', 'ﾒ', 'ﾒ', 'ﾓ', 'ﾓ', 'ﾔ', 'ﾔ', 'ﾔ', 'ﾔ', 'ﾕ', 'ﾕ', 'ﾕ', 'ﾕ', 'ﾖ', 
    'ﾖ', 'ﾖ', 'ﾖ', 'ﾗ', 'ﾗ', 'ﾘ', 'ﾘ', 'ﾙ', 'ﾙ', 'ﾚ', 'ﾚ', 'ﾛ', 'ﾛ', 'ﾜ', 
    'ﾜ', 'ｦ', 'ｦ', 'ﾝ', 'ﾝ', 'ｶﾞ', 'ｶﾞ', 'ｷﾞ', 'ｷﾞ', 'ｸﾞ', 'ｸﾞ', 'ｹﾞ', 'ｹﾞ', 
    'ｺﾞ', 'ｺﾞ', 'ｻﾞ', 'ｻﾞ', 'ｼﾞ', 'ｼﾞ', 'ｽﾞ', 'ｽﾞ', 'ｾﾞ', 'ｾﾞ', 'ｿﾞ', 'ｿﾞ', 'ﾀﾞ', 
    'ﾀﾞ', 'ﾁﾞ', 'ﾁﾞ', 'ﾂﾞ', 'ﾂﾞ', 'ﾃﾞ', 'ﾃﾞ', 'ﾄﾞ', 'ﾄﾞ', 'ﾊﾞ', 'ﾊﾞ', 'ﾋﾞ', 'ﾋﾞ', 
    'ﾌﾞ', 'ﾌﾞ', 'ﾍﾞ', 'ﾍﾞ', 'ﾎﾞ', 'ﾎﾞ', 'ﾊﾟ', 'ﾊﾟ', 'ﾋﾟ', 'ﾋﾟ', 'ﾌﾟ', 'ﾌﾟ', 'ﾍﾟ', 
    'ﾍﾟ', 'ﾎﾟ', 'ﾎﾟ', 'ｳﾞ', '-', '-', '-', '-', 'A', 'A', 'B', 'B', 'C', 'C', 
    'D', 'D', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H', 'I', 'I', 'J', 'J', 'K', 
    'K', 'L', 'L', 'M', 'M', 'N', 'N', 'O', 'O', 'P', 'P', 'Q', 'Q', 'R', 'R', 
    'S', 'S', 'T', 'T', 'U', 'U', 'V', 'V', 'W', 'W', 'X', 'X', 'Y', 'Y', 'Z', 
    'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', 'ﾞ', 'ﾟ'];

/** 全角to半角変換1、2用全角文字定義配列 */
var aaui022_ZEN_TO_HAN_ZENKAKU_MAP = ['ア', 'ァ', 'あ', 'ぁ', 'イ', 'ィ', 'い', 'ぃ', 
    'ゐ', 'ウ', 'ゥ', 'う', 'ぅ', 'エ', 'ェ', 'え', 'ぇ', 'ゑ', 'オ', 'ォ', 'お', 
    'ぉ', 'カ', 'か', 'キ', 'き', 'ク', 'く', 'ケ', 'け', 'コ', 'こ', 'サ', 'さ', 
    'シ', 'し', 'ス', 'す', 'セ', 'せ', 'ソ', 'そ', 'タ', 'た', 'チ', 'ち', 'ツ', 
    'ッ', 'つ', 'っ', 'テ', 'て', 'ト', 'と', 'ナ', 'な', 'ニ', 'に', 'ヌ', 'ぬ', 
    'ネ', 'ね', 'ノ', 'の', 'ハ', 'は', 'ヒ', 'ひ', 'フ', 'ふ', 'ヘ', 'へ', 'ホ', 
    'ほ', 'マ', 'ま', 'ミ', 'み', 'ム', 'む', 'メ', 'め', 'モ', 'も', 'ヤ', 'ャ', 
    'や', 'ゃ', 'ユ', 'ュ', 'ゆ', 'ゅ', 'ヨ', 'ョ', 'よ', 'ょ', 'ラ', 'ら', 'リ', 'り', 
    'ル', 'る', 'レ', 'れ', 'ロ', 'ろ', 'ワ', 'わ', 'ヲ', 'を', 'ン', 'ん', 'ガ', 
    'が', 'ギ', 'ぎ', 'グ', 'ぐ', 'ゲ', 'げ', 'ゴ', 'ご', 'ザ', 'ざ', 'ジ', 'じ', 
    'ズ', 'ず', 'ゼ', 'ぜ', 'ゾ', 'ぞ', 'ダ', 'だ', 'ヂ', 'ぢ', 'ヅ', 'づ', 'デ', 
    'で', 'ド', 'ど', 'バ', 'ば', 'ビ', 'び', 'ブ', 'ぶ', 'ベ', 'べ', 'ボ', 'ぼ', 
    'パ', 'ぱ', 'ピ', 'ぴ', 'プ', 'ぷ', 'ペ', 'ぺ', 'ポ', 'ぽ', 'ヴ', 'ー', '―', 
    '‐', '−', 'Ａ', 'ａ', 'Ｂ', 'ｂ', 'Ｃ', 'ｃ', 'Ｄ', 'ｄ', 'Ｅ', 'ｅ', 'Ｆ', 'ｆ', 
    'Ｇ', 'ｇ', 'Ｈ', 'ｈ', 'Ｉ', 'ｉ', 'Ｊ', 'ｊ', 'Ｋ', 'ｋ', 'Ｌ', 'ｌ', 'Ｍ', 'ｍ', 
    'Ｎ', 'ｎ', 'Ｏ', 'ｏ', 'Ｐ', 'ｐ', 'Ｑ', 'ｑ', 'Ｒ', 'ｒ', 'Ｓ', 'ｓ', 'Ｔ', 'ｔ', 
    'Ｕ', 'ｕ', 'Ｖ', 'ｖ', 'Ｗ', 'ｗ', 'Ｘ', 'ｘ', 'Ｙ', 'ｙ', 'Ｚ', 'ｚ', '０', '１', 
    '２', '３', '４', '５', '６', '７', '８', '９', '　', '゛', '゜'];

/** 全角to半角変換1、3、半角to全角変換1、3用半角文字定義配列 */
var aaui022_HANKAKU_SIGN = ['\\', ',', '.', '/', '(', ')', '｢', '｣'];

/** 全角to半角変換1、3、半角to全角変換1、3用全角文字定義配列 */
var aaui022_ZENKAKU_SIGN = ['￥', '，', '．', '／', '（', '）', '「', '」'];

/** 半角to全角変換3用半角文字定義配列 */
var aaui022_HANKAKU_SMALL_CHAR = ['ｧ', 'ｨ', 'ｩ', 'ｪ', 'ｫ', 'ｬ', 'ｭ', 'ｮ', 
    'ｯ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

/** 半角to全角変換3用全角文字定義配列 */
var aaui022_ZENKAKU_SMALL_CHAR = ['ァ', 'ィ', 'ゥ', 'ェ', 'ォ', 'ャ', 'ュ', 'ョ', 
    'ッ', 'ａ', 'ｂ', 'ｃ', 'ｄ', 'ｅ', 'ｆ', 'ｇ', 'ｈ', 'ｉ', 'ｊ', 'ｋ', 'ｌ', 'ｍ', 
    'ｎ', 'ｏ', 'ｐ', 'ｑ', 'ｒ', 'ｓ', 'ｔ', 'ｕ', 'ｖ', 'ｗ', 'ｘ', 'ｙ', 'ｚ'];

/** 全角to半角変換3用半角文字定義配列 */
var aaui022_HANKAKU_SMALL_CHAR2 = ['ｱ', 'ｱ', 'ｲ', 'ｲ', 'ｲ', 'ｳ', 'ｳ', 'ｴ', 
    'ｴ', 'ｴ', 'ｵ', 'ｵ', 'ｶ', 'ｶ', 'ｷ', 'ｷ', 'ｸ', 'ｸ', 'ｹ', 'ｹ', 'ｺ', 'ｺ', 
    'ｻ', 'ｻ', 'ｼ', 'ｼ', 'ｽ', 'ｽ', 'ｾ', 'ｾ', 'ｿ', 'ｿ', 'ﾀ', 'ﾀ', 'ﾁ', 'ﾁ', 
    'ﾂ', 'ﾂ', 'ﾃ', 'ﾃ', 'ﾄ', 'ﾄ', 'ﾅ', 'ﾅ', 'ﾆ', 'ﾆ', 'ﾇ', 'ﾇ', 'ﾈ', 'ﾈ', 
    'ﾉ', 'ﾉ', 'ﾊ', 'ﾊ', 'ﾋ', 'ﾋ', 'ﾌ', 'ﾌ', 'ﾍ', 'ﾍ', 'ﾎ', 'ﾎ', 'ﾏ', 'ﾏ', 
    'ﾐ', 'ﾐ', 'ﾑ', 'ﾑ', 'ﾒ', 'ﾒ', 'ﾓ', 'ﾓ', 'ﾔ', 'ﾔ', 'ﾕ', 'ﾕ', 'ﾖ', 'ﾖ', 
    'ﾗ', 'ﾗ', 'ﾘ', 'ﾘ', 'ﾙ', 'ﾙ', 'ﾚ', 'ﾚ', 'ﾛ', 'ﾛ', 'ﾜ', 'ﾜ', 'ｦ', 'ｦ', 
    'ﾝ', 'ﾝ', 'ｶﾞ', 'ｶﾞ', 'ｷﾞ', 'ｷﾞ', 'ｸﾞ', 'ｸﾞ', 'ｹﾞ', 'ｹﾞ', 'ｺﾞ', 'ｺﾞ', 'ｻﾞ', 
    'ｻﾞ', 'ｼﾞ', 'ｼﾞ', 'ｽﾞ', 'ｽﾞ', 'ｾﾞ', 'ｾﾞ', 'ｿﾞ', 'ｿﾞ', 'ﾀﾞ', 'ﾀﾞ', 'ﾁﾞ', 'ﾁﾞ', 
    'ﾂﾞ', 'ﾂﾞ', 'ﾃﾞ', 'ﾃﾞ', 'ﾄﾞ', 'ﾄﾞ', 'ﾊﾞ', 'ﾊﾞ', 'ﾋﾞ', 'ﾋﾞ', 'ﾌﾞ', 'ﾌﾞ', 'ﾍﾞ', 
    'ﾍﾞ', 'ﾎﾞ', 'ﾎﾞ', 'ﾊﾟ', 'ﾊﾟ', 'ﾋﾟ', 'ﾋﾟ', 'ﾌﾟ', 'ﾌﾟ', 'ﾍﾟ', 'ﾍﾟ', 'ﾎﾟ', 'ﾎﾟ', 
    'ｳﾞ', '-', '-', '-', '-', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 
    'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 
    'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', 
    'ﾞ', 'ﾟ', '\\', ',', '.', '/', '(', ')', '｢', '｣', 'ｧ', 'ｨ', 'ｩ', 'ｪ', 
    'ｫ', 'ｬ', 'ｭ', 'ｮ', 'ｯ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 
    'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 
    'x', 'y', 'z', 'ｧ', 'ｨ', 'ｩ', 'ｪ', 'ｫ', 'ｬ', 'ｭ', 'ｮ', 'ｯ'];

/** 全角to半角変換3用全角文字定義配列 */
var aaui022_ZENKAKU_SMALL_CHAR2 = ['ア', 'あ', 'イ', 'い', 'ゐ', 'ウ', 'う', 
    'エ', 'え', 'ゑ', 'オ', 'お', 'カ', 'か', 'キ', 'き', 'ク', 'く', 'ケ', 'け', 
    'コ', 'こ', 'サ', 'さ', 'シ', 'し', 'ス', 'す', 'セ', 'せ', 'ソ', 'そ', 'タ', 
    'た', 'チ', 'ち', 'ツ', 'つ', 'テ', 'て', 'ト', 'と', 'ナ', 'な', 'ニ', 'に', 
    'ヌ', 'ぬ', 'ネ', 'ね', 'ノ', 'の', 'ハ', 'は', 'ヒ', 'ひ', 'フ', 'ふ', 'ヘ', 
    'へ', 'ホ', 'ほ', 'マ', 'ま', 'ミ', 'み', 'ム', 'む', 'メ', 'め', 'モ', 'も', 
    'ヤ', 'や', 'ユ', 'ゆ', 'ヨ', 'よ', 'ラ', 'ら', 'リ', 'り', 'ル', 'る', 'レ', 
    'れ', 'ロ', 'ろ', 'ワ', 'わ', 'ヲ', 'を', 'ン', 'ん', 'ガ', 'が', 'ギ', 'ぎ', 
    'グ', 'ぐ', 'ゲ', 'げ', 'ゴ', 'ご', 'ザ', 'ざ', 'ジ', 'じ', 'ズ', 'ず', 'ゼ', 
    'ぜ', 'ゾ', 'ぞ', 'ダ', 'だ', 'ヂ', 'ぢ', 'ヅ', 'づ', 'デ', 'で', 'ド', 'ど', 
    'バ', 'ば', 'ビ', 'び', 'ブ', 'ぶ', 'ベ', 'べ', 'ボ', 'ぼ', 'パ', 'ぱ', 'ピ', 
    'ぴ', 'プ', 'ぷ', 'ペ', 'ぺ', 'ポ', 'ぽ', 'ヴ', 'ー', '―', '‐', '−', 'Ａ', 
    'Ｂ', 'Ｃ', 'Ｄ', 'Ｅ', 'Ｆ', 'Ｇ', 'Ｈ', 'Ｉ', 'Ｊ', 'Ｋ', 'Ｌ', 'Ｍ', 'Ｎ', 
    'Ｏ', 'Ｐ', 'Ｑ', 'Ｒ', 'Ｓ', 'Ｔ', 'Ｕ', 'Ｖ', 'Ｗ', 'Ｘ', 'Ｙ', 'Ｚ', '０', 
    '１', '２', '３', '４', '５', '６', '７', '８', '９', '　', '゛', '゜', '￥', 
    '，', '．', '／', '（', '）', '「', '」', 'ァ', 'ィ', 'ゥ', 'ェ', 'ォ', 'ャ', 
    'ュ', 'ョ', 'ッ', 'ａ', 'ｂ', 'ｃ', 'ｄ', 'ｅ', 'ｆ', 'ｇ', 'ｈ', 'ｉ', 'ｊ', 'ｋ', 
    'ｌ', 'ｍ', 'ｎ', 'ｏ', 'ｐ', 'ｑ', 'ｒ', 'ｓ', 'ｔ', 'ｕ', 'ｖ', 'ｗ', 'ｘ', 'ｙ', 
    'ｚ', 'ぁ', 'ぃ', 'ぅ', 'ぇ', 'ぉ', 'ゃ', 'ゅ', 'ょ', 'っ'];

/**
 * 振込・振替依頼業務の金融機関名・支店名、振込前都度登録業務の
 * 金融機関名・支店名の入力において、入力された文字列を変換ルールに
 * 対応した全角文字へ変換して返却する。
 * @param hankakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toZenkaku2(hankakuStr) {
    var retStr = [];
    // 対象値がない場合は、そのまま返却。
    if (hankakuStr === '' || hankakuStr === null || hankakuStr === undefined) {
        return hankakuStr;
    }
    // 文字列に変換対象となる半角文字があるかチェック
    for (var i = 0; i < hankakuStr.length; i++) {
        for (var j = 0; j < aaui022_HAN_TO_ZEN_HANKAKU_MAP.length; j++) {
            // 半角→全角変換
            if (hankakuStr.charAt(i) == aaui022_HAN_TO_ZEN_HANKAKU_MAP[j]) {
                retStr.push(aaui022_HAN_TO_ZEN_ZENKAKU_MAP[j]);
                break;
            }
        }
        // 変換対象でなければそのまま。
        if (j == aaui022_HAN_TO_ZEN_HANKAKU_MAP.length) {
            retStr.push(hankakuStr.charAt(i));
        }
    }
    return retStr.join('');
}

/**
 * 振込・振替依頼業務の受取人名・振込メッセージの入力において、
 * 入力された文字列を変換ルールに対応した全角文字へ変換して返却する。
 * @param hankakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toZenkaku1(hankakuStr) {
    // 対象値がない場合は、そのまま返却。
    if (hankakuStr === '' || hankakuStr === null || hankakuStr === undefined) {
        return hankakuStr;
    }
    
    var retStr = [];
    // 後続のチェックを実施するか否か
    var isCheckFlg = true;
    
    for (var i = 0; i < hankakuStr.length; i++) {
        // 必ず初期化する
        isCheckFlg = true;
        for (var j = 0; j < aaui022_HANKAKU_SIGN.length; j++) {
            // 文字列に変換対象となる半角記号があるかチェック
            if (hankakuStr.charAt(i) == aaui022_HANKAKU_SIGN[j]) {
                retStr.push(aaui022_ZENKAKU_SIGN[j]);
                isCheckFlg = false;
                break;
            }
        }
        if (isCheckFlg) {
            for (var k = 0; k < aaui022_HAN_TO_ZEN_HANKAKU_MAP.length; k++) {
                // 半角→全角変換
                if (hankakuStr.charAt(i) == aaui022_HAN_TO_ZEN_HANKAKU_MAP[k]) {
                    retStr.push(aaui022_HAN_TO_ZEN_ZENKAKU_MAP[k]);
                    isCheckFlg = false;
                    break;
                }
            }
        }
        if (isCheckFlg) {
            // 変換対象がなければそのまま。
            retStr.push(hankakuStr.charAt(i));
        }
    }
    return retStr.join('');
}

/**
 * 関連口座登録業務の支店名、振込前都度登録業務の備考、住所変更業務の
 * カナ住所とカナ勤務先、公共料金自動引落登録業務のフリガナにおいて
 * 入力された文字列を変換ルールに対応した全角文字へ変換して返却する。
 * @param hankakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toZenkaku3(hankakuStr) {
    // 対象値がない場合は、そのまま返却。
    if (hankakuStr === '' || hankakuStr === null || hankakuStr === undefined) {
        return hankakuStr;
    }

    var retStr = [];
    // 後続のチェックを実施するか否か
    var isCheckFlg = true;
    
    for (var i = 0; i < hankakuStr.length; i++) {
        // 必ず初期化する
        isCheckFlg = true;
        for (var j = 0; j < aaui022_HANKAKU_SMALL_CHAR.length; j++) {
            // 文字列に変換対象となる半角小文字があるかチェック
            if(hankakuStr.charAt(i) == aaui022_HANKAKU_SMALL_CHAR[j]) {
                retStr.push(aaui022_ZENKAKU_SMALL_CHAR[j]);
                isCheckFlg = false;
                break;
            }
        }
        if (isCheckFlg) {
            for (var k = 0; k < aaui022_HANKAKU_SIGN.length; k++) {
                // 文字列に変換対象となる半角記号があるかチェック
                if (hankakuStr.charAt(i) == aaui022_HANKAKU_SIGN[k]) {
                    retStr.push(aaui022_ZENKAKU_SIGN[k]);
                    isCheckFlg = false;
                    break;
                }
            }
            if (isCheckFlg) {
                for (var l = 0; l < aaui022_HAN_TO_ZEN_HANKAKU_MAP.length;
                     l++) {
                    // 半角→全角変換
                    if (hankakuStr.charAt(i) == 
                    aaui022_HAN_TO_ZEN_HANKAKU_MAP[l]) {
                        retStr.push(aaui022_HAN_TO_ZEN_ZENKAKU_MAP[l]);
                        isCheckFlg = false;
                        break;
                    }
                }
            }
            if (isCheckFlg) {
                // 変換対象がなければそのまま。
                retStr.push(hankakuStr.charAt(i));
            }
        }
    }
    return retStr.join('');
}

/**
 * 振込・振替依頼業務の金融機関名・支店名、振込前都度登録業務の
 * 金融機関名・支店名の入力において、入力された文字列を変換ルールに
 * 対応した半角文字へ変換して返却する。
 * @param zenkakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toHankaku2(zenkakuStr) {
    // 対象値がない場合は、そのまま返却。
    if (zenkakuStr === '' || zenkakuStr === null || zenkakuStr === undefined) {
        return zenkakuStr;
    }
    var retStr = [];
    // 文字列に変換対象となる全角文字があるかチェック
    for (var i = 0; i < zenkakuStr.length; i++) {
        for (var j = 0; j < aaui022_ZEN_TO_HAN_ZENKAKU_MAP.length; j++) {
            // 全角→半角変換
            if (zenkakuStr.charAt(i) == aaui022_ZEN_TO_HAN_ZENKAKU_MAP[j]) {
                retStr.push(aaui022_ZEN_TO_HAN_HANKAKU_MAP[j]);
                break;
            }
        }
        // 変換対象でなければそのまま。
        if (j == aaui022_ZEN_TO_HAN_ZENKAKU_MAP.length) {
            retStr.push(zenkakuStr.charAt(i));
        }
    }
    return retStr.join('');
}

/**
 * 振込・振替依頼業務の受取人名・振込メッセージの入力において、
 * 入力された文字列を変換ルールに対応した半角文字へ変換して返却する。
 * @param zenkakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toHankaku1(zenkakuStr) {
    // 対象値がない場合は、そのまま返却。
    if (zenkakuStr === '' || zenkakuStr === null || zenkakuStr === undefined) {
        return zenkakuStr;
    }

    var retStr = [];
    // 後続のチェックを実施するか否か
    var isCheckFlg = true;
    
    for (var i = 0; i < zenkakuStr.length; i++) {
        // 必ず初期化する
        isCheckFlg = true;
        for (var j = 0; j < aaui022_ZENKAKU_SIGN.length; j++) {
            // 文字列に変換対象となる全角記号があるかチェック
            if (zenkakuStr.charAt(i) == aaui022_ZENKAKU_SIGN[j]) {
                retStr.push(aaui022_HANKAKU_SIGN[j]);
                isCheckFlg = false;
                break;
            }
        }
        if (isCheckFlg) {
            for (var k = 0; k < aaui022_ZEN_TO_HAN_ZENKAKU_MAP.length; k++) {
                // 全角→半角変換
                if (zenkakuStr.charAt(i) == aaui022_ZEN_TO_HAN_ZENKAKU_MAP[k]) {
                    retStr.push(aaui022_ZEN_TO_HAN_HANKAKU_MAP[k]);
                    isCheckFlg = false;
                    break;
                }
            }
        }
        if (isCheckFlg) {
            // 変換対象がなければそのまま。
            retStr.push(zenkakuStr.charAt(i));
        }
    }
    return retStr.join('');
}

/**
 * 関連口座登録業務の支店名、振込前都度登録業務の備考、住所変更業務の
 * カナ住所とカナ勤務先、公共料金自動引落登録業務のフリガナにおいて
 * 入力された文字列を変換ルールに対応した半角文字へ変換して返却する。
 * @param zenkakuStr　変換対象の文字列
 * @return 変換対象文字列を変換ルールに応じて変換した文字列
 */
function toHankaku3(zenkakuStr) {
    // 対象値がない場合は、そのまま返却。
    if (zenkakuStr === '' || zenkakuStr === null || zenkakuStr === undefined) {
        return zenkakuStr;
    }
    var retStr = [];
    // 文字列に変換対象となる全角文字があるかチェック
    for (var i = 0; i < zenkakuStr.length; i++) {
        for (var j = 0; j < aaui022_ZENKAKU_SMALL_CHAR2.length; j++) {
            // 全角→半角変換
            if (zenkakuStr.charAt(i) == aaui022_ZENKAKU_SMALL_CHAR2[j]) {
                retStr.push(aaui022_HANKAKU_SMALL_CHAR2[j]);
                break;
            }
        }
        // 変換対象でなければそのまま。
        if (j == aaui022_ZENKAKU_SMALL_CHAR2.length) {
            retStr.push(zenkakuStr.charAt(i));
        }
    }
    return retStr.join('');
}/**
 * ファイル名   aaui023.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   入力チェック機能
 *          入力チェック初期化機能
 *
 * 修正履歴
 * 2012.06.22 NTTD 久慈智行 次世代個人IB開発
 * 2012.08.31 NTTD 半田佳菜 次世代個人IB開発
 * 2012.09.04 NTTD 半田佳菜 次世代個人IB開発
 * 2012.10.18 NTTD 半田佳菜 次世代個人IB開発
 * 2020.06.08 NTTD 新垣誠也 PSL仕変-業務開発-2020-013
 * 
 */

/** インスタンス変数接頭辞 */
var aaui023_PREFIX_INSTANCE = 'validation_';
/** チェック種別最大値 */
var aaui023_MAX_CHECK_TYPE = 27;
/** 値定義"0" */
var aaui023_ZERO = '0';
/** 値定義"1" */
var aaui023_ONE = '1';
/** 値定義"2" */
var aaui023_TWO = '2';
/** メールアドレス最小桁数 */
var aaui023_MAIL_MIN = '4';
/** メールアドレス最大桁数 */
var aaui023_MAIL_MAX = '64';

/** 初期化パラメータキー（フィールドID） */
var aaui023_KEY_PARAM_ELEMENT = 'element';
/** 初期化パラメータキー（メッセージ出力ID） */
var aaui023_KEY_PARAM_OUTPUTMSGID = 'msgOutputAreaId';
/** 初期化パラメータキー（トリガ） */
var aaui023_KEY_PARAM_TRIGGER = 'trigger';
/** 初期化パラメータキー（OK時コールバック関数(複数フィールド用)) */
var aaui023_KEY_PARAM_CUSTOMONVALID = 'useCustomOnValid';
/** 初期化パラメータキー（NG時コールバック関数(複数フィールド用)) */
var aaui023_KEY_PARAM_CUSTOMINVALID = 'useCustomInvalid';
/** 初期化パラメータキー（チェック種別） */
var aaui023_KEY_PARAM_VALIDATIONTYPE = 'validationType';
/** 初期化パラメータキー（エラーメッセージ） */
var aaui023_KEY_PARAM_FAILUREMSG = 'failureMsg';
/** 初期化パラメータキー（全角⇒半角変換有無） */
var aaui023_KEY_PARAM_ZENKAKUTOHANKAKU = 'zenkakuToHankaku';
/** 初期化パラメータキー（最小値） */
var aaui023_KEY_PARAM_MINIMUM = 'minimum';
/** 初期化パラメータキー（最大値） */
var aaui023_KEY_PARAM_MAXIMUM = 'maximum';
/** 初期化パラメータキー（正規表現） */
var aaui023_KEY_PARAM_PATTERN = 'pattern';
/** 初期化パラメータキー（桁数指定） */
var aaui023_KEY_PARAM_IS = 'is';

/** 初期化パラメータキー（フォーカスアウト指定） */
var aaui023_KEY_PARAM_ONLYONBLUR = 'onlyOnBlur';
/** 初期化パラメータキー（サブミット指定） */
var aaui023_KEY_PARAM_ONLYONSUBMIT = 'onlyOnSubmit';

/** チェック種別（必須） */
var aaui023_CHK_TYPE_PRESENCE = '0';
/** チェック種別（半角数字） */
var aaui023_CHK_TYPE_HANKAKU_NUM = '1';
/** チェック種別（半角英数(A9)） */
var aaui023_CHK_TYPE_HANKAKU_EISU_LARGE = '2';
/** チェック種別（半角英数(Aa9)） */
var aaui023_CHK_TYPE_HANKAKU_EISU = '3';
/** チェック種別（半角英数記(Aa9\)） */
var aaui023_CHK_TYPE_HANKAKU_EISU_SIGN = '4';
/** チェック種別（半角英数カナ記(A9ｱ\)） */
var aaui023_CHK_TYPE_HANKAKU_KANA_SIGN_LARGE = '5';
/** チェック種別（半角英数カナ記(Aa9ｱ\)） */
var aaui023_CHK_TYPE_HANKAKU_KANA_SIGN = '6';
/** チェック種別（半角英数カナ(A9ｱ)） */
var aaui023_CHK_TYPE_HANKAKU_KANA_LARGE = '7';
/** チェック種別（半角英数カナ(Aa9ｱ)） */
var aaui023_CHK_TYPE_HANKAKU_KANA = '8';
/** チェック種別（半角文字(Aa9ｱァ\)） */
var aaui023_CHK_TYPE_HANKAKU = '9';
/** チェック種別（全角カナ） */
var aaui023_CHK_TYPE_ZENKAKU_KANA = '10';
/** チェック種別（全角カナSP） */
var aaui023_CHK_TYPE_ZENKAKU_KANA_SP = '11';
/** チェック種別（全角文字(テレ為替文字)） */
var aaui023_CHK_TYPE_ZENKAKU_TERE = '12';
/** チェック種別（全角文字(リスクベース認証)） */
var aaui023_CHK_TYPE_ZENKAKU_FDS = '13';
/** チェック種別（全角文字(全て)） */
var aaui023_CHK_TYPE_ZENKAKU = '14';
/** チェック種別（メールアドレス） */
var aaui023_CHK_TYPE_EMAIL = '15';
/** チェック種別（正規表現） */
var aaui023_CHK_TYPE_REGEXP = '16';
/** チェック種別（桁数チェック（指定桁数）） */
var aaui023_CHK_TYPE_KETA_IS = '17';
/** チェック種別（桁数チェック（最小桁数）） */
var aaui023_CHK_TYPE_KETA_MIN = '18';
/** チェック種別（桁数チェック（最大桁数）） */
var aaui023_CHK_TYPE_KETA_MAX = '19';
/** チェック種別（桁数チェック（桁数範囲）） */
var aaui023_CHK_TYPE_KETA_RANGE = '20';
/** チェック種別（数値範囲チェック（最小数値）） */
var aaui023_CHK_TYPE_VALUE_MIN = '21';
/** チェック種別（数値範囲チェック（最大数値）） */
var aaui023_CHK_TYPE_VALUE_MAX = '22';
/** チェック種別（数値範囲チェック（数値範囲）） */
var aaui023_CHK_TYPE_VALUE_RANGE = '23';
/** チェック種別（ラジオボタン選択チェック） */
var aaui023_CHK_TYPE_RADIO = '24';
/** チェック種別（チェックボックス選択チェック） */
var aaui023_CHK_TYPE_CHECK_BOX = '25';
/** チェック種別（プルダウン選択チェック） */
var aaui023_CHK_TYPE_PULL_DOWN = '26';
/** チェック種別（先頭ゼロ埋めチェック） */
var aaui023_CHK_TYPE_HEAD_ZERO = '27';

/** 正規表現（半角数字) */
var aaui023_REGEXP_HANKAKU_NUM = '/^[0-9]+$/';
/** 正規表現(半角英数(A9)) */
var aaui023_REGEXP_HANKAKU_EISU_LARGE = '/^[A-Z0-9]+$/';
/** 正規表現(半角英数(Aa9)) */
var aaui023_REGEXP_HANKAKU_EISU = '/^[a-zA-Z0-9]+$/';
/** 正規表現(半角英数記(Aa9\)) */
var aaui023_REGEXP_HANKAKU_EISU_SIGN = '/^[a-zA-Z0-9\\\\, \\.\\/\\(\\)｢｣]+$/';
/** 正規表現(半角英数カナ記(A9ｱ\)) */
var aaui023_REGEXP_HANKAKU_KANA_SIGN_LARGE = '/^[A-Z0-9ｱ-ﾝｦｰﾞﾟ\\\\, \\.\\/\\(\\)｢｣]+$/';
/** 正規表現(半角英数カナ記(Aa9ｱ\)) */
var aaui023_REGEXP_HANKAKU_KANA_SIGN = '/^[A-Za-z0-9ｱ-ﾝｦｰﾞﾟ\\\\, \\.\\/\\(\\)｢｣]+$/';
/** 正規表現(半角英数カナ(A9ｱ)) */
var aaui023_REGEXP_HANKAKU_KANA_LARGE = '/^[A-Z0-9ｱ-ﾝｦｰﾞﾟ ]+$/';
/** 正規表現(半角英数カナ(Aa9ｱ)) */
var aaui023_REGEXP_HANKAKU_KANA = '/^[A-Za-z0-9ｱ-ﾝｦｰﾞﾟ ]+$/';
/** 正規表現(半角文字(Aa9ｱｧ\)) */
var aaui023_REGEXP_HANKAKU = '/^[A-Za-z0-9｡-ﾟ\\-\\\\, \\.\\/\\(\\)｢｣]+$/';
/** 正規表現(全角カナ )　*/
var aaui023_REGEXP_ZENKAKU_KANA = '/^[アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンー゛゜]+$/';
/** 正規表現(全角カナSP)　*/
var aaui023_REGEXP_ZENKAKU_KANA_SP = '/^[　アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンー゛゜]+$/';
/** 正規表現(全角文字(テレ為替文字)) */
var aaui023_REGEXP_ZENKAKU_TERE = '/^[　０-９Ａ-Ｚアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンー゛゜￥，．／（）「」]+$/';
/** 正規表現(全角文字(リスクベース認証))　*/
var aaui023_REGEXP_ZENKAKU_FDS = '/^[　０-９Ａ-Ｚａ-ｚアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンー゛゜ァィゥェォッャュョ￥，．／（）「」！”＃＄％＆’＊＋−：；＜＝＞？＠［］＾＿｀｛｜｝〜。、・]+$/';
/** 正規表現(全角文字(全て))　*/
var aaui023_REGEXP_ZENKAKU = '/^[　０-９Ａ-Ｚａ-ｚア-ンヴー゛゜ァィゥェォッャュョヵヶ￥，．／（）「」！”＃＄％＆’＊＋−：；＜＝＞？＠［］＾＿｀｛｜｝〜。、・ぁ-んゐゑ々\u4E00-\u9FAF]+$/';
/** 正規表現(先頭ゼロ埋め)　*/
var aaui023_REGEXP_HEAD_ZERO = '/^[^0]/';

/** 標準エラーメッセージ (必須)*/
var aaui023_ERR_MSG_PRESENCE = '必ず入力して下さい。';
/** 標準エラーメッセージ (半角数字)*/
var aaui023_ERR_MSG_HANKAKU_NUM = '半角数字で入力して下さい。';
/** 標準エラーメッセージ (半角英数(A9))*/
var aaui023_ERR_MSG_HANKAKU_EISU_LARGE = '半角英数大文字で入力して下さい。';
/** 標準エラーメッセージ (半角英数(Aa9))*/
var aaui023_ERR_MSG_HANKAKU_EISU = '半角英数字で入力して下さい。';
/** 標準エラーメッセージ (半角英数記(Aa9\))*/
var aaui023_ERR_MSG_HANKAKU_EISU_SIGN = '半角英数字で入力して下さい。';
/** 標準エラーメッセージ (半角英数カナ記(A9ｱ\))*/
var aaui023_ERR_MSG_HANKAKU_KANA_SIGN_LARGE = '半角カナ英数大文字で入力して下さい。';
/** 標準エラーメッセージ (半角英数カナ記(Aa9ｱ\))*/
var aaui023_ERR_MSG_HANKAKU_KANA_SIGN = '半角カナ英数字で入力して下さい。';
/** 標準エラーメッセージ (半角英数カナ(A9ｱ))*/
var aaui023_ERR_MSG_HANKAKU_KANA_LARGE = '半角カナ英数大文字で入力して下さい。';
/** 標準エラーメッセージ (半角英数カナ(Aa9ｱ))*/
var aaui023_ERR_MSG_HANKAKU_KANA = '半角カナ英数字で入力して下さい。';
/** 標準エラーメッセージ (半角文字(Aa9ｱァ\))*/
var aaui023_ERR_MSG_HANKAKU = '半角文字で入力して下さい。';
/** 標準エラーメッセージ (全角カナ) */
var aaui023_ERR_MSG_ZENKAKU_KANA = '全角カナで入力して下さい。';
/** 標準エラーメッセージ (全角カナSP)*/
var aaui023_ERR_MSG_ZENKAKU_KANA_SP = '全角カナで入力して下さい。';
/** 標準エラーメッセージ (全角文字（テレ為替文字))*/
var aaui023_ERR_MSG_ZENKAKU_TERE = '全角文字で入力して下さい。';
/** 標準エラーメッセージ (全角文字(リスクベース認証))*/
var aaui023_ERR_MSG_ZENKAKU_FDS = '全角文字で入力して下さい。';
/** 標準エラーメッセージ (全角文字(全て))*/
var aaui023_ERR_MSG_ZENKAKU = '全角文字で入力して下さい。';
/** 標準エラーメッセージ (メールアドレス)*/
var aaui023_ERR_MSG_EMAIL = '有効なメールアドレスではありません。';
/** 標準エラーメッセージ (正規表現)*/
var aaui023_ERR_MSG_REGEXP = '使用できない文字が含まれています。';
/** 標準エラーメッセージ (指定桁数)*/
var aaui023_ERR_MSG_IS = '{0}桁で入力して下さい。';
/** 標準エラーメッセージ (最小桁数)*/
var aaui023_ERR_MSG_MIN_LENGTH = '{0}桁以上で入力して下さい。';
/** 標準エラーメッセージ (最大桁数)*/
var aaui023_ERR_MSG_MAX_LENGTH = '{0}桁以下で入力して下さい。';
/** 標準エラーメッセージ (桁数範囲)*/
var aaui023_ERR_MSG_RANGE_LENGTH = '{0}から{1}桁で入力して下さい。';
/** 標準エラーメッセージ (最小数値)*/
var aaui023_ERR_MSG_MIN_VAL = '{0}以上の値を入力して下さい。';
/** 標準エラーメッセージ (最大数値)*/
var aaui023_ERR_MSG_MAX_VAL = '{0}以下の値を入力して下さい。';
/** 標準エラーメッセージ (数値範囲)*/
var aaui023_ERR_MSG_RANGE_VAL = '{0}以上{1}以下の値を入力して下さい。';
/** 標準エラーメッセージ (ラジオボタン)*/
var aaui023_ERR_MSG_RADIO = '選択して下さい。';
/** 標準エラーメッセージ (チェックボックス)*/
var aaui023_ERR_MSG_CHECK_BOX = '{0}つ以上選択して下さい。';
/** 標準エラーメッセージ (プルダウン)*/
var aaui023_ERR_MSG_PULL_DOWN = '選択して下さい。';
/** 標準エラーメッセージ (先頭ゼロ埋め)*/
var aaui023_ERR_MSG_HEAD_ZERO = '先頭の0は除いて入力して下さい。';

// 操作対象のインスタンス変数名
var aaui023_nowInstanceName = '';
// インスタンス変数シーケンシャル
var liveValidateSeq = 0;
// 要素とインスタンス変数名のMapping格納用連想配列
var eleAndInsNameMap = new Array();
// 要素とインスタンス変数オブジェクトのMapping格納用連想配列
var eleAndInsObjMap = new Array();

/**
 * liveValidationをインスタンス化する。
 * @param initParams 初期化パラメータ連想配列
 * @param onlyOnBlur フォーカスアウト or サブミット
 * @return instanceStr インスタンス化宣言文字列
 */
function createLiveValidationInstance(initParams, onlyOnBlur) {
    // インスタンス化宣言文字列格納変数
    var instanceStr = '';
    // インスタンス化宣言文字列作成
    instanceStr = 'var ' + aaui023_nowInstanceName + 
        ' = new LiveValidation(\'' + initParams[aaui023_KEY_PARAM_ELEMENT] + 
        '\', { insertAfterWhatNode: \'' + 
        initParams[aaui023_KEY_PARAM_OUTPUTMSGID] + '\'';
    // チェック契機指定
    if (onlyOnBlur) {
    	instanceStr = instanceStr + ', onlyOnBlur: true, onlyOnSubmit: false';
    } else {
    	instanceStr = instanceStr + ', onlyOnBlur: false, onlyOnSubmit: true' +
    	    ', trigger:\'' + initParams[aaui023_KEY_PARAM_TRIGGER] + '\'';
    }
    // 複数フィールド用コールバックの設定があれば、追加
    if (aaui023_KEY_PARAM_CUSTOMONVALID in initParams) {
        // 設定値が0以外は設定しない
        if (initParams[aaui023_KEY_PARAM_CUSTOMONVALID] == 
            aaui023_ZERO) {
            instanceStr = instanceStr + ', useCustomOnValid: true';
        }
    }
    if (aaui023_KEY_PARAM_CUSTOMINVALID in initParams) {
        // 設定値が0以外は設定しない
        if (initParams[aaui023_KEY_PARAM_CUSTOMINVALID] == 
            aaui023_ZERO) {
            instanceStr = instanceStr + ', useCustomInvalid: true';
        }
    }
    instanceStr = instanceStr + '});';
    // インスタンス化宣言文字列返却
    return instanceStr;
}

/**
 * エラーメッセージパラメータ部分の定義を構築する。
 * @param initParams 初期化パラメータ連想配列
 * @param defaultMsg 標準エラーメッセージ
 * @return retStr エラーメッセージパラメータ宣言文字列
 */
function createErrMsgParam(initParams, defaultMsg) {
    var retStr = '';
    // エラーメッセージが初期パラメータに設定されてればそれを指定する。なければ標準。
    if (aaui023_KEY_PARAM_FAILUREMSG in initParams) {
        retStr = retStr + initParams[aaui023_KEY_PARAM_FAILUREMSG];
    }
    if (retStr == null || retStr == '') {
        retStr = retStr + defaultMsg;
    }
    return retStr;
}

/**
 * Validate.Formatの場合のadd文字列（全角半角変換のパラメータ前まで)を作成する。
 * @param initParams 初期化パラメータ連想配列
 * @return add文字列
 */
function createFormatValidate(initParams) {
    // 返却用文字列変数
    var retStr = aaui023_nowInstanceName + 
        '.add(Validate.Format, {failureMessage:\"';

    // チェック種別によって、使用する正規表現,エラーメッセージを変更
    if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_NUM) {
        // 半角数字チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_NUM) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_NUM;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_EISU_LARGE) {
        // 半角英数(A9)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_EISU_LARGE) + 
            '\", pattern:' + aaui023_REGEXP_HANKAKU_EISU_LARGE;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_EISU) {
        // 半角英数(Aa9)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_EISU) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_EISU;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_EISU_SIGN) {
        // 半角英数記(Aa9\)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_EISU_SIGN) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_EISU_SIGN;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_KANA_SIGN_LARGE) {
        // 半角英数カナ記(A9ｱ\)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_KANA_SIGN_LARGE) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_KANA_SIGN_LARGE;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_KANA_SIGN) {
        // 半角英数カナ記(Aa9ｱ\)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_KANA_SIGN) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_KANA_SIGN;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_KANA_LARGE) {
        // 半角英数カナ(A9ｱ)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_KANA_LARGE) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_KANA_LARGE;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU_KANA) {
        // 半角英数カナ(Aa9ｱ)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU_KANA) + '\", pattern:' + 
            aaui023_REGEXP_HANKAKU_KANA;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HANKAKU) {
        // 半角文字(Aa9ｱァ\)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HANKAKU) + '\", pattern:' + aaui023_REGEXP_HANKAKU;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_ZENKAKU_KANA) {
        // 全角カナチェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_ZENKAKU_KANA) + '\", pattern:' + 
            aaui023_REGEXP_ZENKAKU_KANA;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_ZENKAKU_KANA_SP) {
        // 全角カナSPチェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_ZENKAKU_KANA_SP) + '\", pattern:' + 
            aaui023_REGEXP_ZENKAKU_KANA_SP;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_ZENKAKU_TERE) {
        // 全角文字(テレ為替文字)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_ZENKAKU_TERE) + '\", pattern:' + 
            aaui023_REGEXP_ZENKAKU_TERE;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_ZENKAKU_FDS) {
        // 全角文字(リスクベース認証)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_ZENKAKU_FDS) + '\", pattern:' + 
            aaui023_REGEXP_ZENKAKU_FDS;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_ZENKAKU) {
        // 全角文字(全て)チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_ZENKAKU) + '\", pattern:' + aaui023_REGEXP_ZENKAKU;
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_REGEXP) {
        // 正規表現チェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_REGEXP) + '\", pattern:' + 
            initParams[aaui023_KEY_PARAM_PATTERN];
    } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
        aaui023_CHK_TYPE_HEAD_ZERO) {
        // 先頭ゼロ埋めチェック
        retStr = retStr + createErrMsgParam(initParams, 
            aaui023_ERR_MSG_HEAD_ZERO) + '\", pattern:' + aaui023_REGEXP_HEAD_ZERO;
    }
    return retStr;
}

/**
 * add文字列を作成する。
 * @param initParams 初期化パラメータ連想配列
 * @return add文字列
 */
function createAddValidateFunc(initParams) {
    // validate関数追加文字列格納変数
    var addStr = '';

    // チェック種別を評価する
    if (aaui023_KEY_PARAM_VALIDATIONTYPE in initParams) {
        // 必須チェックの場合
        if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_PRESENCE) {
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Presence, {failureMessage:\"' + 
                createErrMsgParam(initParams, aaui023_ERR_MSG_PRESENCE) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == '15') {
            // メールアドレスチェックの場合
            addStr = aaui023_nowInstanceName + 
            '.add(Validate.Email, {failureMessage:\"' + 
            createErrMsgParam(initParams, aaui023_ERR_MSG_EMAIL) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_KETA_IS) {
            // 桁数チェック（指定桁数）の場合
            addStr = aaui023_nowInstanceName + '.add(Validate.Length, {is:' + 
                initParams[aaui023_KEY_PARAM_IS] + ', wrongLengthMessage:\"' + 
                createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_IS, initParams[aaui023_KEY_PARAM_IS])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_KETA_MIN) {
            // 桁数チェック（最小桁数）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Length, {minimum:' + 
                initParams[aaui023_KEY_PARAM_MINIMUM] + 
                ', tooShortMessage:\"' + createErrMsgParam(initParams,
                    replaceMsg(aaui023_ERR_MSG_MIN_LENGTH , initParams[aaui023_KEY_PARAM_MINIMUM])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_KETA_MAX) {
            // 桁数チェック（最大桁数）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Length, {maximum:' + 
                initParams[aaui023_KEY_PARAM_MAXIMUM] + 
                ', tooLongMessage:\"' + createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_MAX_LENGTH , initParams[aaui023_KEY_PARAM_MAXIMUM])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_KETA_RANGE) {
            // 桁数チェック（桁数範囲）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Length, {minimum:' + 
                initParams[aaui023_KEY_PARAM_MINIMUM] + 
                ', maximum:' + initParams[aaui023_KEY_PARAM_MAXIMUM] + 
                ', tooShortMessage:\"' + createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, initParams[aaui023_KEY_PARAM_MINIMUM], 
                        initParams[aaui023_KEY_PARAM_MAXIMUM])) + '\"' + 
                ', tooLongMessage:\"' + createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, initParams[aaui023_KEY_PARAM_MINIMUM], 
                        initParams[aaui023_KEY_PARAM_MAXIMUM])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_VALUE_MIN) {
            // 数値範囲チェック（最小数値）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Numericality, {minimum:' + 
                initParams[aaui023_KEY_PARAM_MINIMUM] + 
                ', tooLowMessage:\"' + createErrMsgParam(initParams,
                    replaceMsg(aaui023_ERR_MSG_MIN_VAL, initParams[aaui023_KEY_PARAM_MINIMUM] )) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_VALUE_MAX) {
            // 数値範囲チェック（最大数値）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Numericality, {maximum:' + 
                initParams[aaui023_KEY_PARAM_MAXIMUM] + 
                ', tooHighMessage:\"' + createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_MAX_VAL, initParams[aaui023_KEY_PARAM_MAXIMUM] )) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_VALUE_RANGE) {
            // 数値範囲チェック（数値範囲）の場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Numericality, {minimum:' + 
                initParams[aaui023_KEY_PARAM_MINIMUM] + ', maximum:' + 
                initParams[aaui023_KEY_PARAM_MAXIMUM] + ', tooLowMessage:\"' + 
                createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_RANGE_VAL, initParams[aaui023_KEY_PARAM_MINIMUM], 
                        initParams[aaui023_KEY_PARAM_MAXIMUM])) + '\", tooHighMessage:\"' + 
                createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_RANGE_VAL, initParams[aaui023_KEY_PARAM_MINIMUM], 
                        initParams[aaui023_KEY_PARAM_MAXIMUM])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_RADIO) {
            // ラジオボタン選択チェックの場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.Radio, {minNum: 1, failureMessage:\"' + 
                createErrMsgParam(initParams, aaui023_ERR_MSG_RADIO) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_CHECK_BOX) {
            // チェックボックス選択チェックの場合
            addStr = aaui023_nowInstanceName + 
                '.add(Validate.CheckBoxes, {minNum:' + 
                initParams[aaui023_KEY_PARAM_MINIMUM] + 
                ', failureMessage:\"' + 
                createErrMsgParam(initParams, 
                    replaceMsg(aaui023_ERR_MSG_CHECK_BOX, initParams[aaui023_KEY_PARAM_MINIMUM])) + '\"';
        } else if (initParams[aaui023_KEY_PARAM_VALIDATIONTYPE] == 
            aaui023_CHK_TYPE_PULL_DOWN) {
            // プルダウン選択チェックの場合
            addStr = aaui023_nowInstanceName + 
            '.add(Validate.Presence, {failureMessage:\"' + 
            createErrMsgParam(initParams, aaui023_ERR_MSG_PULL_DOWN) + '\"';
        } else {
            // Validate.Formatの場合
            addStr = addStr + createFormatValidate(initParams);
        }
        // 全角⇒半角変換指定があれば追加（※全部に共通なので、最後に実施）
        if (aaui023_KEY_PARAM_ZENKAKUTOHANKAKU in initParams) {
            // 前設定項目が全くないケースはありえないので、","を先頭に無条件でつける
            addStr = addStr + ', zenkakuToHankaku:' + 
            initParams[aaui023_KEY_PARAM_ZENKAKUTOHANKAKU];
        }

        addStr = addStr + '});';
        // 関数追加宣言文字列返却
        return addStr;
    } else {
        // チェック種別が存在しない場合、何もしない。
        return '';
    }
}

/**
 * 入力チェックの初期化（インスタンス生成、validate追加)を行う。
 * @param initParams 初期化パラメータ連想配列
 * @return なし
 */
function initValidate(initParams) {
	// 要素とインスタンス変数のMapping格納用連想配列
	var eleAndInsMap = new Array();
    // メールアドレス桁数チェック追加用文字列格納変数
    var addMailSizeChk = '';

    // パラメータ配列の評価を実施する
    for (var i = 0; i < initParams.length; i++) {
        // 初期化
        addMailSizeChk = '';
        // 必須パラメータが設定されているかチェックする
        if (aaui023_KEY_PARAM_ELEMENT in initParams[i] &&
            aaui023_KEY_PARAM_OUTPUTMSGID in initParams[i] &&
            aaui023_KEY_PARAM_TRIGGER in initParams[i] &&
            aaui023_KEY_PARAM_VALIDATIONTYPE in initParams[i]) {
            // パラメータ値がnull、空文字の場合はNG
            if (initParams[i][aaui023_KEY_PARAM_ELEMENT] === null ||
                initParams[i][aaui023_KEY_PARAM_ELEMENT] === '' ||
                initParams[i][aaui023_KEY_PARAM_OUTPUTMSGID] === null ||
                initParams[i][aaui023_KEY_PARAM_OUTPUTMSGID] === '' ||
                initParams[i][aaui023_KEY_PARAM_TRIGGER] === null ||
                initParams[i][aaui023_KEY_PARAM_TRIGGER] === '' ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] === null ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] === '') {
                continue;
            }
            // 要素の存在チェック
            var check_element = document.getElementById(initParams[i][aaui023_KEY_PARAM_ELEMENT]);
            //var check_element = $('#' + initParams[i][aaui023_KEY_PARAM_ELEMENT]).get(0);
            if (!check_element) {
            	continue;
            }
            // トリガーの存在チェック
            var check_trigger = document.getElementById(initParams[i][aaui023_KEY_PARAM_TRIGGER]);
            //var check_trigger = $('#' + initParams[i][aaui023_KEY_PARAM_TRIGGER]).get(0);
            if (!check_trigger) {
            	continue;
            }
            // チェック種別が定義しているもの以外が設定されていた場合はNG
            var validateTypeNum = Number(initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE]);
            if (isNaN(validateTypeNum) || 
                validateTypeNum > aaui023_MAX_CHECK_TYPE || 
                validateTypeNum < Number(aaui023_ZERO)) {
                continue;
            }
            // チェック種別により、必須となる項目があるかチェックする
            // 正規表現チェックの場合、正規表現パターンがないが設定なしはNG
            if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_REGEXP) {
                    if (aaui023_KEY_PARAM_PATTERN in initParams[i]) {
                        if (initParams[i][aaui023_KEY_PARAM_PATTERN] === null ||
                            initParams[i][aaui023_KEY_PARAM_PATTERN] === '') {
                            continue;    
                        }
                    } else {
                        continue;
                    }
            }
            // 桁数チェック（指定桁数）の場合、桁数指定が設定なしはNG
            if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_KETA_IS) {
                if (aaui023_KEY_PARAM_IS in initParams[i]) {
                    if (initParams[i][aaui023_KEY_PARAM_IS] === null ||
                        initParams[i][aaui023_KEY_PARAM_IS] === '') {
                        continue;    
                    }
                } else {
                    continue;
                }
            }
            // 桁数チェック（最小桁数）、桁数チェック（桁数範囲）、数値範囲チェック（最小数値）、
            // 数値範囲チェック（数値範囲）、チェックボックス選択チェックの場合、最小値が設定なしはNG
            if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_KETA_MIN ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_KETA_RANGE ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_VALUE_MIN ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_VALUE_RANGE ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_CHECK_BOX) {
                if (aaui023_KEY_PARAM_MINIMUM in initParams[i]) {
                    if (initParams[i][aaui023_KEY_PARAM_MINIMUM] === null ||
                         initParams[i][aaui023_KEY_PARAM_MINIMUM] === '') {
                        continue;    
                    }
                } else {
                    continue;
                }   
            }
            // 桁数チェック（最大桁数）、桁数チェック（桁数範囲）、数値範囲チェック（最大数値）、
            // 数値範囲チェック（数値範囲）の場合、最大値が設定なしはNG
            if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_KETA_MAX ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_KETA_RANGE ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_VALUE_MAX ||
                initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] ==
                aaui023_CHK_TYPE_VALUE_RANGE) {
                if (aaui023_KEY_PARAM_MAXIMUM in initParams[i]) {
                    if (initParams[i][aaui023_KEY_PARAM_MAXIMUM] === null ||
                         initParams[i][aaui023_KEY_PARAM_MAXIMUM] === '') {
                        continue;    
                    }
                } else {
                    continue;
                }   
            }
        } else {
            continue;
        }
        // validate対象の要素を特定し、すでにインスタンスがあるかチェックする
        if (aaui023_KEY_PARAM_ELEMENT in initParams[i]) {
    		// インスタンスは要素＋トリガー単位で生成する
            var mapKey = initParams[i][aaui023_KEY_PARAM_TRIGGER] +
                initParams[i][aaui023_KEY_PARAM_ELEMENT];
            if (mapKey in eleAndInsMap) {
                //　すでにインスタンスがある場合はそのインスタンスに対して操作する。
                aaui023_nowInstanceName = eleAndInsMap[mapKey];
            } else if (mapKey in eleAndInsNameMap) {
            	// 関数内にはないがグローバル変数にインスタンスが格納済の場合は、取得して操作する。
            	aaui023_nowInstanceName = eleAndInsNameMap[mapKey];
            	eleAndInsMap[mapKey] = aaui023_nowInstanceName;
            	var instanceStr = 'var ' + aaui023_nowInstanceName +
            		' = eleAndInsObjMap["' + mapKey + '"];';
            	eval(instanceStr);
            } else {
                // 該当の要素に対するインスタンスが存在しない場合は新たに作成
                aaui023_nowInstanceName = 
                    aaui023_PREFIX_INSTANCE + liveValidateSeq;

                liveValidateSeq = liveValidateSeq + 1;
                // Mapに追加
                eleAndInsMap[mapKey] = aaui023_nowInstanceName;
                // liveValidationインスタンス化
                var tmp1 = createLiveValidationInstance(initParams[i], false); 
                eval(tmp1);
                // 要素とインスタンス変数名のMapに追加
                eleAndInsNameMap[mapKey] = aaui023_nowInstanceName;
                // 要素とインスタンス変数オブジェクトのMapに追加
                var instanceStr = 'eleAndInsObjMap["' + mapKey +
                	'"] = ' + aaui023_nowInstanceName + ';';
                eval(instanceStr);
            }
            // メールアドレスチェックの場合はまず桁数範囲チェックをaddする。
            if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] == 
                aaui023_CHK_TYPE_EMAIL) {
                addMailSizeChk = aaui023_nowInstanceName + 
                    '.add(Validate.Length, {minimum:' + 
                    aaui023_MAIL_MIN + 
                    ', maximum:' + aaui023_MAIL_MAX + 
                    ', tooShortMessage:\"' + replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, 
                        aaui023_MAIL_MIN, aaui023_MAIL_MAX) + '\"' + 
                    ', tooLongMessage:\"' + replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, 
                        aaui023_MAIL_MIN, aaui023_MAIL_MAX) + '\"});';
                eval(addMailSizeChk);
            }
            // validate関数追加
            var tmp2 = createAddValidateFunc(initParams[i]);
            eval(tmp2);

            var onlyOnSubmit = 'false';
         	// onlyOnSubmit指定がある場合
         	if (initParams[i][aaui023_KEY_PARAM_ONLYONSUBMIT]) {
        		onlyOnSubmit = initParams[i][aaui023_KEY_PARAM_ONLYONSUBMIT];
        	}

        	// onlyOnSubmitがfalseの場合
        	if (onlyOnSubmit === 'false') {
        		var onlyOnBlur = 'false';
                if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] != 
                    aaui023_CHK_TYPE_PRESENCE) {
                    onlyOnBlur = 'true';
                }
            	// onlyOnBlur指定がある場合
            	if (initParams[i][aaui023_KEY_PARAM_ONLYONBLUR]) {
            		onlyOnBlur = initParams[i][aaui023_KEY_PARAM_ONLYONBLUR];
            	}

            	// onlyOnBlurがtrueの場合
            	if (onlyOnBlur === 'true') {
            		// インスタンスは要素単位で生成する
                    var mapKey = initParams[i][aaui023_KEY_PARAM_ELEMENT];
                    if (mapKey in eleAndInsMap) {
                        //　すでにインスタンスがある場合はそのインスタンスに対して操作する。
                        aaui023_nowInstanceName = eleAndInsMap[mapKey];
                    } else if (mapKey in eleAndInsNameMap) {
                    	// 関数内にはないがグローバル変数にインスタンスが格納済の場合は、取得して操作する。
                    	aaui023_nowInstanceName = eleAndInsNameMap[mapKey];
                    	eleAndInsMap[mapKey] = aaui023_nowInstanceName;
                    	var instanceStr = 'var ' + aaui023_nowInstanceName +
                    		' = eleAndInsObjMap["' + mapKey + '"];';
                    	eval(instanceStr);
                    } else {
                        // 該当の要素に対するインスタンスが存在しない場合は新たに作成
                        aaui023_nowInstanceName = 
                            aaui023_PREFIX_INSTANCE + liveValidateSeq;

                        liveValidateSeq = liveValidateSeq + 1;
                        // Mapに追加
                        eleAndInsMap[mapKey] = aaui023_nowInstanceName;
                        // liveValidationインスタンス化
                        var tmp3 = createLiveValidationInstance(initParams[i], true);
                        eval(tmp3);
                        // 要素とインスタンス変数名のMapに追加
                        eleAndInsNameMap[mapKey] = aaui023_nowInstanceName;
                        // 要素とインスタンス変数オブジェクトのMapに追加
                        var instanceStr = 'eleAndInsObjMap["' + mapKey +
                        	'"] = ' + aaui023_nowInstanceName + ';';
	                    eval(instanceStr);
                    }
                    // メールアドレスチェックの場合はまず桁数範囲チェックをaddする。
                    if (initParams[i][aaui023_KEY_PARAM_VALIDATIONTYPE] == 
                        aaui023_CHK_TYPE_EMAIL) {
                        addMailSizeChk = aaui023_nowInstanceName + 
                            '.add(Validate.Length, {minimum:' + 
                            aaui023_MAIL_MIN + 
                            ', maximum:' + aaui023_MAIL_MAX + 
                            ', tooShortMessage:\"' + replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, 
                                aaui023_MAIL_MIN, aaui023_MAIL_MAX) + '\"' + 
                            ', tooLongMessage:\"' + replaceMsg(aaui023_ERR_MSG_RANGE_LENGTH, 
                                aaui023_MAIL_MIN, aaui023_MAIL_MAX) + '\"});';
                        eval(addMailSizeChk);
                    }
                    // validate関数追加
                    var tmp4 = createAddValidateFunc(initParams[i]);
                    eval(tmp4);
            	}
        	}
        }
        // validate対象要素が初期化パラメータにない場合は、次の要素へ
        else {
            continue;
        }
    }
}
 
/**
 * エラーメッセージ内のプレスホルダーを置換する
 * @param errMsg 第一引数：エラーメッセージ、第二引数以降：プレスホルダーに置換する文字・数値
 * @return 置換後のエラーメッセージ
 */
 
 function replaceMsg(errMsg) {
    for (var i = 1; i < arguments.length; i++) {
        var reg = new RegExp("\\{" + (i - 1) + "\\}", "g");
        errMsg = errMsg.replace(reg, arguments[i]);
    }
    return errMsg;
}

/**
 * 引数に指定したIDの入力チェックを解除する。
 * 
 * @param element　入力フィールドID
 * @param msgOutputAreaId　メッセージ出力エリアID
 * @return なし
 */
function clearInputError(element, msgOutputAreaId) {
    $('#' + element).removeClass(LiveValidation.prototype.invalidFieldClass);
    $('#' + msgOutputAreaId).parent().find('.' + LiveValidation.prototype.messageClass).remove();
}

/*
 * ファイル名    aaui026.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  特定ブラウザ警告メッセージ表示
 * 
 * 修正履歴
 * 2013.2.1 NTTD 伊藤有希子　次世代個人IB開発
 */

var aaui026_COOKIE_NAME = 'browserCheckedFlag';

// カスタマイズ可能文言
var aaui026_dialogTitle = '確認';
var aaui026_dialogOkBtnMsg = 'OK';
var aaui026_dialogMsg = 'お使いのブラウザはバージョンが古く、<br />推奨するご利用環境ではありません。<br />お取引画面が正しく表示されない場合がありますので、<br />推奨環境のご確認、バージョンアップを行っていただいた上で<br />ご利用いただきますようお願いいたします。';

/**
 * サポート対象外のブラウザであることを
 * 警告するダイアログを表示する。
 * 
 * @param flag サポート対象外のブラウザかどうか
 * @return なし
 */
function initBrowserCheck(flag){
    //サポート対象外のブラウザの場合
    if(flag == 'true'){
        //既にブラウザチェックを実施したかどうかの情報をCookieから取り出す
        var cookieFlag = null;
        var regExp = new RegExp(aaui026_COOKIE_NAME + '=[^;]+', 'i');
        if (document.cookie.match(regExp)) {
            cookieFlag = document.cookie.match(regExp)[0].split('=')[1];
        }
        //実施済みでない場合、警告ダイアログを表示する。
        if(cookieFlag != 'true'){
            alertDialog(aaui026_dialogMsg, aaui026_dialogTitle, 'auto', '90%', aaui026_dialogOkBtnMsg);
            //Cookieにブラウザチェック実施済みフラグを立てる
            document.cookie = aaui026_COOKIE_NAME + '=' + 'true' + '; path=/';
        }
    }
};


/**
 * 警告ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @return なし
 */
function alertDialog(message, title, height, width, buttonok) {
    var _dlg = $('<div>' + message + '</div>');
    var _buttons = {};
    _buttons[buttonok] = function() {
        $(this).dialog('close');
    };
    _dlg.dialog({
        bgiframe : true,
        modal : true,
        closeText:"",
        draggable : false,
        resizable : false,
        title : title,
        height : height,
        width : width,
        closeOnEscape: false,
        buttons : _buttons,
        overlay : {
            opacity : 0.3,
            background : '#225B7F'
        },
        open: function(event) {
            var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
            var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
            $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
            $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
            $(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
            var version = androidVersion();
            if ('2.3' == version) {
                $('body').prepend('<table id = "dummytable" height="9999"></table>');
            }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
        }
    });
};


/*
 * ファイル名    aaui027.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  承諾確認連携機能
 * 
 * 修正履歴
 * 2013.4.26 NTTD 岩佐渉　次世代個人IB開発
 * 2015.7.31 NTTDFC 和田　次世代個人IB開発　4版開発
 */

var confirmArray = new Array();
var confirmPullArray = new Array();
var aaui027_useFlg = true;

/**
 * 確認対象ボタンを押下した際に、承諾確認チェックボックスが存在すれば、承諾確認チェックボックスを活性状態に変更する。<br>
 * 承諾確認チェックボックスが存在しなければ、ガイダンスエリアを非表示とし、次画面遷移ボタンを表示する。<br>
 * 初期表示状態が、次画面遷移ボタンが表示されている状態の場合は、次画面遷移ボタンを活性状態に変更する。<br>
 * confirmButtonId：利用者が確認すべきボタンのID<br>
 * confirmClassName：確認対象ボタンを押下した際に設定するclass属性<br>
 * confirmPullId：利用者が確認すべきのプルダウンのID<br>
 * confirmPullClassName：確認対象プルダウンを押下した際に設定するclass属性<br>
 * checkboxId：承諾した際に押下するチェックボックスのID<br>
 * guidanceId：未承諾時に表示されるガイダンスエリアのID<br>
 * nextButtonId：承諾時に表示される次画面遷移ボタンのID<br>
 * 
 * @param initParams 初期化パラメータ
 * @return なし
 */
function initAcceptConfirm(initParams){
    if (!aaui027_useFlg) {
        return false;
    }
    if(initParams && initParams instanceof Array) {
        var params = initParams[0];
        // パラメータ取得
        var confirmButtonId = params.confirmButtonId || '';
        var confirmClassName = params.confirmClassName || '';
        var confirmPullId = params.confirmPullId || '';
        var confirmPullClassName = params.confirmPullClassName || '';
        var checkboxId = params.checkboxId || '';
        var guidanceId = params.guidanceId || '';
        var nextButtonId = params.nextButtonId || '';
        
        var confirmButtonIdArray = confirmButtonId.split(',');
        var confirmPullIdArray = confirmPullId.split(',');
        var reg = new RegExp(',', 'g');
        var confirmButtonIdStr = confirmButtonId.replace(reg, ',#');
        var confirmClassNameArray = confirmClassName.split(',');
        var confirmPullIdStr = confirmPullId.replace(reg, ',#');
        var confirmPullClassNameArray = confirmPullClassName.split(',');
        var map = new Array();
        var map2 = new Array();
        var checkFlg = false;
        var guidanceFlg = false;
        var disabledClass = 'main-button-disabledA01';
        var abledClass = 'main-buttonA01';
        // 必須チェック
        for (var i = 0; i < confirmButtonIdArray.length; i++) {
            if (!(confirmButtonId == '' || $('#' + confirmButtonIdArray[i]).length == 0)) {
                if (!(confirmClassName == '')) {
                    confirmArray.push(confirmButtonIdArray[i]);
                    if (typeof confirmClassNameArray[i] == 'undefined') {
                        confirmClassNameArray[i] = '';
                        map[confirmButtonIdArray[i]] = confirmClassNameArray[i];
                    } else {
                        map[confirmButtonIdArray[i]] = confirmClassNameArray[i];
                    }
                }
            }
        }
        for (var i = 0; i < confirmPullIdArray.length; i++) {
            if (!(confirmPullId == '' || $('#' + confirmPullIdArray[i]).length == 0)) {
                if (!(confirmPullClassName == '')) {
                    confirmPullArray.push(confirmPullIdArray[i]);
                    if (typeof confirmPullClassNameArray[i] == 'undefined') {
                        confirmPullClassNameArray[i] = '';
                        map2[confirmPullIdArray[i]] = confirmPullClassNameArray[i];
                    } else {
                        map2[confirmPullIdArray[i]] = confirmPullClassNameArray[i];
                    }
                }
            }
        }

        if (confirmArray.length == 0 && confirmPullArray.length == 0 ) {
            return false;
        }

        if (nextButtonId) {
            $nextButtonId = $('#' + nextButtonId);
            if ($nextButtonId.length == 0) {
                return false;
            } else {
                nextButtonId = nextButtonId + '_aaui027';
                $nextButtonId.attr('id', nextButtonId);
                $nextButtonId = $('#' + nextButtonId);
            }
            // 初期表示処理
            if ($nextButtonId.css('display') != 'none') {
                visibleById($nextButtonId.parent().attr('id'), 1);
            }
        } else {
            return false;
        }
        if (checkboxId) {
            $checkboxId = $('#' + checkboxId);
            if ($checkboxId.length != 0) {
                checkFlg = true;
                enableById(checkboxId, false);
            }
        }

        if (guidanceId) {
            $guidanceId = $('#' + guidanceId);
            if ($guidanceId.length != 0) {
                if ($guidanceId.css('display') == 'none') {
                    enableById(nextButtonId, false);
                    changeClassById(nextButtonId, disabledClass, 0);
                    changeClassById(nextButtonId, abledClass, 1);
                    visibleById($nextButtonId.parent().attr('id'), 0);
                } else {
                    guidanceFlg = true;
                }
            } else {
            enableById(nextButtonId, false);
            changeClassById(nextButtonId, disabledClass, 0);
            changeClassById(nextButtonId, abledClass, 1);
            visibleById($nextButtonId.parent().attr('id'), 0);
            }
        } else {
            enableById(nextButtonId, false);
            changeClassById(nextButtonId, disabledClass, 0);
            changeClassById(nextButtonId, abledClass, 1);
            visibleById($nextButtonId.parent().attr('id'), 0);
        }

        if (confirmButtonId) {
            $('#' + confirmButtonIdStr).click(function() {
                var $this = $(this);
                var self = $this.attr('id');
                if (typeof aaui008_IMGARRAY[self + '_nomal'] != 'undefined') {
                    $this.setDisabled('disabled');
                    $this.off('mousedown').off('hover');
                    enableById(self, true);
                }
                changeClassById(self, map[self], 0);
                var tmpArray = new Array();
                for( var i = 0, len = confirmArray.length; i < len; i++){
                    if (confirmArray[i] !== self) {
                        tmpArray.push(confirmArray[i]);
                    }
                }
                confirmArray = tmpArray;
                if (confirmArray.length == 0 && confirmPullArray.length == 0 ) {
                    if (checkFlg) {
                        enableById(checkboxId, true);
                    } else {
                        if (guidanceFlg) {
                            visibleById(guidanceId, 1);
                            visibleById($nextButtonId.parent().attr('id'), 0);
                        }
                        enableById(nextButtonId, true);
                        changeClassById(nextButtonId, disabledClass, 1);
                        changeClassById(nextButtonId, abledClass, 0);
                    }
                }
            });
        }
        if (confirmPullId) {
            $('#' + confirmPullIdStr).change(function() {
                var $this = $(this);
                var self = $this.attr('id');
                if (typeof aaui008_IMGARRAY[self + '_nomal'] != 'undefined') {
                    $this.setDisabled('disabled');
                    $this.off('mousedown').off('hover');
                    enableById(self, true);
                }
                changeClassById(self, map2[self], 0);
                var tmpArray = new Array();
                for( var i = 0, len = confirmPullArray.length; i < len; i++){
                    if (confirmPullArray[i] !== self) {
                        tmpArray.push(confirmPullArray[i]);
                    }
                }
                confirmPullArray = tmpArray;
                if (confirmArray.length == 0 && confirmPullArray.length == 0 ) {
                    if (checkFlg) {
                        enableById(checkboxId, true);
                    } else {
                        if (guidanceFlg) {
                            visibleById(guidanceId, 1);
                            visibleById($nextButtonId.parent().attr('id'), 0);
                        }
                        enableById(nextButtonId, true);
                        changeClassById(nextButtonId, disabledClass, 1);
                        changeClassById(nextButtonId, abledClass, 0);
                    }
                }
            });
        }
        if (checkboxId) {
            $checkboxId.click(function() {
                if ($(this).prop('checked')) {
                    if (guidanceFlg) {
                        visibleById(guidanceId, 1);
                        visibleById($nextButtonId.parent().attr('id'), 0);
                    }
                    enableById(nextButtonId, true);
                    changeClassById(nextButtonId, disabledClass, 1);
                    changeClassById(nextButtonId, abledClass, 0);
                } else {
                    if (guidanceFlg) {
                        visibleById(guidanceId, 0);
                        visibleById($nextButtonId.parent().attr('id'), 1);
                    } else {
                        enableById(nextButtonId, false);
                        changeClassById(nextButtonId, disabledClass, 0);
                        changeClassById(nextButtonId, abledClass, 1);
                    }
                }
            });
        }
    }
};
/*
 * ファイル名    aaui028.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  確認メッセージ表示機能
 * 
 * 修正履歴
 * 2012.05.30 NTTD 岩佐渉 次世代個人IB開発
 * 2012.10.16 NTTD 半田佳菜 次世代個人IB開発
 * 2013.08.16 NTTD 松尾和徳 次世代個人IB開発 Phase2
 */

var confirmdspflg = false;

// カスタマイズ可能文言
// パスワード確認
var aaui028_passwordDialogTitle = 'パスワード登録の確認';
var aaui028_passwordDialogMsg = 'パスワードを設定いたします。<br>お取引に必要なパスワードですので、お忘れにならないようにご注意ください。<br>OKボタンを押下すると、設定されたパスワードで登録します。';
var aaui028_passwordDialogOkBtnMsg = 'OK';
var aaui028_passwordDialogCancelBtnMsg = 'キャンセル';
var aaui028_passwordUseFlg = false;
// ISA利用可能額なし購入確認
var aaui028_nisaDialogTitle = '確認';
var aaui028_nisaDialogMsg = 'NISA利用可能額が0円のため、NISA預りでの購入はできません。NISA預り以外で購入する場合は「OK」を押して下さい。「キャンセル」を押すと、移動を行わず元の画面に戻ります。';
var aaui028_nisaDialogOkBtnMsg = 'OK';
var aaui028_nisaDialogCancelBtnMsg = 'キャンセル';
var aaui028_nisaUseFlg = true;
//PH4.0 金利優遇サービス対応 start
//金利優遇サービス注意喚起
var aaui028_prDialogTitle = '金利優遇サービス対象ファンド確認';
var aaui028_prDialogMsg = 'お客様が選択していただいたファンドは金利優遇サービス対象外です。<br>よろしいでしょうか。';
var aaui028_prDialogOkBtnMsg = 'OK';
var aaui028_prDialogCancelBtnMsg = 'キャンセル';
var aaui028_prUseFlg = true;
//PH4.0 金利優遇サービス対応 end

/**
 * 確認メッセージを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @param confirmtype 確認タイプ
 * @return なし
 */
function dispConfirm(event, confirmtype) {
    // デフォルトメッセージ設定
    var dialogTitle = aaui028_passwordDialogTitle;
    var dialogMsg = aaui028_passwordDialogMsg;
    var dialogOkBtnMsg = aaui028_passwordDialogOkBtnMsg;
    var dialogCancelBtnMsg = aaui028_passwordDialogCancelBtnMsg;
    var useFlg = aaui028_passwordUseFlg;

    // 確認タイプに'password'が指定された場合
    if (confirmtype == 'password') {
        // パスワード確認用メッセージ設定
        dialogTitle = aaui028_passwordDialogTitle;
        dialogMsg = aaui028_passwordDialogMsg;
        dialogOkBtnMsg = aaui028_passwordDialogOkBtnMsg;
        dialogCancelBtnMsg = aaui028_passwordDialogCancelBtnMsg;
        useFlg = aaui028_passwordUseFlg;
    } else if (confirmtype == 'nisa') {
        // ISA利用可能額なし購入確認用メッセージ設定
        dialogTitle = aaui028_nisaDialogTitle;
        dialogMsg = aaui028_nisaDialogMsg;
        dialogOkBtnMsg = aaui028_nisaDialogOkBtnMsg;
        dialogCancelBtnMsg = aaui028_nisaDialogCancelBtnMsg;
        useFlg = aaui028_nisaUseFlg;
    //PH4.0 金利優遇サービス対応 start
    } else if (confirmtype == 'prefential') {
        // 金利優遇サービス注意喚起メッセージ設定
        dialogTitle = aaui028_prDialogTitle;
        dialogMsg = aaui028_prDialogMsg;
        dialogOkBtnMsg = aaui028_prDialogOkBtnMsg;
        dialogCancelBtnMsg = aaui028_prDialogCancelBtnMsg;
        useFlg = aaui028_prUseFlg;
    //PH4.0 金利優遇サービス対応 end
    }
    
    // 確認メッセージ使用有無を判定する
    if (!useFlg) {
        return true;
    }
    if (!confirmdspflg) {
        aaui028_confirmDialog(dialogMsg, dialogTitle, '270', '450', dialogOkBtnMsg, dialogCancelBtnMsg, function(cancel) {
            if (cancel) {
                return;
            }
            confirmdspflg = true;
            
            //safariのリンク押下時
            var ua = navigator.userAgent;
            if (ua.match('Safari') && $(event).attr('href')) {
                var script = '<script type=\"text/javascript\">function link() {location.href = \"'
                    + $(event).attr('href')
                    +'\";}</script>';
                $('body').append(script);
                var click = $(event).attr('onclick').replace(';','&&link();');
                $(event).attr('onclick', click);
                $(event).trigger('click');
            } else {
                event.click();
            }
        });
    } else {
        confirmdspflg = true;
    }
    return confirmdspflg;
};


/**
 * 確認ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function aaui028_confirmDialog(message, title, height, width, buttonok, buttoncancel,
        response) {
    var _dlg = $('<div>' + message + '</div>');
    var _buttons = {};
    _buttons[buttonok] = function() {
        $(this).dialog('close');
        response(false)
    };
    _buttons[buttoncancel] = function() {
        $(this).dialog('close');
        response(true)
    };

    _dlg.dialog({
    	modal : true,
        closeText:"",
    	draggable : false,
    	resizable : false,
    	title : title,
    	height : height,
    	width : width,
    	buttons : _buttons,
    	overlay : {
    		opacity : 0.3,
    		background : '#225B7F'
    	},
        open:function(){
            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
            $(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
            $(".ui-dialog-buttonset button").addClass("ui-state-default").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
        }   
    });
};


/*
 * ファイル名    aaui029.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2013 NTT DATA
 * 収容物  入力項目エンターキー抑止機能
 */

var aaui029_enterKeyDeterUseFlg = true;

/**
 * 入力項目上でのエンターキー押下を抑止する。
 * 
 * @param なし
 * @return なし
 */
jQuery.event.add(window, "load", function() {
    if (aaui029_enterKeyDeterUseFlg) {
        var $target = $('input[type=text],input[type=radio],input[type=checkbox],input[type=password],select');
        $target.keypress(function (e) {
            if (!submitStop(e)) {
                return false;
            }
        });
    }
});

function submitStop(e){
    if (!e) {
        var e = window.event;
    }
    if(e.keyCode == 13) {
        return false;
    } else {
        return true;
    }
}
/**
 * ファイル名   aaui030.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   フォーム送信機能
 *         別ウィンドウ送信フォーム処理機能
 *
 * 修正履歴
 * 2013.07.05 NTTD 平 貴寛 次世代個人 IB開発 Phase2
 * 2014.07.10 FMCS 玉岡 諒太 次世代個人 IB開発 Phase3
 */

var eventLock = false;

/**
 * フォームをサブミットする機能
 * 
 * @param formId フォームのID
 * @param popupFlg ポップアップ表示フラグ
 * @return なし
 */
function formSend(formId, popupFlg){
	var form = document.getElementById(formId);
	/** 二重押下防止機能を呼び出す */
    if (eventLock === true) {
        return false;
    }
    eventLock = true;
    if (!(arguments.length > 1 && popupFlg === true) && form.target !== '_blank') {
        if(!ctrldblclickCLR(null)){
            eventLock = false;
            return false;
        }
    }
    /** フォームをサブミットする */
    if(form){
        form.submit();
    }
    if ((arguments.length > 1 && popupFlg === true) || form.target === '_blank') {
        eventLock = false;
    }
}

/**
 * 別ウィンドウをオープンして、そのウィンドウに対してフォームをサブミットする機能
 * 
 * @param formId フォームのID
 * @param dummyURI ダミーのURI
 * @return なし
 */
function openWin(formId, dummyURI) {
	var windowAttr = 'toolbar=no,location=yes,status=no,menubar=no,scrollbars=yes,width=790,height=540,resizable=no';
	var form = document.getElementById(formId);
	if(form) {
		/** 別ウィンドウのオープン */
		window.open(dummyURI, form.target, windowAttr);
		/** 別ウィンドウに対してフォームをサブミットする */
		formSend(formId, true);
	}
}

/**
 * 別ウィンドウをオープンして、そのウィンドウに対してフォームをサブミットする機能（サイズ固定なし）
 * 
 * @param formId フォームのID
 * @param dummyURI ダミーのURI
 * @return なし
 */
function openWinFreeSize(formId, dummyURI) {

	var form = document.getElementById(formId);
	if(form) {
		/** 別ウィンドウのオープン */
		window.open(dummyURI, form.target, "");
		/** 別ウィンドウに対してフォームをサブミットする */
		formSend(formId, true);
	}
}

/**
 * ヘルプウィンドウを別ウィンドウでオープンして、そのウィンドウに対してフォームをサブミットする機能
 * 
 * @param formId フォームのID
 * @return なし
 */
function openHelpWindow(formId){
    var helpWindowAttr = 'toolbar=yes,location=yes,status=yes,menubar=yes,scrollbars=yes,width=790,height=440,resizable=yes';
    var form = document.getElementById(formId);
    if(form) {
        /** 別ウィンドウのオープン */
        window.open('', form.target, helpWindowAttr);
        /** 別ウィンドウに対してフォームをサブミットする */
        form.submit();
    }
}

 /**
  * 二重押下防止オーバーレイ（透明）を表示する。
  * 
  * @param event ボタン押下時のDOM要素
  * @return なし
  */
 function ctrldblclickCLR(event) {
     //ダイアログを作成
     aaui030_confirmDialog('', '', '200', '400', 'ok', 'キャンセル',
             function (cancel) {
                 if (cancel) {
                     return;
                 }
             });
     //ダイアログを消去
     $('.ui-dialog').css('display', 'none');
     // モーダルの透明度を0に設定
     $('.ui-widget-overlay').css('opacity','0');
     return true;
 };

 /**
  * 確認ダイアログを作成する。
  * 
  * @param message ダイアログに表示するメッセージ
  * @param title ダイアログのタイトル
  * @param height ダイアログの高さ
  * @param width ダイアログの幅
  * @param buttonok OKボタン押下時の処理
  * @param buttoncancel キャンセルボタン押下時の処理
  * @param response コールバック関数
  * @return なし
  */
 function aaui030_confirmDialog(message, title, height, width,
         buttonok, buttoncancel, response) {
     var _dlg = $('<div>' + message + '</div>');
     var _buttons = {};
     _buttons[buttonok] = function() {
         $(this).dialog('close');
         response(false)
     };
     _buttons[buttoncancel] = function() {
         $(this).dialog('close');
         response(true)
     };
     
     _dlg.dialog({
    	 modal: true,
    	 closeText:"",
    	 draggable: false,
    	 resizable: false,
    	 title: title,
    	 height: height,
    	 width: width,
    	 closeOnEscape: false,
    	 buttons: _buttons,
    	 overlay:{
    		 opacity: 0.3,
    		 background: '#225B7F'
    	 },
    	 open:function(){
    		 $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
    		 $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
    		 $(".ui-button-background").removeClass("ui-button");
             $(".ui-dialog-titlebar-close").hover(function() {
                 $(this).addClass("ui-state-hover");
             }, function() {
                 $(this).removeClass("ui-state-hover");
             })
             $(".ui-dialog-buttonset button").addClass("ui-state-default").hover(function() {
                 $(this).addClass("ui-state-hover");
             }, function() {
                 $(this).removeClass("ui-state-hover");
             })
    	 }
     });
 };
/**
 * ファイル名   aaui032_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  投信セッションタイムアウト延長機能
 * 
 * 修正履歴
 * 2014.07.01 TDC 金子慎吾 次世代個人IB開発
 */

// カスタマイズ可能文言
var aaui032_dialogTitle = '延長失敗';

var aaui032_dialogMsg = 'ご利用時間の延長処理に失敗しました。<br />すでにログアウトされている可能性があります。';

var aaui032_dialogOkBtnMsg = 'OK';

/**
 * セッションタイムアウト時間延長処理を実行する。
 * 
 * @param servletUrl サーブレットURL
 * @param serverId サーバID
 * @param gSessionId グローバルセッションID
 * @param pageId 遷移元ページID
 * @param companyId 金融機関ID
 * @param instanceId インスタンスID
 * @param successFunc 延長処理成功後処理
 */
function execInvestmentTimeoutExtension(servletUrl, serverId, gSessionId,
    pageId, companyId, instanceId, successFunc) {

    var dataObj = {};
    dataObj['WAM_core_instance'] = instanceId;
    dataObj['WAM_status'] = 'prolong';
    dataObj['WAM_core_companyID'] = companyId;
    dataObj['WAM_core_gsID'] = gSessionId;
    dataObj['WAM_core_pageID'] = pageId;
    dataObj['WAM_core_nextPageID'] = pageId;

    // 延長失敗ダイアログ用パラメータ
    var _buttons = {};
    _buttons[aaui032_dialogOkBtnMsg] = function() {
        $(this).dialog('close');
        //resize処理をアンバインド
        $(window).off("resize load");

        return true;
    };

    var failedDialogParam = {
        autoOpen : false, 
        modal : true, 
        closeText:"",
        height : 'auto', 
        width : '90%', 
        title : aaui032_dialogTitle, 
        resizable : false, 
        buttons : _buttons,
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          
          var timeoutMsg2Obj = $('[aria-describedby=extensionFailedMsg]');
          if (window.innerHeight - timeoutMsg2Obj.height() < 0) {
              $('#extensionFailedMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#extensionFailedMsg').dialog("option", "maxHeight",'200');
              fixPositionSpObj(timeoutMsg2Obj);
          }
          var version = androidVersion();
          if ('2.3' == version) {
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
        }
    };
    // 延長処理失敗ダイアログ表示処理
    var errorMsgFunc = function() {
        $('body').prepend(
            '<div id=\'extensionFailedMsg\' title=\'延長失敗\' '
            +'style=\'display : none;\'>'
            + aaui032_dialogMsg + '</div>');
        $('#extensionFailedMsg').dialog(failedDialogParam);
        $('#extensionFailedMsg').dialog('open');
        //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
        $(window).on("resize load",function(){
           var timeoutMsg2Obj = $('[aria-describedby=extensionFailedMsg]');
           $('#extensionFailedMsg').dialog("option", "height",'auto');
           if (window.innerHeight - timeoutMsg2Obj.height() < 0) {
               $('#extensionFailedMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
               $('#extensionFailedMsg').dialog("option", "maxHeight",'200');
             } else {
               $('#extensionFailedMsg').dialog("option", "height",'auto');
             }
           //windowサイズ変更時の表示位置の決定
           fixPositionSpObj(timeoutMsg2Obj);
        });
    };

    // セッションタイムアウト延長（サーバ）のパス
    var url = servletUrl + '?ServerID=' + serverId;
    
    // セッションタイムアウト延長（サーバ）呼出
    $.ajax({
        type : 'POST',
        url : url, 
        data : dataObj, 
        success : function(data) {
            var status = data.getElementsByTagName('status')[0].firstChild.nodeValue;
            if (status == 'OK') {
                successFunc();
            } else {
                errorMsgFunc();
            }
        }, 
        dataType : 'xml', 
        error : function() {
            // エラー発生時の処理
            errorMsgFunc();
        }, 
        timeout : 60000
    });
}
/**
 * ファイル名   aaui033_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  投信セッションタイムアウト警告表示機能
 *         ・セッションタイムアウト警告メッセージ表示
 *         ・セッションタイムアウト延長
 *         ・セッションタイムアウト警告メッセージ非表示
 *         ・セッションタイムアウトメッセージ非表示
 * 
 * 修正履歴
 * 2014.07.01 TDC 金子慎吾 次世代個人IB開発
 */

// カスタマイズ可能文言
var aaui033_dialogNoticeTitle = 'お取引継続確認';

var aaui033_dialogNoticeMsg = '一定時間お客様からの操作が行われませんでした。<br />引き続きご利用いただく場合は「OK」ボタンを押して下さい。<br /><br />自動的に切断するまでの時間  ：<span id = \'countdown\'>60</span>秒';

var aaui033_dialogNoticeOkBtnMsg = 'OK';

var aaui033_dialogTimeoutTitle = '切断通知';

var aaui033_dialogTimeoutMsg = '一定時間お客様からの操作が行われなかったため、<br />自動的に切断させていただきました。<br />ご利用ありがとうございました。';

var aaui033_dialogTimeoutOkBtnMsg = 'OK';

/**
 * セッションタイムアウト警告ダイアログ表示機能の初期化処理を行う。
 * 
 * @param timeout セッションタイムアウト時間
 * @param noticeTime 警告表示時間
 * @param useNotice 警告表示有無
 * @param servletUrl サーブレットURL
 * @param serverId サーバID
 * @param gSessionId グローバルセッションID
 * @param pageId ページID
 * @param companyId 金融機関ID
 * @param instanceId インスタンスID
 */
function initInvestmentTimeoutNotice(timeout, noticeTime, useNotice,
    servletUrl, serverId, gSessionId, pageId, companyId, instanceId) {

    var timer;
    var countDown;
    var start;
    
    // セッションタイムアウト時間、警告表示時間、警告表示有無の値チェック
    if (isNaN(timeout) || isNaN(noticeTime) || 
        timeout <= 0 || noticeTime <= 0 || 
        !(useNotice == true || useNotice == false ) ||
        timeout <= noticeTime) {
        return;
    }
    
    // セッションタイムアウト警告ダイアログ表示待機処理
    var standbyFunc = function() {
        // 金融機関ごとの警告表示有無の判定
        if (useNotice === true) {
            //　警告表示までの待機時間の算出(ミリ秒)
            var standbyTime = (timeout - noticeTime) * 1000;
            countDown = timeout;
            // タイマー開始時間取得
            var date = new Date();
            start = (date.getTime() / 1000) | 0;
            // 警告メッセージ表示待機タイマー起動
            setTimeout(noticeFunc, standbyTime);
        }
    };

    // セッションタイムアウト警告メッセージダイアログ用設定
    var _buttons = {};
    _buttons[aaui033_dialogNoticeOkBtnMsg] = function() {
        $(this).dialog('close');
        //ポップアップクローズ時にポップアップの位置変更の処理をアンバインド
        $(window).off("resize load");
        // タイムアウト延長機能の呼び出し
        execInvestmentTimeoutExtension(servletUrl, serverId, gSessionId,
            pageId, companyId, instanceId, standbyFunc);
        return true;
    };
    var notisDialogParam = {
        autoOpen : false, 
        modal : true, 
        closeText:"",
        height : 'auto', 
        width : '90%',
        title : aaui033_dialogNoticeTitle, 
        resizable : false, 
        buttons : _buttons, 
        beforeClose : function(event) {
            // 警告メッセージカウントダウンタイマーをクリアする
            clearInterval(timer);
        },
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          
          var timeoutNoticeMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutNoticeMsg]');
          if (window.innerHeight - timeoutNoticeMsgObj.height() < 0) {
              $('#timeoutNoticeMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#timeoutNoticeMsg').dialog("option", "maxHeight",'230');
              fixPositionSpObj(timeoutNoticeMsgObj);
          }
          var version = androidVersion();
          if ('2.3' == version) {
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
       },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
       }
    };
    // 警告ダイアログ表示時の処理
    var noticeFunc = function() {
        // 警告ダイアログの準備
        $('#timeoutNoticeMsg').dialog(notisDialogParam);
        $('#countdown').html(noticeTime);
        // セッションタイムアウト警告ダイアログを開く
        $('#timeoutNoticeMsg').dialog('open');
        //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
        $(window).on("resize load",function(){          
           var timeoutNoticeMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutNoticeMsg]');
           $('#timeoutNoticeMsg').dialog("option", "height",'auto');
           if (window.innerHeight - timeoutNoticeMsgObj.height() < 0) {
               $('#timeoutNoticeMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
               $('#timeoutNoticeMsg').dialog("option", "maxHeight",'230');
             } else {
                 $('#timeoutNoticeMsg').dialog("option", "height",'auto');
             }
           //windowサイズ変更時の表示位置の決定
           fixPositionSpObj(timeoutNoticeMsgObj);
        });
        // 警告メッセージカウントダウンタイマー起動
        // タイマー間隔：1秒
        timer = setInterval(countDownFunc, 1000);
    };

    // タイムアウトダイアログ用設定
    var _buttons2 = {};
    _buttons2[aaui033_dialogTimeoutOkBtnMsg] = function() {
        $(this).dialog('close');
        $(window).off("resize load");
        return true;
    };
    var timeoutDialogParam = {
        autoOpen : false, 
        modal : true, 
        closeText:"",
        height : 'auto', 
        width : '90%',
        title : aaui033_dialogTimeoutTitle, 
        resizable : false, 
        buttons : _buttons2,
        open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
          var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var $highestZIndexDialog = $dialogs.first();
          $dialogs.each(function() {
              var current = $highestZIndexDialog.css('z-index');
              var next = $(this).css('z-index');
              if ((+ current) < (+ next)) {
                  $highestZIndexDialog = $(this);
              }
          });
          $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })
          
          var timeoutMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutMsg]');
          if (window.innerHeight - timeoutMsgObj.height() < 0) {
              $('#timeoutMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
              $('#timeoutMsg').dialog("option", "maxHeight",'200');
              fixPositionSpObj(timeoutMsgObj);
          } 
          var version = androidVersion();
          if ('2.3' == version) {
              $('#dummytable').remove();
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
        },
        close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
          var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
          var dialogzIndex = -1;
          for (var i = 0;i<aauiDialogs.length;i++) {
            if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
              dialogzIndex = aauiDialogs[i].style.zIndex;
            }
          }
          if (dialogzIndex != -1) {
            $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
          }
        }
    };
    // 警告ダイアログのカウントダウン更新処理
    var countDownFunc = function() {
        var nowdate = new Date();
        var now = (nowdate.getTime() / 1000) | 0;
        var count = countDown - (now - start);
        if (count <= 0) {
            // カウントダウン秒数が0以下（タイムアウトした）の場合
            $('#timeoutNoticeMsg').dialog('close');
            // タイムアウトダイアログの準備
            $('#timeoutMsg').dialog(timeoutDialogParam);
            $('#timeoutMsg').dialog('open');
            //windowサイズが変更された際にポップアップの表示位置を更新する処理をバインド
            $(window).on("resize load",function(){          
               var timeoutMsgObj = $('[aria-labelledby=ui-dialog-title-timeoutMsg]');
               $('#timeoutMsg').dialog("option", "height",'auto');
               if (window.innerHeight - timeoutMsgObj.height() < 0) {
                   $('#timeoutMsg').dialog("option", "height", Math.floor(window.innerHeight * 0.9));
                   $('#timeoutMsg').dialog("option", "maxHeight",'200');
                 } else {
                     $('#timeoutMsg').dialog("option", "height",'auto');
                 }
               //windowサイズ変更時の表示位置の決定
               fixPositionSpObj(timeoutMsgObj);
            });
        } else {
            // カウントダウン秒数が0より大きい（タイムアウト前）場合
            // セッションタイムアウト警告ダイアログのカウントダウン秒数を更新
            $('#countdown').html(count);
        }
    };

    //セッションタイムアウト警告ダイアログ表示待機処理実行
    standbyFunc();
    
    $(
        function(){
                
            $('body').append(
                '<div id = \'timeoutNoticeMsg\' title = \'お取引継続確認\' '
                +'style = \'display : none;\'>'
                + aaui033_dialogNoticeMsg + '</div>');

            $('body').append(
                '<div id = \'timeoutMsg\' title = \'切断通知\''
                +' style = \'display : none;\'>'
                + aaui033_dialogTimeoutMsg + '</div>');
        }
    );
}

//ポップアップの表示位置の指定（idなしのタイムアウトポップアウト用)
function fixPositionSpObj(popupObj){
     var timeouttop = Math.floor((window.innerHeight - popupObj.height()) / 2);
     var timeoutleft = Math.floor((window.innerWidth - popupObj.width()) / 2);
     $(popupObj).css({"top": timeouttop, "left": timeoutleft});
}
/**
 * ファイル名    aaui034.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2013 NTT DATA
 * 収容物  拡張承諾確認機能
 * 
 * 修正履歴
 * 2013.7.31 NTTD 渡辺誠　次世代個人IB開発 Phase2
 * 2014.5.21 FMCS   Phase3 使用開始日のチェックを追加
 * 2014.10.08 FMCS  Phase3.5 ボタン表示制御に既読／未読判定の要素を追加
 */

// 拡張承諾機能の利用有無
var aaui034_useFlag = true;

// 拡張承諾確認機能の連携有無
var aaui034_linkedFlag = false;

// 確認対象ボタンID配列
var aaui034_confirmArray = new Array();

// 承諾確認チェックボックスID配列
var aaui034_acceptArray = new Array();

// 2014.10.08 Phase3.5
//2014.5.21 Phase3
// エラー表示有無フラグ
//var aaui034_ngAlertFlg = false;

// ボタン非活性表示
var aaui034_disabledClass = 'main-button-disabledA01';

// ボタン表示
var aaui034_abledClass = 'main-buttonA01';

/**
 * 拡張承諾確認初期化
 * 承諾確認に必要な要素を設定する。
 * @param initParam 入力パラメータ
 */
function acceptConfirmEx(params) {
  // 承諾確認使用有無がfalseの場合、処理を終了
  if (!aaui034_useFlag) {
    return false;
  }

  // 入力パラメータに何も設定されていなければ処理終了
  if (!params || !(params instanceof Array)) {
    return false;
  }

  var initParam = params[0];

  // 必須チェック
  if (!initParam.confirmButtonId || !initParam.nextButtonId){
    return false;
  }

//2014.10.08 Phase3.5
//  //2014.5.21 Phase3
//  // エラーとなり画面を再表示しているかのフラグ取得
//  aaui034_ngAlertFlg = initParam.ngAlert;

  // 次画面遷移ボタンの存在チェック
  $nextButtonId = $('#' + initParam.nextButtonId);
  if ($nextButtonId.length == 0) {
    return false;
  }

//2014.10.08 Phase3.5
//  // 確認対象ボタンIDの括弧の個数チェック
//  if ((initParam.confirmButtonId.split('{').length - 1) != (initParam.confirmButtonId.split('}').length - 1)) {
//    return false;
//  }
//
//  // 確認対象ボタンIDに設定されたIDが全て画面に存在しない場合、処理終了
//  if (getConfirmIdArray(initParam.confirmButtonId).length == 0) {
//    return false;
//  }

  // ガイダンスエリアが存在する場合
  if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
    // 次画面遷移ボタンを非表示
    visibleById($nextButtonId.parent().attr('id'), 1)
  } else {
    // 存在しない場合は次画面遷移ボタンを非活性
    enableById(initParam.nextButtonId, false);
    changeClassById(initParam.nextButtonId, aaui034_disabledClass, 0);
    changeClassById(initParam.nextButtonId, aaui034_abledClass, 1);
    visibleById($nextButtonId.parent().attr('id'), 0);
  }

  // 拡張承諾確認機能の連動有無が連携有の場合
  if (aaui034_linkedFlag) {
    // 拡張承諾確認処理（連動有）
    acceptConfirmSync(initParam);
  } else {
    // 拡張承諾確認処理（連動無）
    acceptConfirmNoSync(initParam);
  }
}

/**
 * 拡張承諾確認処理（連動有）
 * @param initParam 入力パラメータ
 */
function acceptConfirmSync(initParam) {

  // 2014.10.08 Phase3.5
  // 確認対象ボタンID配列を取得
  aaui034_confirmArray = getConfirmIdArray(getNoReadingId(initParam.confirmButtonId));

  // 確認対象の各ボタンに、確認対象ボタンクリックイベント機能（連動有）の処理をバインド
  if (aaui034_confirmArray.length > 0) {
    var allConfirmButtonId = '';
    for (var i = 0; i < aaui034_confirmArray.length; i++) {
      var str = aaui034_confirmArray[i].replace(/(^\s+)|(\s+$)/g, "").replace(/\s/g, ',');
      allConfirmButtonId = (i == 0) ? allConfirmButtonId + str : allConfirmButtonId + ',' + str;
    }
    allConfirmButtonId = '#' + allConfirmButtonId.replace(/,/g, ',#');
    $(allConfirmButtonId).click(function () {
      confirmEventSync(initParam, $(this).attr('id'));
    });
  }

  // 承諾確認チェックボックスIDをカンマで分割し、画面に存在するものを承諾確認チェックボックスID配列に格納
  var checkboxIdArray = '';
  if (initParam.checkboxId) {
    checkboxIdArray = initParam.checkboxId.split(',');
    for (var i = 0; i < checkboxIdArray.length; i++) {
      if ($('#' + checkboxIdArray[i]).length > 0) {
        aaui034_acceptArray.push(checkboxIdArray[i]);
      }
    }
  }

  // 2014.5.21 Phase3
  // 使用開始日プルダウンIDをカンマで分割し存在するものを承諾確認ID配列に格納
  if (initParam.pulldownId) {
    var pulldownIdArray = new Array();
    pulldownIdArray = initParam.pulldownId.split(',');
    for (var i = 0; i < pulldownIdArray.length; i++) {
      if ($('#' + pulldownIdArray[i]).length > 0) {
        aaui034_acceptArray.push(pulldownIdArray[i]);
      }
    }
  }

  if (aaui034_acceptArray.length > 0) {
// 2014.10.08 Phase3.5
//    if (!aaui034_ngAlertFlg) {
      for (var i = 0; i < aaui034_acceptArray.length; i++) {
        // 承諾確認チェックボックスと使用開始日のプルダウンに非活性化処理
        $('#' + aaui034_acceptArray[i]).prop('disabled', true);
      }
//    }
    // 承諾確認の各チェックボックスに、承諾確認チェックボックスクリックイベント機能（連動有）の処理をバインド
    var allCheckBoxid = '#' + aaui034_acceptArray.join().replace(/,/g, ',#');
    $(allCheckBoxid).click(function () {
      acceptEventSync(initParam, $(this).attr('id'));
    });

    if (initParam.pulldownId) {
      var allPulldownStr = '#' + initParam.pulldownId.replace(/,/g, ',#');
      $(allPulldownStr).change(function() {
        acceptEventSync(initParam, $(this).attr('id'));
      });
    }
  }
}

/**
 * 拡張承諾確認処理（連動無）
 * @param initParam 入力パラメータ
 */
function acceptConfirmNoSync(initParam) {

  // 2014.10.08 Phase3.5
  // 確認対象ボタンID配列を取得
  aaui034_confirmArray = getConfirmIdArray(getNoReadingId(initParam.confirmButtonId));

  // 確認対象の各ボタンに、確認対象ボタン、承諾確認チェックボックスクリックイベント機能（連動無）の処理をバインド
  if (aaui034_confirmArray.length > 0) {
    var allConfirmButtonId = '';
    for (var i = 0; i < aaui034_confirmArray.length; i++) {
      var str = aaui034_confirmArray[i].replace(/(^\s+)|(\s+$)/g, "").replace(/\s/g, ',');
      allConfirmButtonId = (i == 0) ? allConfirmButtonId + str : allConfirmButtonId + ',' + str;
    }
    allConfirmButtonId = '#' + allConfirmButtonId.replace(/,/g, ',#');
    $(allConfirmButtonId).click(function () {
      acceptConfirmEventNoSync(initParam, $(this).attr('id'));
    });
  }

  // 承諾確認チェックボックスIDをカンマで分割し、画面に存在するものを承諾確認チェックボックスID配列に格納
  var checkboxIdArray = '';
  if (initParam.checkboxId) {
    checkboxIdArray = initParam.checkboxId.split(',');
    for (var i = 0; i < checkboxIdArray.length; i++) {
      if ($('#' + checkboxIdArray[i]).length > 0) {
        aaui034_acceptArray.push(checkboxIdArray[i]);
      }
    }
  }
  // 承諾確認の各チェックボックスに、確認対象ボタン、承諾確認チェックボックスクリックイベント機能（連動無）の処理をバインド
  if (aaui034_acceptArray.length > 0) {
    var allCheckBoxid = '#' + aaui034_acceptArray.join().replace(/,/g, ',#');
    $(allCheckBoxid).click(function () {
      acceptConfirmEventNoSync(initParam, $(this).attr('id'));
    });
  }

  // 2014.5.21 Phase3
  // 使用開始日のプルダウンにイベント追加
  if (initParam.pulldownId) {
    var pulldownIdArray = initParam.pulldownId.split(',');
    for (var i = 0; i < pulldownIdArray.length; i++) {
      if ($('#' + pulldownIdArray[i]).length > 0) {
        aaui034_acceptArray.push(pulldownIdArray[i]);
      }
    }
    var allPulldownStr = '#' + initParam.pulldownId.replace(/,/g, ',#');
    $(allPulldownStr).change(function() {
      acceptConfirmEventNoSync(initParam, $(this).attr('id'));
    });
  }
}

/**
 * 確認対象ボタンクリックイベント機能（連動有）
 * @param initParam 入力パラメータ
 */
function confirmEventSync(initParam, selfId) {
  // 確認対象ボタンID配列から、対象のボタンのID（もしくはグループ）を削除
  for (var i = 0; i < aaui034_confirmArray.length; i++) {
    if (selfId == aaui034_confirmArray[i] ||
      aaui034_confirmArray[i].indexOf(' ' + selfId + ' ') > -1) {
      aaui034_confirmArray.splice(i, 1);
      break;
    }
  }

  // 未押下のボタンが存在する場合は処理終了
//2014.10.08 Phase3.5
//  if (!aaui034_ngAlertFlg && aaui034_confirmArray.length != 0) {
  if (aaui034_confirmArray.length != 0) {
    return;
  }

  // 承諾確認チェックボックスが存在する場合
  if (aaui034_acceptArray.length > 0) {
    // 承諾確認チェックボックスと使用開始日のプルダウン活性化処理
    for (var i = 0; i < aaui034_acceptArray.length; i++) {
      $('#' + aaui034_acceptArray[i]).prop('disabled', false);
    }
  } else {
    // 承諾確認チェックボックスが存在しない場合
    // ガイダンスエリアが存在する場合
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
      // ガイダンスエリアを非表示
      visibleById(initParam.guidanceId, 1);
      // 次画面遷移ボタンを表示
      visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 0);
      //画面再描画
      $('#body-pagecontent').css('visibility', 'hidden');
      $('#body-pagecontent').css('visibility', 'visible');
    } else {
      // 存在しない場合は次画面遷移ボタンを活性
      enableById(initParam.nextButtonId, true);
      changeClassById(initParam.nextButtonId, aaui034_disabledClass, 1);
      changeClassById(initParam.nextButtonId, aaui034_abledClass, 0);
    }
  }
}

/**
 * 承諾確認チェックボックスクリックイベント機能（連動有）
 * @param initParam 入力パラメータ
 */
function acceptEventSync(initParam, selfId) {
  // 2014.5.21 Phase3
  // チェックボックスでチェックされているか、プルダウンで選択されている場合
  if (isAvailable(selfId)) {
    // 2014.5.21 Phase3
    // 承諾確認チェックボックスID配列のチェックボックスが全てチェック済みでない場合または
    // プルダウンが全て選択されていない場合は処理終了
    for (var i = 0; i < aaui034_acceptArray.length; i++) {
      if (!isAvailable(aaui034_acceptArray[i])) {
        return;
      }
    }

    // ガイダンスエリアが存在する場合
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
      // ガイダンスエリアを非表示
      visibleById(initParam.guidanceId, 1);
      // 次画面遷移ボタンを表示
      visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 0);
      //画面再描画
      $('#body-pagecontent').css('visibility', 'hidden');
      $('#body-pagecontent').css('visibility', 'visible');
    } else {
      // 存在しない場合は次画面遷移ボタンを活性
      enableById(initParam.nextButtonId, true);
      changeClassById(initParam.nextButtonId, aaui034_disabledClass, 1);
      changeClassById(initParam.nextButtonId, aaui034_abledClass, 0);
    }
  } else {
    // ガイダンスエリアが存在する場合
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
      // ガイダンスエリアを表示
      visibleById(initParam.guidanceId, 0);
      // 次画面遷移ボタンを非表示
      visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 1);
      //画面再描画
      $('#body-pagecontent').css('visibility', 'hidden');
      $('#body-pagecontent').css('visibility', 'visible');
    } else {
      // 存在しない場合は次画面遷移ボタンを非活性
      enableById(initParam.nextButtonId, false);
      changeClassById(initParam.nextButtonId, aaui034_disabledClass, 0);
      changeClassById(initParam.nextButtonId, aaui034_abledClass, 1);
    }
  }
}

/**
 * 確認対象ボタン、承諾確認チェックボックスクリックイベント機能（連動無）
 * @param initParam 入力パラメータ
 */
function acceptConfirmEventNoSync(initParam, selfId) {
  // 確認対象ボタンID配列から、対象のボタンのID（もしくはグループ）を削除
  for (var i = 0; i < aaui034_confirmArray.length; i++) {
    if (selfId == aaui034_confirmArray[i] || aaui034_confirmArray[i].indexOf(' ' + selfId + ' ') > -1) {
      aaui034_confirmArray.splice(i, 1);
      break;
    }
  }

  // 未押下のボタンが存在する場合は処理終了
//2014.10.08 Phase3.5
//  if (!aaui034_ngAlertFlg && aaui034_confirmArray.length != 0) {
  if (aaui034_confirmArray.length != 0) {
    return false;
  }

  var isAllAcceptChecked = true;
  // 承諾確認チェックボックスID配列のチェックボックスが全てチェック済みかどうかチェック
  var tagName = "";
  var idName = "";
  for (var i = 0; i < aaui034_acceptArray.length; i++) {
    isAllAcceptChecked = isAvailable(aaui034_acceptArray[i]);
    if (!isAllAcceptChecked) {
      break;
    }
  }

  if (isAllAcceptChecked) {
    // ガイダンスエリアが存在する場合
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
      // ガイダンスエリアを非表示
      visibleById(initParam.guidanceId, 1);
      // 次画面遷移ボタンを表示
      visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 0);
      //画面再描画
      $('#body-pagecontent').css('visibility', 'hidden');
      $('#body-pagecontent').css('visibility', 'visible');
    } else {
      // 存在しない場合は次画面遷移ボタンを活性
      enableById(initParam.nextButtonId, true);
      changeClassById(initParam.nextButtonId, aaui034_disabledClass, 1);
      changeClassById(initParam.nextButtonId, aaui034_abledClass, 0);
    }
  } else {
    // ガイダンスエリアが存在する場合
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
      // ガイダンスエリアを表示
      visibleById(initParam.guidanceId, 0);
      // 次画面遷移ボタンを非表示
      visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 1);
      //画面再描画
      $('#body-pagecontent').css('visibility', 'hidden');
      $('#body-pagecontent').css('visibility', 'visible');
    } else {
      // 存在しない場合は次画面遷移ボタンを非活性
      enableById(initParam.nextButtonId, false);
      changeClassById(initParam.nextButtonId, aaui034_disabledClass, 0);
      changeClassById(initParam.nextButtonId, aaui034_abledClass, 1);
    }
  }
}

// 2014.5.21 Phase3
// 対象の要素がチェックされているかプルダウンが選択されているか
function isAvailable(id) {
  var idName = '#' + id;
  var tagName = $(idName)[0].tagName;
  // チェックボックス
  if (tagName == "INPUT") {
    if ($(idName).attr("type") == "checkbox") {
      if (!$(idName).prop("checked")) {
        return false;
      }
    }
    else {
      return false;
    }
  }
  // プルダウン
  else if (tagName == "SELECT") {
    if ($(idName).val() == "") {
      return false;
    }
  }
  else {
    return false;
  }
  return true;
}

/**
 * 確認対象ボタンID配列を取得する
 * @param confirmButtonId 確認対象ボタンID
 * @return 確認対象ボタンID配列
 */
function getConfirmIdArray(confirmButtonId) {
  // 確認対象ボタンIDをカンマで分割 
  var retArray = new Array();

  var tmpArray = splitConfirmButtonId(confirmButtonId);
  for (var i = 0; i < tmpArray.length; i++) {
    // 確認対象ボタンIDに{}が存在する場合
    if (tmpArray[i].substring(0,1) == '{') {
      // {}と{}内のカンマを半角スペースに変換する
      tmpArray[i] = tmpArray[i].replace(/{|}|,/g, ' ');

      // グループ内に画面に存在しないIDがある場合はグループから外す
      var idArray = tmpArray[i].replace(/(^\s+)|(\s+$)/g, "").split(' ');
      for (var j = 0; j < idArray.length; j++) {
        if ($('#' + idArray[j]).length == 0) {
          idArray[j] = '';
          tmpArray[i] = ' ' + idArray.join(' ') + ' ';
        }
      }
      // 全てが消えた場合は次のリストへ
      var tmpId = tmpArray[i].replace(/\s/g, "");
      if(!tmpId) {
        continue;
      }
    } else {
      if ($('#' + tmpArray[i]).length == 0) {
        continue;
      }
    }

    // 画面に存在するものを確認対象ボタンID配列に格納
    retArray.push(tmpArray[i]);
  }
  return retArray;
}

/**
 * 確認対象ボタンIDを、グループを考慮してカンマ区切りに分割する
 * @param confirmButtonId 確認対象ボタンID
 * @return カンマ区切りした配列
 */
function splitConfirmButtonId(confirmButtonId) {
  var retArray = new Array();

  // 入力パラメータの文字列を、配列分割用領域へコピー
  var tmp = confirmButtonId;

  while (true) {
    // 現在の位置に"{"がある場合
    var index;
    if (tmp.substring(0, 1) == '{') {
      // "}"の位置を検索
      index = tmp.indexOf('}');
      if (index == -1) {
        // 括弧が閉じられていない場合は不正
        return false;
      } else {
        // "{" から "}" の文字列を抜き出して配列へ格納
        var str = tmp.substring(0, index + 1)
        tmp = tmp.replace(str, '');
        retArray.push(str);
        // 直後にカンマがある場合は領域から削除
        if (tmp.substring(0, 1) == ',') {
         tmp = tmp.replace(',', '');
        }
      }
    } else {
      // 次のカンマの位置を検索
      index = tmp.indexOf(',');
      if (index == -1) {
        // カンマが存在しない場合は、文字列全体を配列へ格納して終了
        retArray.push(tmp);
        break;
      } else {
        // 次のカンマまでの文字列を配列へ格納
        var str = tmp.substring(0, index + 1)
        tmp = tmp.replace(str, '');
        str = str.replace(',','');
        retArray.push(str);
      }
    }

    // 文字列を全て操作したらループを抜ける
    if (!tmp) {
      break;
    }
  }
  return retArray;
}

//2014.10.08 Phase3.5
//未読のボタンIDを取得
function getNoReadingId(obj) {
  var ret = "";
  var comma ="";

  // pidが存在し、未読の場合ボタンidを配列に格納し返す（pidは既読のid）
  for (var pid in obj) {
    // 既読・未読がある場合
    if ($('#' + pid)[0]) {
      // 未読が表示されている場合、ボタンIDを配列に格納
      if ($('#' + pid + ':visible').length != 0) {
        ret += comma + obj[pid];
        comma =",";
      }
    }
  }
  return ret;
}
/**
 * ファイル名   aaui035.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2013 NTT DATA
 * 収容物  アコーディオン機能
 *         ・アコーディオン機能初期化
 *         ・開くトリガーのクリックイベント
 *         ・閉じるトリガーのクリックイベント
 *         ・開閉トグルのクリックイベント
 *
 * 修正履歴
 * 2013.07.15 NTTD 渡辺誠 次世代個人IB開発 Phase2
 */

// アニメーション速度(ms)
var animationSpeed = 500;

// アコーディオン開閉状態：閉
var ACCORDION_STATUS_CLOSE = 0;

// アコーディオン開閉状態：開
var ACCORDION_STATUS_OPEN = 1;

// アコーディオン開閉状態：処理中
var ACCORDION_STATUS_PROCESSING = 2;

// 表示状態：表示
var VISIBLE_SHOW = '0';

// 表示状態：非表示
var VISIBLE_HIDE = '1';

/**
 * アコーディオン機能初期化（開閉状態無）<br>
 * アコーディオン機能に必要な要素を設定する。
 *  
 * @param target アコーディオン対象
 * @param dispNum 表示件数
 * @param openTrigger 開くトリガーID
 * @param closeTrigger 閉じるトリガーID
 * @param openAreaId 開くトリガーエリアID
 * @param closeAreaId 閉じるトリガーエリアID
 * @param useFlag アコーディオン機能利用有無フラグ
 */
function initAccordion(target, dispNum, openTrigger,
    closeTrigger, openAreaId, closeAreaId, useFlag) {
    
    // 全ての必須パラメータが設定されていない場合、処理終了
    if (!target || dispNum === null || dispNum === undefined || dispNum === ''
        || !openTrigger || !closeTrigger || !openAreaId || !closeAreaId
        || useFlag === undefined || useFlag === null || useFlag === '') {
        return;
    }
    
    // 指定されたIDが実在しない場合、処理終了
    if ($('#' + target).length == 0 || $('#' + openTrigger).length == 0
        || $('#' + closeTrigger).length == 0 || $('#' + openAreaId).length == 0
        || $('#' + closeAreaId).length == 0) {
        return;
    }
    
    // 初期化関数を呼び出す
    initAccordionCom(target, dispNum, openTrigger, closeTrigger,
        openAreaId, closeAreaId, useFlag, undefined, undefined);
}

/**
 * アコーディオン機能初期化（開閉状態有）<br>
 * アコーディオン機能に必要な要素を設定する。
 *  
 * @param target アコーディオン対象
 * @param dispNum 表示件数
 * @param openTrigger 開くトリガーID
 * @param closeTrigger 閉じるトリガーID
 * @param openAreaId 開くトリガーエリアID
 * @param closeAreaId 閉じるトリガーエリアID
 * @param useFlag アコーディオン機能利用有無フラグ
 * @param openCloseState アコーディオン開閉状態
 * @param stateTagName アコーディオン開閉状態保持タグ名
 */
function initAccordionEx(target, dispNum, openTrigger,
    closeTrigger, openAreaId, closeAreaId,
    useFlag, openCloseState, stateTagName) {
        
    // 全ての必須パラメータが設定されていない場合、処理終了
    if (!target || dispNum === null || dispNum === undefined || dispNum === ''
        || !openTrigger || !closeTrigger || !openAreaId || !closeAreaId
        || useFlag === undefined || useFlag === null || useFlag === ''
        || openCloseState === undefined || openCloseState === null || openCloseState === ''
        || !stateTagName) {
        return;
    }
    
    // 指定されたIDが実在しない場合、処理終了
    if ($('#' + target).length == 0 || $('#' + openTrigger).length == 0
        || $('#' + closeTrigger).length == 0 || $('#' + openAreaId).length == 0
        || $('#' + closeAreaId).length == 0) {
        return;
    }
    
    // 初期化関数を呼び出す
    initAccordionCom(target, dispNum, openTrigger, closeTrigger,
        openAreaId, closeAreaId, useFlag, openCloseState, stateTagName);
}

/**
 * アコーディオン機能初期化処理<br>
 *  
 * @param target アコーディオン対象
 * @param dispNum 表示件数
 * @param openTrigger 開くトリガーID
 * @param closeTrigger 閉じるトリガーID
 * @param openAreaId 開くトリガーエリアID
 * @param closeAreaId 閉じるトリガーエリアID
 * @param useFlag アコーディオン機能利用有無フラグ
 * @param openCloseState アコーディオン開閉状態
 * @param stateTagName アコーディオン開閉状態保持タグ名
 */
function initAccordionCom(target, dispNum, openTrigger,
    closeTrigger, openAreaId, closeAreaId,
    useFlag, openCloseState, stateTagName) {
        
    // アコーディオン機能利用有無フラグがfalseの場合、処理終了
    if (!(useFlag === true)) {
        return;
    }
    
    // アコーディオン対象の子ノードの要素数
    var childArray = $('#' + target).children();
    
    // アコーディオン対象の件数が表示件数を超えている場合、処理終了
    if(childArray.length <= dispNum) {
        return;
    }

    var option = {};
    option.target = target;
    option.childArray = childArray;
    option.dispNum = dispNum;
    option.openTrigger = openTrigger;
    option.closeTrigger = closeTrigger;
    option.openAreaId = openAreaId;
    option.closeAreaId = closeAreaId;
    option.openCloseState = openCloseState;
    option.stateTagName = stateTagName;
    
    // アコーディオン開閉状態を判定    
    if (openCloseState) {
        // 閉じるトリガー、閉じるトリガーエリアの表示状態を"表示"に変更
        visibleById(closeTrigger, VISIBLE_SHOW);
        visibleById(closeAreaId, VISIBLE_SHOW);

        // アコーディオン対象の高さを保持する。
        for(var i = dispNum; i < childArray.length; i++) {
            var height1=childArray.eq(i).height()+"px";
            childArray.eq(i).css("height",height1);
        }
        
        // アコーディオン開閉状態を"開"に変更
        option.accordionStatus = ACCORDION_STATUS_OPEN;
    } else {
        // 開くトリガー、開くトリガーエリアの表示状態を"表示"に変更
        visibleById(openTrigger, VISIBLE_SHOW);
        visibleById(openAreaId, VISIBLE_SHOW);
        
        // アコーディオン対象の超過部分を非表示にする
        for(var i = dispNum; i < childArray.length; i++) {
            var height1=childArray.eq(i).height()+"px";
            childArray.eq(i).css("display", "none").css("height",height1);
        }
        
        // アコーディオン開閉状態を"閉"に変更
        option.accordionStatus = ACCORDION_STATUS_CLOSE;
    }
    
    
    // 開くトリガーと閉じるトリガーのIDが異なる場合
    if (openTrigger != closeTrigger) {
        // 開くトリガーのクリックイベントを開くトリガーの要素にバインド
        $('#' + openTrigger).click(function() {
            openAccordionEvent(option);
        });
        
        // 閉じるトリガーのクリックイベントを閉じるトリガーの要素にバインド
        $('#' + closeTrigger).click(function() {
            closeAccordionEvent(option);
        });
    } else {
        // 開閉トグルのクリックイベントをバインド
        $('#' + openTrigger).click(function() {
            openCloseAccordionEvent(option);
        });
    }
}

/**
 * 開くトリガーのクリックイベント
 * 
 * @param option 初期化時パラメータ
 */
function openAccordionEvent(option) {
    // アコーディオン対象の状態が"開"、または、"処理中"の場合、処理を終了
    if (option.accordionStatus == ACCORDION_STATUS_OPEN
        || option.accordionStatus ==  ACCORDION_STATUS_PROCESSING) {
        return;
    }
    
    // アコーディオン対象の状態を"処理中"に変更
    option.accordionStatus = ACCORDION_STATUS_PROCESSING;
    
    // アコーディオン対象の表示処理をアニメーション付きで実施
    for(var i = option.dispNum; i < option.childArray.length; i++) {
        if (i == option.childArray.length - 1) {
            option.childArray.eq(i).slideDown(animationSpeed, function() {
                // アニメーション完了時
                // 開くトリガーの表示エリアの表示状態を非表示に変更
                visibleById(option.openTrigger, VISIBLE_HIDE);
                visibleById(option.openAreaId, VISIBLE_HIDE);
                // 閉じるトリガーの表示エリアの表示状態を表示に変更
                visibleById(option.closeTrigger, VISIBLE_SHOW);
                visibleById(option.closeAreaId, VISIBLE_SHOW);
                // アコーディオン対象の状態を"開"に変更
                option.accordionStatus = ACCORDION_STATUS_OPEN;
                if (option.openCloseState !== undefined) {
                    $("input[name='" + option.stateTagName + "']").val(true);
                }
            });
        } else {
            option.childArray.eq(i).slideDown(animationSpeed);
        }
    }
    
}

/**
 * 閉じるトリガーのクリックイベント
 * 
 * @param option 初期化時パラメータ
 */
function closeAccordionEvent(option) {
    // アコーディオン対象の状態が"閉"、または、"処理中"の場合、処理を終了
    if (option.accordionStatus == ACCORDION_STATUS_CLOSE
        || option.accordionStatus ==  ACCORDION_STATUS_PROCESSING) {
        return;
    }
    
    // アコーディオン対象の状態を"処理中"に変更
    option.accordionStatus = ACCORDION_STATUS_PROCESSING;
    
    // アコーディオン対象の非表示処理をアニメーション付きで実施
    for(var i = option.childArray.length - 1; i >= option.dispNum; i--) {
        if (i == option.dispNum) {
            option.childArray.eq(i).slideUp(animationSpeed, function() {
                // アニメーション完了時
                // 閉じるトリガーの表示エリアの表示状態を非表示に変更
                visibleById(option.closeTrigger, VISIBLE_HIDE);
                visibleById(option.closeAreaId, VISIBLE_HIDE);
                // 開くトリガーの表示エリアの表示状態を表示に変更
                visibleById(option.openTrigger, VISIBLE_SHOW);
                visibleById(option.openAreaId, VISIBLE_SHOW);
                // アコーディオン対象の状態を"閉"に変更
                option.accordionStatus = ACCORDION_STATUS_CLOSE;
                if (option.openCloseState !== undefined) {
                    $("input[name='" + option.stateTagName + "']").val(false);
                }
            });
        } else {
            option.childArray.eq(i).slideUp(animationSpeed);
        }
    }
    
}

/**
 * 開閉トグルのクリックイベント
 * 
 * @param option 初期化時パラメータ
 */
function openCloseAccordionEvent(option) {
    
    // アコーディオン対象の状態が"閉"の場合
    if (option.accordionStatus == ACCORDION_STATUS_CLOSE) {
        // アコーディオン対象の状態を"処理中"に変更
        option.accordionStatus = ACCORDION_STATUS_PROCESSING;
    
        // アコーディオン対象の表示処理をアニメーション付きで実施
        for (var i = option.dispNum; i < option.childArray.length; i++) {
            if (i == option.childArray.length - 1) {
                option.childArray.eq(i).slideDown(animationSpeed, function() {
                    // アニメーション完了時
                    // 開くトリガーの表示エリアの表示状態を非表示に変更
                    visibleById(option.openAreaId, VISIBLE_HIDE);
                    // 閉じるトリガーの表示エリアの表示状態を表示に変更
                    visibleById(option.closeAreaId, VISIBLE_SHOW);
                    // アコーディオン対象の状態を"開"に変更
                    option.accordionStatus = ACCORDION_STATUS_OPEN;
                    if (option.openCloseState !== undefined) {
                        $("input[name='" + option.stateTagName + "']").val(true);
                    }
                });
            } else {
                option.childArray.eq(i).slideDown(animationSpeed);
            }
        }
        
        
    } else if (option.accordionStatus == ACCORDION_STATUS_OPEN) {
        // アコーディオン対象の状態が"開"の場合
        
        // アコーディオン対象の状態を"処理中"に変更
        option.accordionStatus = ACCORDION_STATUS_PROCESSING;
        
        // アコーディオン対象の非表示処理をアニメーション付きで実施
        for(var i = option.childArray.length - 1; i >= option.dispNum; i--) {
            if (i == option.dispNum) {
                option.childArray.eq(i).slideUp(animationSpeed, function() {
                    // アニメーション完了時
                    // 閉じるトリガーの表示エリアの表示状態を非表示に変更
                    visibleById(option.closeAreaId, VISIBLE_HIDE);
                    // 開くトリガーの表示エリアの表示状態を表示に変更
                    visibleById(option.openAreaId, VISIBLE_SHOW);
                    // アコーディオン対象の状態を"閉"に変更
                    option.accordionStatus = ACCORDION_STATUS_CLOSE;
                    if (option.openCloseState !== undefined) {
                        $("input[name='" + option.stateTagName + "']").val(false);
                    }
                });
            } else {
                option.childArray.eq(i).slideUp(animationSpeed);
            }
        }
        
       
    } else if (option.accordionStatus ==  ACCORDION_STATUS_PROCESSING) {
        // アコーディオン対象の状態が"処理中"の場合、処理を終了
        return;
    }
}
/**
 * ファイル名   aaui036.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   相関チェック機能
 *          相関チェック初期化機能
 *          相関チェック処理機能
 *
 * 修正履歴
 * 2013.07.04 NTTD 松尾和徳 次世代個人IB開発 Phase2
 * 
 */

/** 初期化パラメータキー（フィールドID） */
var aaui036_keyParamValidationElements = 'validationElements';
/** 初期化パラメータキー（トリガ） */
var aaui036_keyParamTrigger = 'trigger';
/** 初期化パラメータキー（チェック種別） */
var aaui036_keyParamValidationtype = 'validationType';
/** 初期化パラメータキー（エラーメッセージ） */
var aaui036_keyParamFailuremsg = 'failureMsg';
/** 初期化パラメータキー（相関項目） */
var aaui036_keyParamCorrelationElement = 'correlationElement';
/** 初期化パラメータキー（最大値） */
var aaui036_keyParamMaximum = 'maximum';

/** チェック種別（同時入力チェック） */
var aaui036_concurrentInput = '1';
/** チェック種別（相関必須チェック） */
var aaui036_correlationIndispensable = '2';
/** チェック種別（暦日チェック） */
var aaui036_calendar = '3';
/** チェック種別（日付比較チェック（日付大小）） */
var aaui036_compareDateSize = '4';
/** チェック種別（条件付必須チェック） */
var aaui036_conditionIndispensable = '5';
/** チェック種別（条件付未入力チェック） */
var aaui036_conditionNotEnter = '6';
/** チェック種別（非同値チェック） */
var aaui036_inequivalence = '7';
/** チェック種別（日付比較チェック（指定日前）） */
var aaui036_compareDateBefore = '8';
/** チェック種別（バイトチェック（最大バイト数）） */
var aaui036_byte = '9';
/** チェック種別（日付比較チェック（日付間隔）） */
var aaui036_compareDateSpace = '10';
/** チェック種別（未選択時未入力チェック） */
var aaui036_noSelectedNotEnter = '11';

/** チェック種別の最小値 */
var aaui036_minCheckType = 1;
/** チェック種別の最大値 */
var aaui036_maxCheckType = 11;
/** 画面要素（テキスト） */
var aaui036_text = 1;
/** 画面要素（パスワード） */
var aaui036_password = 2;
/** 画面要素（テキストエリア） */
var aaui036_textarea = 3;
/** 画面要素（プルダウン） */
var aaui036_select = 4;
/** 画面要素（ラジオボタン） */
var aaui036_radio = 5;
/** 画面要素（チェックボックス） */
var aaui036_checkbox = 6;

/** 標準エラーメッセージ（同時入力チェック） */
var aaui036_errMsgConcurrentInput = '入力が正しくありません。<br>ご確認の上、正しく入力して下さい。<br><br>理由コードはA00です。';
/** 標準エラーメッセージ（相関必須チェック） */
var aaui036_errMsgCorrelationIndispensable = '必要な項目が入力されていません。<br>必要な項目を入力してください。<br><br>理由コードはA06です。';
/** 標準エラーメッセージ（暦日チェック） */
var aaui036_errMsgCalendar = '日付が正しくありません。<br>正しく入力してください。<br><br>理由コードはA03です。';
/** 標準エラーメッセージ（日付比較チェック（日付大小）） */
var aaui036_errMsgCompareDateSize = '期間の範囲指定が正しくありません。<br>正しく入力してください。<br><br>理由コードはA04です。';
/** 標準エラーメッセージ（条件付必須チェック） */
var aaui036_errMsgConditionIndispensable = '必要な項目が入力されていません。<br>必要な項目を入力してください。<br><br>理由コードはA06です。';
/** 標準エラーメッセージ（条件付未入力チェック） */
var aaui036_errMsgConditionNotEnter = '現在の選択の場合には入力項目への入力ができません。<br><br>理由コードはA05です。';
/** 標準エラーメッセージ（非同値チェック） */
var aaui036_errMsgInequivalence = '異なる値を選択する箇所に同じ値が選択されています。<br>１つのみ指定したい場合は一方のみ選択してください。<br><br>理由コードはA06です。';
/** 標準エラーメッセージ（日付比較チェック（指定日前）） */
var aaui036_errMsgCompareDateBefore = '年月日が正しく入力されていません。<br>正しく入力してください。<br><br>理由コードはA06です。';
/** 標準エラーメッセージ（バイトチェック（最大バイト数）） */
var aaui036_errMsgByte = '入力字数がオーバーしています。<br>正しい入力字数で入力してください。<br><br>理由コードはA01です。';
/** 標準エラーメッセージ（日付比較チェック（日付間隔）） */
var aaui036_errMsgCompareDateSpace = '期間の指定が正しくありません。<br>正しい期間を入力してください。<br><br>理由コードはA05です。';
/** 標準エラーメッセージ（未選択時未入力チェック） */
var aaui036_errMsgNoSelectedNotEnter = '必要な項目が選択されていません。<br>項目を選択するか不要な入力項目をクリアしてください。<br><br>理由コードはA06です。';

var aaui036_strComma = ',';
var aaui036_correlationValidations = [];

/**
 * 相関チェックの初期化（インスタンス生成、validate追加)を行う。
 * @param initParams 初期化パラメータ連想配列
 * @return なし
 */
function initCorrelationValidate(initParams) {
    // パラメータ配列の評価を実施する
    for (var i = 0; i < initParams.length; i++) {

        // 必須パラメータが設定されているかチェックする
        if (aaui036_keyParamValidationElements in initParams[i] &&
            aaui036_keyParamTrigger in initParams[i] &&
            aaui036_keyParamValidationtype in initParams[i]) {
            // パラメータ値がnull、空文字の場合はNG
            if (initParams[i][aaui036_keyParamValidationElements] === null ||
                initParams[i][aaui036_keyParamValidationElements] === '' ||
                initParams[i][aaui036_keyParamTrigger] === null ||
                initParams[i][aaui036_keyParamTrigger] === '' ||
                initParams[i][aaui036_keyParamValidationtype] === null ||
                initParams[i][aaui036_keyParamValidationtype] === '') {
                continue;
            }

            // 要素の存在チェック
            var elementIds = initParams[i][aaui036_keyParamValidationElements].split(aaui036_strComma);
            var check_element_result = true;
            for (var j = 0; j < elementIds.length; j++) {
                var check_element = document.getElementById(elementIds[j]);
                if (!check_element) {
                    check_element_result = false;
                    break;
                }
            }
            if (!check_element_result) {
                continue;
            }

            // トリガーの存在チェック
            var check_trigger = document.getElementById(initParams[i][aaui036_keyParamTrigger]);
            if (!check_trigger) {
                continue;
            }

            // チェック種別が定義しているもの以外が設定されていた場合はNG
            var validateTypeNum = Number(initParams[i][aaui036_keyParamValidationtype]);
            if (isNaN(validateTypeNum) || 
                validateTypeNum > aaui036_maxCheckType || 
                validateTypeNum < aaui036_minCheckType) {
                continue;
            }

            // チェック種別により、必須となる項目があるかチェックする
            // 条件付必須チェック、条件付未入力チェック、未選択時未入力チェックの場合、相関項目がnull、空文字の場合はNG
            if (initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_conditionIndispensable ||
                initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_conditionNotEnter ||
                initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_noSelectedNotEnter ) {
                    if (aaui036_keyParamCorrelationElement in initParams[i]) {
                        if (initParams[i][aaui036_keyParamCorrelationElement] === null ||
                            initParams[i][aaui036_keyParamCorrelationElement] === '') {
                            continue;
                        } else {
                            // 相関項目の存在チェック
                            var correlationElementIds = initParams[i][aaui036_keyParamCorrelationElement].split(aaui036_strComma);
                            var check_correlationelement_result = true;
                            for (var k = 0; k < correlationElementIds.length; k++) {
                                var check_correlationelement = document.getElementById(correlationElementIds[k]);
                                if (!check_correlationelement) {
                                    check_correlationelement_result = false;
                                    break;
                                }
                            }
                            if (!check_correlationelement_result) {
                                continue;
                            }
                        }
                    } else {
                        continue;
                    }
            }
            // 日付比較チェック（指定日前）、バイトチェック（最大バイト数）、日付比較チェック（日付間隔）の場合、最大値が設定なしはNG
            if (initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_compareDateBefore ||
                initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_byte ||
                initParams[i][aaui036_keyParamValidationtype] ==
                aaui036_compareDateSpace) {
                if (aaui036_keyParamMaximum in initParams[i]) {
                    if (initParams[i][aaui036_keyParamMaximum] === null ||
                        initParams[i][aaui036_keyParamMaximum] === '') {
                        continue;    
                    }
                } else {
                    continue;
                }
            }

            // エラーメッセージが設定されていない場合はデフォルトメッセージを設定する。
            if (!initParams[i][aaui036_keyParamFailuremsg]) {
                var errMsg = '';
                switch (initParams[i][aaui036_keyParamValidationtype]) {
                    case aaui036_concurrentInput:
                        errMsg = aaui036_errMsgConcurrentInput;
                        break;
                    case aaui036_correlationIndispensable:
                        errMsg = aaui036_errMsgCorrelationIndispensable;
                        break;
                    case aaui036_calendar:
                        errMsg = aaui036_errMsgCalendar;
                        break;
                    case aaui036_compareDateSize:
                        errMsg = aaui036_errMsgCompareDateSize;
                        break;
                    case aaui036_conditionIndispensable:
                        errMsg = aaui036_errMsgConditionIndispensable;
                        break;
                    case aaui036_conditionNotEnter:
                        errMsg = aaui036_errMsgConditionNotEnter;
                        break;
                    case aaui036_inequivalence:
                        errMsg = aaui036_errMsgInequivalence;
                        break;
                    case aaui036_compareDateBefore:
                        errMsg = aaui036_errMsgCompareDateBefore;
                        break;
                    case aaui036_byte:
                        errMsg = aaui036_errMsgByte;
                        break;
                    case aaui036_compareDateSpace:
                        errMsg = aaui036_errMsgCompareDateSpace;
                        break;
                    case aaui036_noSelectedNotEnter:
                        errMsg = aaui036_errMsgNoSelectedNotEnter;
                        break;
                    default:
                        break;
                }
                initParams[i][aaui036_keyParamFailuremsg] = errMsg;
            }

            // LiveValidationFormのインスタンスを取得する。
            var element0 = document.getElementById(elementIds[0]);
            var elementForm = element0.form;
            if(elementForm){
                LiveValidationForm.getInstance(elementForm, initParams[i][aaui036_keyParamTrigger]);

                // チェック内容を保持
                aaui036_correlationValidations.push(initParams[i]);
            }
        } else {
            continue;
        }
    }
}

/**
 * 相関チェックの実行契機判定。
 * @param form フォーム
 * @param trigger トリガーID
 * @return boolean チェック結果
 */
function execCorrelationValidate(form, trigger) {
    var checkResult = true;

    for(var i = 0; i < aaui036_correlationValidations.length; i++){
        var cValid = aaui036_correlationValidations[i];
        var elementIds = cValid[aaui036_keyParamValidationElements].split(aaui036_strComma);
        var element = document.getElementById(elementIds[0]);
        if (element) {
            var elementForm = element.form;
            if(elementForm.id == form.id && 
                cValid[aaui036_keyParamTrigger] == trigger){
                checkResult = selectCorrelationValidate(cValid);
            }
            if (!checkResult) {
                var errMsg = document.getElementById('svrErr');
                if (errMsg) {
                    errMsg.innerHTML = cValid[aaui036_keyParamFailuremsg];
                } else {
                    // クラスにform-error-blockA01を持つdiv要素を作成
                    var eleDiv = document.createElement('div');
                    eleDiv.id = 'aaui_clientCheckErrDiv';

                    // クラスにform-error-listA01を持つul要素を作成
                    var eleUl = document.createElement('ul');
                    eleUl.id = 'aaui_clientCheckErrUl';

                    // li要素を作成
                    var eleLi = document.createElement('li');
                    eleLi.id = 'aaui_clientCheckErrLi';

                    // idにsvrErrを持つspan要素を作成
                    var eleSpan = document.createElement('span');
                    eleSpan.id = 'svrErr';
                    eleSpan.innerHTML = cValid[aaui036_keyParamFailuremsg];

                    eleLi.appendChild(eleSpan);
                    eleUl.appendChild(eleLi);
                    eleDiv.appendChild(eleUl);
                    $('#aaui_clientCheckErrId').after(eleDiv);
                    $('#aaui_clientCheckErrDiv').addClass('form-error-blockA01');
                    $('#aaui_clientCheckErrUl').addClass('form-error-listA01');
                    $('#body-pagecontent').css('visibility', 'hidden');
                    $('#body-pagecontent').css('visibility', 'visible');
                }

                var ua = navigator.userAgent.toLowerCase();
                if (ua.indexOf('firefox') != -1 || ua.indexOf('ie') != -1 || ua.indexOf('trident') != -1) {
                    $('html').scrollTop(0);
                } else {
                    $('body').scrollTop(0);
                }
                break;
            }
        }
    }

    return checkResult;
}

/**
 * 相関チェックのチェック種別判定。
 * @param validate 初期化パラメータ
 * @return boolean チェック結果
 */
function selectCorrelationValidate(validate) {
    var result = false;
    switch(validate[aaui036_keyParamValidationtype]){
        case aaui036_concurrentInput:
            // 同時入力チェック
            result = validateConcurrentInput(validate);
            break;
        case aaui036_correlationIndispensable:
            // 相関必須チェック
            result = validateConcurrentIndispensable(validate);
            break;
        case aaui036_calendar:
            // 暦日チェック
            result = validateCalendar(validate);
            break;
        case aaui036_compareDateSize:
            // 日付比較チェック（日付大小）
            result = validateCompareDateSize(validate);
            break;
        case aaui036_conditionIndispensable:
            // 条件付必須チェック
            result = validateConditionIndispensable(validate);
            break;
        case aaui036_conditionNotEnter:
            // 条件付未入力チェック
            result = validateConditionNotEnter(validate);
            break;
        case aaui036_inequivalence:
            // 非同値チェック
            result = validateInequivalence(validate);
            break;
        case aaui036_compareDateBefore:
            // 日付比較チェック（指定日前）
            result = validateCompareDateBefore(validate);
            break;
        case aaui036_byte:
            // バイト（最大バイト数）チェック
            result = validateByte(validate);
            break;
        case aaui036_compareDateSpace:
            // 日付比較チェック（日付間隔）
            result = validateCompareDateSpace(validate);
            break;
        case aaui036_noSelectedNotEnter:
        	// 未選択時未入力チェック
            result = validateNoSelectedNotEnter(validate);
            break;
        default:
            break;
    }

    return result;
}

/**
 * 同時入力チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateConcurrentInput(validate) {
    var result = false;
    var cnt = 0;

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    for (var i = 0; i < elementIds.length; i++) {
        var element = document.getElementById(elementIds[i]);
        if (!isVisibleCheck(element)) {
            // 非表示項目が存在する場合、チェックOKで強制終了
            return true;
        }
        switch(getElementType(element)){
            case aaui036_text:
            case aaui036_password:
            case aaui036_textarea:
            case aaui036_select:
                if (element.value != '') {
                    cnt++;
                }
                break;
            case aaui036_radio:
            case aaui036_checkbox:
                if (element.checked) {
                    cnt++;
                }
                break;
            default:
                // 対象外の要素の場合、チェックOKで強制終了
                return true;
        }
    }

    if (cnt == 0 ||
        cnt == elementIds.length) {
        result = true;
    }

    return result;
}

/**
 * 相関必須チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateConcurrentIndispensable(validate) {
    var result = false;

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    for (var i = 0; i < elementIds.length; i++) {
        var element = document.getElementById(elementIds[i]);
        if (!isVisibleCheck(element)) {
            // 非表示項目が存在する場合、チェックOKで強制終了
            return true;
        }
        switch(getElementType(element)){
            case aaui036_text:
            case aaui036_password:
            case aaui036_textarea:
            case aaui036_select:
                if (element.value != '') {
                    result = true;
                }
                break;
            case aaui036_radio:
            case aaui036_checkbox:
                if (element.checked) {
                    result = true;
                }
                break;
            default:
                // 対象外の要素の場合、チェックOKで強制終了
                return true;
        }

        if (result) {
            break;
        }
    }

    return result;
}

/**
 * 暦日チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateCalendar(validate) {
    var result = false;

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    if (elementIds.length == 3) {
        var year = document.getElementById(elementIds[0]);
        var month = document.getElementById(elementIds[1]);
        var day = document.getElementById(elementIds[2]);
        if (!isVisibleCheck(year) || !isNullCheck(year)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(month) || !isNullCheck(month)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(day) || !isNullCheck(day)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        var date = getInputDate(year, month, day);

        var yyAfter = date.getFullYear();
        var mmAfter = date.getMonth() + 1;
        var ddAfter = date.getDate();
        if (yyAfter < 10) { yyAfter = '000' + yyAfter; }
        else if (yyAfter < 100) { yyAfter = '00' + yyAfter; }
        else if (yyAfter < 1000) { yyAfter = '0' + yyAfter; }
        if (mmAfter < 10) { mmAfter = '0' + mmAfter; }
        if (ddAfter < 10) { ddAfter = '0' + ddAfter; }
        var strAfter = String(yyAfter) + String(mmAfter) + String(ddAfter);

        var yyBefore = getElementValue(year);
        var mmBefore = getElementValue(month);
        var ddBefore = getElementValue(day);
        if (yyBefore < 10) { yyBefore = '000' + yyBefore; }
        else if (yyBefore < 100) { yyBefore = '00' + yyBefore; }
        else if (yyBefore < 1000) { yyBefore = '0' + yyBefore; }
        if (mmBefore < 10) { mmBefore = '0' + parseInt(mmBefore, 10); }
        if (ddBefore < 10) { ddBefore = '0' + parseInt(ddBefore, 10); }
        var strBefore = String(yyBefore) + String(mmBefore) + String(ddBefore);

        if (Number(strAfter) === Number(strBefore)) {
            result = true;
        }
    } else {
        // 入力項目が3つ(年、月、日)以外の場合、チェックOKで強制終了
        return true;
    }

    return result;
}

/**
 * 日付比較チェック（日付大小）のチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateCompareDateSize(validate) {
    var result = false;
    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);

    if (elementIds.length == 6) {
        var yearFrom = document.getElementById(elementIds[0]);
        var monthFrom = document.getElementById(elementIds[1]);
        var dayFrom = document.getElementById(elementIds[2]);
        if (!isVisibleCheck(yearFrom) || !isNullCheck(yearFrom)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(monthFrom) || !isNullCheck(monthFrom)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(dayFrom) || !isNullCheck(dayFrom)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        var dateFrom = getInputDate(yearFrom, monthFrom, dayFrom);

        var yearTo = document.getElementById(elementIds[3]);
        var monthTo = document.getElementById(elementIds[4]);
        var dayTo = document.getElementById(elementIds[5]);
        if (!isVisibleCheck(yearTo) || !isNullCheck(yearTo)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(monthTo) || !isNullCheck(monthTo)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(dayTo) || !isNullCheck(dayTo)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        var dateTo = getInputDate(yearTo, monthTo, dayTo);

        if (dateFrom <= dateTo) {
            result = true;
        }
    } else {
        // 入力項目が6つ(開始：年、月、日、終了：年、月、日)以外の場合、チェックOKで強制終了
        return true;
    }
    return result;
}

/**
 * 条件付必須チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateConditionIndispensable(validate) {
    var result = false;

    var correlation_result = false;
    var correlationElementIds = validate[aaui036_keyParamCorrelationElement].split(aaui036_strComma);
    for (var j = 0; j < correlationElementIds.length; j++) {
        var correlation = document.getElementById(correlationElementIds[j]);
        if (!isVisibleCheck(correlation)) {
            // 非表示項目が存在する場合、チェックOKで強制終了
            return true;
        }

        switch(getElementType(correlation)) {
            case aaui036_radio:
            case aaui036_checkbox:
                if (correlation.checked) {
                    correlation_result = true;
                }
                break;
            case aaui036_select:
                if (correlation.value != '') {
                    correlation_result = true;
                }
                break;
            default:
                // 対象外の相関項目の場合、チェックOKで強制終了
            	return true;
        }
    }

    // 相関項目がどれか1つでも入力されている場合、対象要素をチェックする。
    if (correlation_result) {
        var cnt = 0;
        var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
        for (var i = 0; i < elementIds.length; i++) {
            var element = document.getElementById(elementIds[i]);
            if (!isVisibleCheck(element)) {
                // 非表示項目が存在する場合、チェックOKで強制終了
                return true;
            }
            switch(getElementType(element)){
                case aaui036_text:
                case aaui036_password:
                case aaui036_textarea:
                case aaui036_select:
                    if (element.value != '') {
                        cnt++;
                    }
                    break;
                case aaui036_radio:
                case aaui036_checkbox:
                    if (element.checked) {
                        cnt++;
                    }
                    break;
                default:
                    // 対象外の要素の場合、チェックOKで強制終了
                    return true;
            }
        }
        if (cnt == elementIds.length) {
            result = true;
        }
    } else {
        // 相関項目が未入力の場合、チェックを終了する。
        result = true;
    }

    return result;
}

/**
 * 条件付未入力チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateConditionNotEnter(validate) {
    var result = false;

    var correlation_result = false;
    var correlationElementIds = validate[aaui036_keyParamCorrelationElement].split(aaui036_strComma);
    for (var j = 0; j < correlationElementIds.length; j++) {
        var correlation = document.getElementById(correlationElementIds[j]);
        if (!isVisibleCheck(correlation)) {
            // 非表示項目が存在する場合、チェックOKで強制終了
            return true;
        }

        switch(getElementType(correlation)) {
            case aaui036_radio:
            case aaui036_checkbox:
                if (correlation.checked) {
                    correlation_result = true;
                }
                break;
            case aaui036_select:
                if (correlation.value != '') {
                    correlation_result = true;
                }
                break;
            default:
                // 対象外の相関項目の場合、チェックOKで強制終了
            	return true;
        }
    }

    // 相関項目がどれか1つでも入力されている場合、対象要素をチェックする。
    if (correlation_result) {
        var cnt = 0;
        var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
        for (var i = 0; i < elementIds.length; i++) {
            var element = document.getElementById(elementIds[i]);
            if (!isVisibleCheck(element)) {
                // 非表示項目が存在する場合、チェックOKで強制終了
                return true;
            }
            switch(getElementType(element)){
                case aaui036_text:
                case aaui036_password:
                case aaui036_textarea:
                case aaui036_select:
                    if (element.value != '') {
                        cnt++;
                    }
                    break;
                case aaui036_radio:
                case aaui036_checkbox:
                    if (element.checked) {
                        cnt++;
                    }
                    break;
                default:
                    // 対象外の要素の場合、チェックOKで強制終了
                    return true;
            }
        }
        if (cnt == 0) {
            result = true;
        }
    } else {
        // 相関項目が未入力の場合、チェックを終了する。
        result = true;
    }

    return result;
}

/**
 * 非同値チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateInequivalence(validate) {
    var result = false;

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    if (elementIds.length == 2) {
        var elm1 = document.getElementById(elementIds[0]);
        var elm2 = document.getElementById(elementIds[1]);
        if (!isVisibleCheck(elm1) || !isNullCheck(elm1)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }
        if (!isVisibleCheck(elm2) || !isNullCheck(elm2)) {
            // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
            return true;
        }

        if (getElementValue(elm1) != getElementValue(elm2)) {
            result = true;
        }
    } else {
        // 入力項目が2つ以外の場合、チェックOKで強制終了
        return true;
    }


    return result;
}

/**
 * 日付比較チェック（指定日前）のチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateCompareDateBefore(validate) {
    var result = false;

    var maximum = validate[aaui036_keyParamMaximum];
    if (maximum.length != 8) {
        // 最大値の桁数が不正値の場合、チェックOKで強制終了
        return true;
    }

    var numberMaximum = Number(maximum);
    if (isNaN(numberMaximum)) {
        // 最大値のフォーマットが不正の場合、チェックOKで強制終了
        return true;
    }

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    if (elementIds.length != 3) {
        // 入力項目が3つ(年、月、日)以外の場合、チェックOKで強制終了
        return true;
    }
    var year = document.getElementById(elementIds[0]);
    var month = document.getElementById(elementIds[1]);
    var day = document.getElementById(elementIds[2]);
    if (!isVisibleCheck(year) || !isNullCheck(year)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(month) || !isNullCheck(month)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(day) || !isNullCheck(day)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    var date = getInputDate(year, month, day);

    var yy = date.getFullYear();
    var mm = date.getMonth() + 1;
    var dd = date.getDate();
    if (yy < 10) { yy = '000' + yy; }
    else if (yy < 100) { yy = '00' + yy; }
    else if (yy < 1000) { yy = '0' + yy; }
    if (mm < 10) { mm = '0' + mm; }
    if (dd < 10) { dd = '0' + dd; }
    var strDate = String(yy) + String(mm) + String(dd);

    if (Number(strDate) <= numberMaximum) {
        result = true;
    }

    return result;
}

/**
 * バイト（最大バイト数）チェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateByte(validate) {
    var result = false;
    var cnt = 0;

    var maximum = Number(validate[aaui036_keyParamMaximum]);
    if (isNaN(maximum) || maximum < 0) {
        // バイト数が数値以外の場合は不正値として取り扱う
        // バイト数がマイナスは不正値として取り扱う
        return true;
    }

    var elementId = validate[aaui036_keyParamValidationElements];
    var element = document.getElementById(elementId);
    if (!element) {
        // 指定されたIDが取得できない場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(element)) {
        // 非表示項目が存在する場合、チェックOKで強制終了
        return true;
    }
    var value = getElementValue(element);
    for (i=0; i < value.length; i++) {
        var cCode = value.charCodeAt(i);
        // 0x0 〜 0x80, 0xa0 , 0xa1 〜 0xdf , 0xfd 〜 0xff
        if ((cCode >= 0x0 && cCode < 0x81) || 
            (cCode == 0xf8f0) || 
            (cCode >= 0xff61 && cCode < 0xffa0) || 
            (cCode >=  0xf8f1 && cCode < 0xf8f4)) {
            cnt +=1;
        } else {
            cnt +=2;
        }
    }

    if (cnt <= maximum) {
        result = true;
    }

    return result;
}

/**
 * 日付比較チェック（日付間隔）のチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateCompareDateSpace(validate) {
    var result = false;

    var maximum = Number(validate[aaui036_keyParamMaximum]);
    if (isNaN(maximum)) {
        // バイト数が数値以外の場合は不正値として取り扱う
        return true;
    }

    var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
    if (elementIds.length != 6) {
        // 入力項目が6つ(開始：年、月、日、終了：年、月、日)以外の場合、チェックOKで強制終了
        return true;
    }

    var yearFrom = document.getElementById(elementIds[0]);
    var monthFrom = document.getElementById(elementIds[1]);
    var dayFrom = document.getElementById(elementIds[2]);
    if (!isVisibleCheck(yearFrom) || !isNullCheck(yearFrom)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(monthFrom) || !isNullCheck(monthFrom)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(dayFrom) || !isNullCheck(dayFrom)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    var dateFrom = getInputDate(yearFrom, monthFrom, dayFrom);
    var yyFrom = dateFrom.getFullYear();
    var mmFrom = dateFrom.getMonth() + 1;
    var ddFrom = dateFrom.getDate();
    if (mmFrom < 10) { mmFrom = '0' + mmFrom; }
    if (ddFrom < 10) { ddFrom = '0' + ddFrom; }
    var strFrom = String(yyFrom) + String(mmFrom) + String(ddFrom);

    var yearTo = document.getElementById(elementIds[3]);
    var monthTo = document.getElementById(elementIds[4]);
    var dayTo = document.getElementById(elementIds[5]);
    if (!isVisibleCheck(yearTo) || !isNullCheck(yearTo)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(monthTo) || !isNullCheck(monthTo)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    if (!isVisibleCheck(dayTo) || !isNullCheck(dayTo)) {
        // 非表示項目が存在する場合、または空文字が設定されている場合、チェックOKで強制終了
        return true;
    }
    var dateTo = getInputDate(yearTo, monthTo, dayTo);
    var yyTo = dateTo.getFullYear();
    var mmTo = dateTo.getMonth() + 1;
    var ddTo = dateTo.getDate();
    if (mmTo < 10) { mmTo = '0' + mmTo; }
    if (ddTo < 10) { ddTo = '0' + ddTo; }
    var strTo = String(yyTo) + String(mmTo) + String(ddTo);

    if (Number(strFrom) + maximum * 10000 > Number(strTo)) {
        result = true;
    }

    return result;
}

 /**
  * 未選択時未入力チェックのチェックを実行する。
  * @param validate 初期化パラメータ
  * @return result チェック結果
  */
 function validateNoSelectedNotEnter(validate) {
     var result = false;

     var correlationElementIds = validate[aaui036_keyParamCorrelationElement].split(aaui036_strComma);
     for (var j = 0; j < correlationElementIds.length; j++) {
         var correlation = document.getElementById(correlationElementIds[j]);
         if (!isVisibleCheck(correlation)) {
             // 非表示項目が存在する場合、チェックOKで強制終了
             return true;
         }

         switch(getElementType(correlation)) {
             case aaui036_radio:
             case aaui036_checkbox:
                 if (correlation.checked) {
                     // 相関項目が入力されている場合、チェックOKで終了
                     return true;
                 }
                 break;
             case aaui036_select:
                 if (correlation.value != '') {
                     // 相関項目が入力されている場合、チェックOKで終了
                     return true;
                 }
                 break;
             default:
                 // 対象外の相関項目の場合、チェックOKで強制終了
             	return true;
         }
     }

     var cnt = 0;
     var elementIds = validate[aaui036_keyParamValidationElements].split(aaui036_strComma);
     for (var i = 0; i < elementIds.length; i++) {
         var element = document.getElementById(elementIds[i]);
         if (!isVisibleCheck(element)) {
             // 非表示項目が存在する場合、チェックOKで強制終了
             return true;
         }
         switch(getElementType(element)){
             case aaui036_text:
             case aaui036_password:
             case aaui036_textarea:
             case aaui036_select:
                 if (element.value != '') {
                     cnt++;
                 }
                 break;
             case aaui036_radio:
             case aaui036_checkbox:
                 if (element.checked) {
                     cnt++;
                 }
                 break;
             default:
                 // 対象外の要素の場合、チェックOKで強制終了
                 return true;
         }
     }
     if (cnt == 0) {
         result = true;
     }

     return result;
}

/**
 * 要素の種別を判定する。
 * @param element 要素
 * @return type 種別
 */
function getElementType(element) {
    var type = -1;

    if (element.tagName.toUpperCase() == 'INPUT') {
        switch(element.type.toUpperCase()){
            case 'TEXT':
                type = aaui036_text;
                break;
            case 'PASSWORD':
                type = aaui036_password;
                break;
            case 'RADIO':
                type = aaui036_radio;
                break;
            case 'CHECKBOX':
                type = aaui036_checkbox;
                break;
            default:
                break;
        }
    } else if (element.tagName.toUpperCase() == 'TEXTAREA') {
        type = aaui036_textarea;
    } else if (element.tagName.toUpperCase() == 'SELECT') {
        type = aaui036_select;
    }

    return type;
}

/**
 * 入力されている日付を返却する。
 * @param year  年要素
 * @param month 月要素
 * @param day   日要素
 * @return date 入力されている日付
 */
function getInputDate(year, month, day) {
    var strYear = '';
    var strMonth = '';
    var strDay = '';

    strYear = getElementValue(year);
    strMonth = getElementValue(month);
    strDay = getElementValue(day);

    var date = new Date(strYear, strMonth - 1, strDay);

    return date;
}

/**
 * 要素のvalueを取得する。
 * @param element 要素
 * @return value  value値
 */
function getElementValue(element) {
    var value = '';

    if (element.tagName.toUpperCase() == 'INPUT') {
        switch(element.type.toUpperCase()){
            case 'TEXT':
            case 'PASSWORD':
            case 'RADIO':
            case 'CHECKBOX':
                value = element.value;
                break;
            default:
                break;
        }
    } else if (element.tagName.toUpperCase() == 'TEXTAREA') {
        value = element.value;
    } else if (element.tagName.toUpperCase() == 'SELECT') {
        var options = element.options;
        value = options.item(element.selectedIndex).value;
    }

    return value;
}

/**
 * 要素の表示状態を判定する。
 * @param element 要素
 * @return boolean true:表示、false:非表示
 */
function isVisibleCheck(element) {
    var result = true;
    if (element.style.display.toUpperCase() == 'NONE') {
        result = false;
    } else if (element.style.visibility.toUpperCase() == 'HIDDEN') {
        result = false;
    } else if (element.tagName.toUpperCase() == 'INPUT' &&
        element.type.toUpperCase() == 'HIDDEN') {
        result = false;
    }
    return result;
}

/**
 * 要素の値が空文字か判定する。
 * @param element 要素
 * @return boolean true:空文字以外、false:空文字
 */
function isNullCheck(element) {
    var result = true;
    if (getElementValue(element) == '') {
        result = false;
    }
    return result;
}
/**
 * ファイル名   aaui037.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物   フォーム送信前チェック機能
 *          フォーム送信前チェック初期化機能
 *          フォーム送信前チェック処理機能
 *
 * 修正履歴
 * 2013.07.12 NTTD 平貴寛 次世代個人IB開発 Phase2
 * 2014.03.28 NTTD 趙 次世代個人IB開発 Phase3
 * 
 */

/** 初期化パラメータキー（フィールドID） */
var aaui037_keyParamElement = 'element';
/** 初期化パラメータキー（チェック種別） */
var aaui037_keyParamValidationtype = 'validationType';
/** 初期化パラメータキー（エラーメッセージ） */
var aaui037_keyParamFailuremsg = 'failureMsg';
/** 初期化パラメータキー（トリガ） */
var aaui037_keyParamTrigger = 'trigger';

/** チェック種別（意思確認チェックボックスチェック） */
var aaui037_important = '1';
/** チェック種別（契約締結前交付書面エリアチェック） */
var aaui037_contract = '2';

/** チェック種別の最小値 */
var aaui037_minCheckType = 1;
/** チェック種別の最大値 */
var aaui037_maxCheckType = 2;
/** 画面要素（チェックボックス    ） */
var aaui037_checkbox = 1;
/** 画面要素（ブロック要素） */
var aaui037_div = 2;

/** 拡張要素ID（非表示要素） */
var aaui037_expendElement = 'expendElement';

/** 標準エラーメッセージ（意思確認チェックボックスチェック） */
var aaui037_errMsgImportant = '未入力のチェック項目があります。<br>内容に相違がなければチェックして下さい。<br><br>理由コードはA06です。';
/** 標準エラーメッセージ（契約締結前交付書面エリアチェック） */
var aaui037_errMsgContract = '契約締結前交付書面確認後、次の画面へ遷移が可能になります。<br>契約締結前交付書面を選択して内容をご確認下さい。<br><br>理由コードはA06です。';

var aaui037_preSubmitValidate = [];


/** 拡張要素Seq(複数要素用) */
var aaui037_LinkTagIdSeq = 0;
/** 拡張要素リスト(複数要素用) */
var aaui037_linkElementList = [];

/**
 * フォーム送信前チェックの初期化（インスタンス生成、validate追加)を行う。
 * @param initParams 初期化パラメータ連想配列
 * @return なし
 */
function initPreSubmitValidate(initParams) {
    // パラメータ配列の評価を実施する
    for (var i = 0; i < initParams.length; i++) {

        // 必須パラメータが設定されているかチェックする
        if (aaui037_keyParamElement in initParams[i] &&
            aaui037_keyParamTrigger in initParams[i] &&
            aaui037_keyParamValidationtype in initParams[i]) {
            // パラメータ値がnull、空文字の場合はNG
            if (initParams[i][aaui037_keyParamElement] === null ||
                initParams[i][aaui037_keyParamElement] === '' ||
                initParams[i][aaui037_keyParamTrigger] === null ||
                initParams[i][aaui037_keyParamTrigger] === '' ||
                initParams[i][aaui037_keyParamValidationtype] === null ||
                initParams[i][aaui037_keyParamValidationtype] === '') {
                continue;
            }

            // 要素の存在チェック
            var elementId = initParams[i][aaui037_keyParamElement];
            var check_element = null;
            switch (initParams[i][aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    check_element = document.getElementById(elementId);
                    break;
                case aaui037_contract:
                    check_element =  $('#' + elementId);
                    break;
            }
            if (!check_element) {
                continue;
            }

            // トリガーの存在チェック
            var check_trigger = document.getElementById(initParams[i][aaui037_keyParamTrigger]);
            if (!check_trigger) {
                continue;
            }

            // チェック種別が定義しているもの以外が設定されていた場合はNG
            var validateTypeNum = Number(initParams[i][aaui037_keyParamValidationtype]);
            if (isNaN(validateTypeNum) || 
                validateTypeNum != Math.floor(validateTypeNum)||
                validateTypeNum > aaui037_maxCheckType || 
                validateTypeNum < aaui037_minCheckType) {
                continue;
            }

            // エラーメッセージが設定されていない場合はデフォルトメッセージを設定する。
            if (!initParams[i][aaui037_keyParamFailuremsg]) {
                var errMsg = '';
                switch (initParams[i][aaui037_keyParamValidationtype]) {
                    case aaui037_important:
                        errMsg = aaui037_errMsgImportant;
                        break;
                    case aaui037_contract:
                        errMsg = aaui037_errMsgContract;
                        break;
                }
                initParams[i][aaui037_keyParamFailuremsg] = errMsg;
            }

            var elementForm = null;
            switch (initParams[i][aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    // 意思確認チェックボックス
                    elementForm = check_element.form;
                    break;
                case aaui037_contract:
                    // 契約締結前交付書面エリアチェック
                	elementForm = check_element.closest('form');
                    elementForm.id = elementForm.attr('id');
                    break;
            }
            if(elementForm){
                LiveValidationForm.getInstance(elementForm, initParams[i][aaui037_keyParamTrigger]);
                // チェック内容を保持
                aaui037_preSubmitValidate.push(initParams[i]);
            }
        } else {
            continue;
        }
    }
}



/**
 * <A>タグに対するフォーム送信前チェックの初期化（インスタンス生成、validate追加)を行う。
 * @param initParams 初期化パラメータ連想配列
 * @return なし
 */
function initPreSubmitValidateLink(initParams) {
    // パラメータ配列の評価を実施する
    for (var i = 0; i < initParams.length; i++) {
        
        // 必須パラメータが設定されているかチェックする
        if (aaui037_keyParamElement in initParams[i] &&
            aaui037_keyParamTrigger in initParams[i] &&
            aaui037_keyParamValidationtype in initParams[i]) {
            // パラメータ値がnull、空文字の場合はNG
            if (initParams[i][aaui037_keyParamElement] === null ||
                initParams[i][aaui037_keyParamElement] === '' ||
                initParams[i][aaui037_keyParamTrigger] === null ||
                initParams[i][aaui037_keyParamTrigger] === '' ||
                initParams[i][aaui037_keyParamValidationtype] === null ||
                initParams[i][aaui037_keyParamValidationtype] === '') {
                continue;
            }
            
            // link要素の存在チェック
            var linkId = initParams[i][aaui037_keyParamElement];
            var check_link = null;
            switch (initParams[i][aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    check_link = document.getElementById(linkId);
                    break;
                case aaui037_contract:
                    check_link =  $('#' + linkId);
                    break;
            }
            if (!check_link) {
                continue;
            }
            
            var elementId = aaui037_expendElement + "_" + aaui037_LinkTagIdSeq++;
            initParams[i][aaui037_keyParamElement] = elementId;
            
            aaui037_linkElementList.push([linkId, elementId]);
            
            
            $("#" + linkId).click(function(){
              setComfirmedLinkElement($(this).attr('id'), true);
            } );
            
            createCheckboxElement(linkId, elementId, false);
            
            // 要素の存在チェック
            var check_element = null;
            switch (initParams[i][aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    check_element = document.getElementById(elementId);
                    break;
                case aaui037_contract:
                    check_element =  $('#' + elementId);
                    break;
            }
            if (!check_element) {
                continue;
            }
            
            // トリガーの存在チェック
            var check_trigger = document.getElementById(initParams[i][aaui037_keyParamTrigger]);
            if (!check_trigger) {
                continue;
            }
            
            // チェック種別が定義しているもの以外が設定されていた場合はNG
            var validateTypeNum = Number(initParams[i][aaui037_keyParamValidationtype]);
            if (isNaN(validateTypeNum) || 
                validateTypeNum != Math.floor(validateTypeNum)||
                validateTypeNum > aaui037_maxCheckType || 
                validateTypeNum < aaui037_minCheckType) {
                continue;
            }
            
            // エラーメッセージが設定されていない場合はデフォルトメッセージを設定する。
            if (!initParams[i][aaui037_keyParamFailuremsg]) {
                var errMsg = '';
                switch (initParams[i][aaui037_keyParamValidationtype]) {
                    case aaui037_important:
                        errMsg = aaui037_errMsgImportant;
                        break;
                    case aaui037_contract:
                        errMsg = aaui037_errMsgContract;
                        break;
                }
                initParams[i][aaui037_keyParamFailuremsg] = errMsg;
            }
            
            var elementForm = null;
            switch (initParams[i][aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    // 意思確認チェックボックス
                    elementForm = check_element.form;
                    break;
                case aaui037_contract:
                    // 契約締結前交付書面エリアチェック
                	elementForm = check_element.closest('form');
                    elementForm.id = elementForm.attr('id');
                    break;
            }
            
            if(elementForm){
                LiveValidationForm.getInstance(elementForm, initParams[i][aaui037_keyParamTrigger]);
                // チェック内容を保持
                aaui037_preSubmitValidate.push(initParams[i]);
            }
        } else {
            continue;
        }
    }
}



/**
 * フォーム送信前チェックの実行契機判定。
 * @param form フォーム
 * @param trigger トリガーID
 * @return boolean チェック結果
 */
function execPreSubmitValidate(form, trigger) {
    var checkResult = true;
    for(var i = 0; i < aaui037_preSubmitValidate.length; i++){
        var cValid = aaui037_preSubmitValidate[i];
        var elementId = cValid[aaui037_keyParamElement];
        var element = null;
        switch (cValid[aaui037_keyParamValidationtype]) {
            case aaui037_important:
                // 意思確認チェックボックス
                element = document.getElementById(elementId);
                break;
            case aaui037_contract:
                // 契約締結前交付書面エリアチェック
                element = $('#' + elementId);
                break;
        }
        if (element) {
            switch (cValid[aaui037_keyParamValidationtype]) {
                case aaui037_important:
                    // 意思確認チェックボックス
                    var elementForm = element.form;
                    if(elementForm.id == form.id && 
                        cValid[aaui037_keyParamTrigger] == trigger){
                        checkResult = validateImportant(cValid);
                    }
                    break;
                case aaui037_contract:
                    // 契約締結前交付書面エリアチェック
                    var elementForm = element.closest('form');
                    if(elementForm.attr('id') == form.id && 
                        cValid[aaui037_keyParamTrigger] == trigger){
                        checkResult = validateContract(cValid);
                    }
                    break;
            }
            if (!checkResult) {
                var errMsg = document.getElementById('svrErr');
                if (errMsg) {
                    errMsg.innerHTML = cValid[aaui037_keyParamFailuremsg];
                } else {
                    // クラスにform-error-blockA01を持つdiv要素を作成
                    var eleDiv = document.createElement('div');
                    eleDiv.id = 'aaui_clientCheckErrDiv';
                    
                    // クラスにform-error-listA01を持つul要素を作成
                    var eleUl = document.createElement('ul');
                    eleUl.id = 'aaui_clientCheckErrUl';
                    
                    // li要素を作成
                    var eleLi = document.createElement('li');
                    eleLi.id = 'aaui_clientCheckErrLi';
                    
                    // idにsvrErrを持つspan要素を作成
                    var eleSpan = document.createElement('span');
                    eleSpan.id = 'svrErr';
                    eleSpan.innerHTML = cValid[aaui037_keyParamFailuremsg];
                    
                    eleLi.appendChild(eleSpan);
                    eleUl.appendChild(eleLi);
                    eleDiv.appendChild(eleUl);
                    $('#aaui_clientCheckErrId').after(eleDiv);
                    $('#aaui_clientCheckErrDiv').addClass('form-error-blockA01');
                    $('#aaui_clientCheckErrUl').addClass('form-error-listA01');
                    $('#body-pagecontent').css('visibility', 'hidden');
                    $('#body-pagecontent').css('visibility', 'visible');
                }
                
                var ua = navigator.userAgent.toLowerCase();
                if (ua.indexOf('firefox') != -1 || ua.indexOf('ie') != -1 || ua.indexOf('trident') != -1) {
                    $('html').scrollTop(0);
                } else {
                    $('body').scrollTop(0);
                }
                
                break;
            }
        }
    }
    return checkResult;
}



/**
 * 意思確認チェックボックスチェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateImportant(validate) {
    var result = true;
    var elementId = validate[aaui037_keyParamElement];
    var element = document.getElementById(elementId);

    // 非表示の場合、チェックを行わない。
    if (element.style.visibility.toUpperCase() == 'HIDDEN') {
        return true;
    }else if (element.style.display.toUpperCase() == 'NONE') {
        return true;
    }

    if (!element.checked) {
        result = false;
    }
    return result;
}



/**
 * 契約締結前交付書面エリアチェックのチェックを実行する。
 * @param validate 初期化パラメータ
 * @return result チェック結果
 */
function validateContract(validate) {
    var result = true;
    var elementId = validate[aaui037_keyParamElement];
    var element = $("#" + elementId);            
    if(element.css('display').toUpperCase() == 'NONE'){
        result = false;
    }
    return result;
}



/**
 * リンクIDの拡張要素を作成する。
 * @param linkId リンクID
 * @param checkboxId チェックボックスID
 * @param cheked cheked値
 * @return なし
 */
function createCheckboxElement(linkId, element, checked) {
    // 拡張要素のspanを作成
    var span = $("<span />").css("visibility", "hidden")
                            .css("position", "absolute");
    // 拡張要素を作成
    if(checked == true){
      checkbox = $("<input />").attr("type", "checkbox")
                               .attr("id", element)
                               .prop("checked", true);
    } else {
      checkbox = $("<input />").attr("type", "checkbox")
                               .attr("id", element)
                               .prop("checked", false);
    }
    
    span.append(checkbox);
    
    $('#' + linkId).after(span);
}



/**
 * リンク要素に対して確認有無をセットする。
 * @param element 要素ID
 * @param checked チェック有無
 * @return なし
 */
function setComfirmedLinkElement(element, checked) {
    // 選択した拡張要素にBoolean値を設定する。
    for (var i = 0; i < aaui037_linkElementList.length; i++) {
        if(aaui037_linkElementList[i][0] == element){
          $('#' + aaui037_linkElementList[i][1]).prop("checked", checked );
        }
    }
    
}

/*
 * ファイル名    aaui038.js
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  顧客カード画面表示制御機能
 * 
 * 修正履歴
 * 2013.8.6   TDC 石田 新規作成
 * 2013.10.28 TDC 石田 顧客カード情報確認表示の未登録、登録済のレイアウトブロック名変更対応
 * 2013.12.03 TDC 石田 顧客カード情報確認表示が非表示の場合のレイアウト修正
 */


/**
 * 顧客カード表示切替変数
 * 次の3つの変数は、JSP側から値がセットされる
 */
/** 顧客カード登録済フラグ（'true':登録済、'false':未登録）*/
var isRegist = 'true';

/** 未登録時画面表示フラグ（'form':入力表示、'confirm':確認表示）*/
var customerCardInitialDisplay = 'form';

/** 登録済画面表示フラグ（'form':入力表示、'confirm':確認表示）*/
var customerCardRegistDisplay = 'confirm';


/**
 * 顧客カード初期表示処理
 * onloadにて処理を実行させ、初期表示を制御する。
 * javascriptオフの場合は、この処理が走らないため、画面は入力表示となる。
 */
function initCustomerCard(){
  // 顧客カード未登録
  if(isRegist == "false") {
    if(customerCardInitialDisplay == "confirm") {
      setCustomerCard();
    }
  } else {
  // 顧客カード登録済
    if(customerCardRegistDisplay == "confirm") {
      setCustomerCard();
    }
  }
}


/**
 * 顧客カード画面確認表示初期表示設定
 * 初期画面が確認表示で表示される。
 * @param  なし
 * @return なし
 */
function setCustomerCard(){
  // 変数宣言
  var index = 1;
  var param = "";
  var ccLayout = "ccLayout_";
  var openBlk = "confirmBlk-";
  var closeBlk = "formBlk-";
  var closeTbl = "formTbl-";
  var link = "linkON-";

  var openTbl = "confirmTbl";
  // 顧客カードが未登録、登録済か判定
  if(isRegist == "false") {
    openTbl = openTbl + "_initial-";
  } else {
    openTbl = openTbl + "_regist-";
  }

  // 顧客カード切替リンクの表示
  param = ccLayout + link + index;
  while(document.getElementById(param)){
    linkInit(index);
    index ++;
    param = ccLayout + link + index;
  }
  
  // 顧客カードカテゴリ見出しの表示
  index = 1;
  param = ccLayout + openBlk + index;
  while(document.getElementById(param)){
    displayOpen(param);
    index ++;
    param = ccLayout + openBlk + index;
  }

  // 顧客カード確認表示の表示
  index = 1;
  param = ccLayout + openTbl + index;
  if(document.getElementById(param)) {
    while(document.getElementById(param)){
      displayOpen(param);
      index ++;
      param = ccLayout + openTbl + index;
    }
  } else {
    // 顧客カード確認表示が非表示の場合
    param = ccLayout + openBlk + index;
    while(document.getElementById(param)){
      var beforeClass = document.getElementById(param).className;
      var afterClass = beforeClass + " customerCard-confirmTbl-none";
      document.getElementById(param).className = afterClass;
      index ++;
      param = ccLayout + openBlk + index;
    }
  }

  // 顧客カード入力表示の非表示
  index = 1;
  param = ccLayout + closeBlk + index;
  while(document.getElementById(param)){
    displayClose(param);
    index ++;
    param = ccLayout + closeBlk + index;
  }
  
  index = 1;
  param = ccLayout + closeTbl + index;
  while(document.getElementById(param)){
    displayClose(param);
    index ++;
    param = ccLayout + closeTbl + index;
  }
}


/**
 * 顧客カード切替リンク初期表示
 * 初期画面の顧客カード切替リンクを表示
 * @param  index(カテゴリ番号)
 * @return なし
 */
function linkInit(index){
  var linkON = "ccLayout_linkON-" + index;
  var linkOFF = "ccLayout_linkOFF-" + index;

  displayOpen(linkON);
  displayClose(linkOFF);
}


/**
 * 顧客カード情報変更リンク切替処理
 * 顧客カード情報を変更すると、リンクをラベル表示に切り替える。
 * @param  index(カテゴリ番号)
 * @return なし
 */
function linkChange(index){
  var linkON = "ccLayout_linkON-" + index;
  var linkOFF = "ccLayout_linkOFF-" + index;

  displayOpen(linkOFF);
  displayClose(linkON);
}


/**
 * 顧客カード情報画面表示切替処理
 * 顧客カード情報変更リンクにより入力表示、確認表示を切り替える
 * @param  index(カテゴリ番号)
 * @return なし
 */
function showhide(index){
  // 変数宣言
  var confirmBlk ="ccLayout_confirmBlk-" + index;
  var formBlk = "ccLayout_formBlk-" + index;
  var formTbl = "ccLayout_formTbl-" + index;
  var display_status = document.getElementById(formBlk).className;
  
  var confirmTbl = "ccLayout_confirmTbl";
  // 顧客カード未登録の場合、入力表示か確認表示かを確認
  if(isRegist == "false") {
    confirmTbl = confirmTbl + "_initial-" + index;
  } else {
    confirmTbl = confirmTbl + "_regist-" + index;
  }

  
  if(display_status.indexOf("display-none") != "-1"){
    displayOpen(formBlk);
    displayOpen(formTbl);
    displayClose(confirmBlk);
    displayClose(confirmTbl);
  } else {
    displayClose(formBlk);
    displayClose(formTbl);
    displayOpen(confirmBlk);
    displayOpen(confirmTbl);
  }
}

/**
 * 指定された領域を非表示にする
 * @param  target(非表示対象のブロック)
 * @return なし
 */
function displayClose(target){
    if(document.getElementById(target)) {
      var beforeClass = document.getElementById(target).className;
      var afterClass = beforeClass + " display-none";
      document.getElementById(target).className = afterClass;
    }
} 


/**
 * 指定された領域を表示にする
 * @param  target(表示対象のブロック)
 * @return なし
 */
function displayOpen(target){
    if(document.getElementById(target)) {
      var beforeClass = document.getElementById(target).className;
      var afterClass = beforeClass.replace("display-none", "");
      document.getElementById(target).className = afterClass;
    } else if(target.indexOf("ccLayout_confirmTbl") != "-1" ) {
      target = "ccLayout_confirmBlk" + target.slice(-2);
      var beforeClass = document.getElementById(target).className;
      var afterClass = beforeClass + " customerCard-confirmTbl-none";
      document.getElementById(target).className = afterClass;
    }
}
/**
 * ファイル名        aaui040.js
 * 開発システム       anserParaSOL
 * 著作権  Copyright (C) 2013 NTT DATA
 * 収容物  日付の歴日チェック機能
 *
 * 修正履歴
 * 2013/08/06 NTTD 河村聡一郎　次世代個人IB開発
 * 2019.02.05 平山 裕也 AnserParaSOL 仕様変更対応(PSL仕変-業務開発-2018-063)<br>
 * 2021.07.05 大津 麻祐菜 AnserParaSOL 第14.0版 R001_e-KYC機能<br>
 */
/**
 * 日付チェック機能のコンストラクタ<br>
 * 日付チェックの対象とする入力フォームを設定し、エラーが検出されたときのエラー表示方法を設定する。
 *
 * @param initParams パラメータオブジェクトの配列。次のプロパティを持つ。<br>
 *                gengoId: 元号のプルダウンのID<br>
 *                gengoValues: 元号と、元号のプルダウンの値の対応を表す配列。明治、大正、昭和、平成、令和の順。<br>
 *                yearId: （必須）年のテキストボックスのID<br>
 *                monthId: （必須）月のプルダウンのID<br>
 *                dayId: （必須）日のプルダウンのID<br>
 *                errorId: エラーメッセージ表示領域のID<br>
 *                emptyErrorMessage: エラーメッセージ（未入力）<br>
 *                errorMessage: エラーメッセージ<br>
 *                inputOptionally: 任意入力とするときtrueや1
 */

/** スマートフォン（新デザイン）表示判定 */
var sp_aaui001_newDesignLayoutFlg = false;


// 歴日チェック (aaui040)用の名前空間
var aaui040 = {
    // 各年号のID
    MEIJI: 0,
    TAISHO: 1,
    SHOWA: 2,
    HEISEI: 3,
    REIWA: 4,

    // 各年号の開始日
    BEGIN: {
        meiji: new Date(1868, 1 - 1, 25),
        taisho: new Date(1912, 7 - 1, 30),
        showa: new Date(1926, 12 - 1, 25),
        heisei: new Date(1989, 1 - 1, 8),
        reiwa: new Date(2019, 5 - 1, 1)
    },

    // 受け付ける最小の年
    MIN_YEAR: 1900,
    // 受け付ける最大の年
    MAX_YEAR: 9999,

    // 入力フォーム全体のエラーメッセージ
    // 未入力表示の要素ID
    GLOBAL_ERROR_FIELD_EMPTY: 'div#input-warning-presence',
    // 誤入力表示の要素ID
    GLOBAL_ERROR_FIELD_INVALID: 'div#input-warning-exceptPresence',
    // 上記2要素にはじめから設定されているクラス名
    GLOBAL_ERROR_CLASS_DEFAULT: 'input-warning',
    // エラーがあったとき上記2要素に設定されるクラス名
    GLOBAL_ERROR_CLASS_ERROR: 'form-error-blockA01',

    // 不正な入力項目に設定するクラス。LiveValidation と共通
    INVALID_FIELD_CLASS: 'LV_invalid_field',

    // エラーメッセージに設定するクラス。LiveValidation と共通
    INVALID_CLASS: 'LV_invalid',

    // チェック結果の文章に設定するクラス。LiveValidation と共通
    MESSAGE_CLASS: 'LV_validation_message',

    // デフォルトのエラーメッセージ（未入力）
    DEFAULT_ERROR_MESSAGE_EMPTY: '必ず入力して下さい。',

    // デフォルトのエラーメッセージ（入力誤り・年月日）
    DEFAULT_ERROR_MESSAGE_INVALID: '日付を正しく入力して下さい。',

    // デフォルトのエラーメッセージ（入力誤り・年月）
    DEFAULT_ERROR_MESSAGE_INVALID_YM: '年月を正しく入力して下さい。',

    // 入力チェックの結果
    CHECK_RESULT: {
        // 入力任意で全て未入力（エラーではない）
        OPTIONAL_EMPTY: 0,
        // 入力必須で全て未入力（エラー）
        REQUIRED_EMPTY: 1,
        // 一部のみ入力されている（クリック時はエラー、入力途中ではエラーではない）
        FILLED_PARTLY: 2,
        // 全て入力されているが未検証
        FILLED_UNCHECKED: 3,
        // 全て入力されているが正しくない値がある（エラー）
        FILLED_NG: 4,
        // 全て正しく入力されている（OK）
        FILLED_OK: 5
    }
};

// 各年号の終了日(汎用受付)
aaui040.END = {
    meiji: aaui040.BEGIN.taisho,
    taisho: aaui040.BEGIN.showa,
    showa: aaui040.BEGIN.heisei,
    heisei: new Date(2019, 4 - 1, 30)
};
//各年号の終了日
aaui040.END02 = {
    meiji: aaui040.BEGIN.taisho,
    taisho: aaui040.BEGIN.showa,
    showa: new Date(1989, 1 - 1, 7),
    heisei: new Date(2019, 4 - 1, 30)
};

/**
 * @param initParams 初期化用のオブジェクト。プロパティは次の通り指定する。<br>
 *                gengoId 元号プルダウンのID<br>
 *                gengoValues 元号・値の対応配列。<br>
 *                [null, null, "01", "02"]のように明治・大正・昭和・平成、令和の順に指定する<br>
 *                yearId 年テキストボックスのID<br>
 *                monthId 月プルダウンのID<br>
 *                dayId 日プルダウンのID<br>
 *                errorId エラーメッセージ表示領域のID<br>
 *                errorMessageEmpty エラーメッセージ（未入力）<br>
 *                errorMessageInvalid エラーメッセージ（入力誤り）<br>
 *                inputOptionally 入力任意のときtrueや0以外の数値, 必須の時falseや0
 */

function DateChecker(initParams) {

    // 設定プロパティの取得(汎用受付)
    var gengoId = initParams.gengoId,
        gengoValues = initParams.gengoValues,
        yearId = initParams.yearId,
        monthId = initParams.monthId,
        dayId = initParams.dayId,
        errorId = initParams.errorId,
        trigger = initParams.trigger,
        oldOnclick,
        args,
        i,
        triggerElement;

    // 必須フィールドが存在しないとき、チェックを実施しない
    if (($("#" + yearId).length === 0) ||
        ($("#" + monthId).length === 0) ||
        ($("#" + trigger).length === 0)) {
        return;
    }

    args = {
        yearId: yearId,
        monthId: monthId,
        inputRequired: !(initParams.inputOptionally) || false,
        inputFieldIdArray: [yearId, monthId]
    };

    args.isWithoutDay = $("#" + dayId).length === 0;
    if (!args.isWithoutDay) {
        // 年月日をチェックするとき
        args.dayId = dayId;
        args.inputFieldIdArray.push(dayId);
    }

    args.isJapaneseCalendar = $("#" + gengoId).length && gengoValues;
    if (args.isJapaneseCalendar) {
        // 和暦としてチェック
        args.gengoId = gengoId;
        args.gengoValues = gengoValues;
        args.inputFieldIdArray.push(gengoId);
        args.inputFieldIdArray.push(gengoValues);
    }

    if ($("#" + errorId).length) {
        args.errorId = errorId;
        // エラー表示要素が設定されているが、エラーメッセージが指定されていないときはデフォルトメッセージを使用する
        args.errorMessageEmpty = initParams.errorMessageEmpty ||
            aaui040.DEFAULT_ERROR_MESSAGE_EMPTY;
            
        // 年月日と年月によってエラーメッセージを切り替える
        if (initParams.errorMessageInvalid) {
            args.errorMessageInvalid = initParams.errorMessageInvalid;
        } else if (!args.isWithoutDay) {
            args.errorMessageInvalid = aaui040.DEFAULT_ERROR_MESSAGE_INVALID;
        } else {
            args.errorMessageInvalid = aaui040.DEFAULT_ERROR_MESSAGE_INVALID_YM;
        }
    }

    if (initParams.checkOnBlur) {
        // フォーカスアウト時の入力チェックの設定
        for (i = 0; i < args.inputFieldIdArray.length; ++i) {
            $("#" + args.inputFieldIdArray[i]).blur(
                function(){ aaui040.checkDate(args, true); }
                );
        }
    }

    // 以下、ボタンクリック時の入力チェックの設定
    triggerElement = document.getElementById(trigger);
    if (!triggerElement.dateCheckerEnabled) {
        // onclickイベントの先頭にグローバルエラー消去を入れる
        // なお、jQueryのイベントハンドラはonclickの後に実行される

        oldOnclick = triggerElement.onclick;
        triggerElement.dateCheckerEnabled = true;

        if (!oldOnclick) {
            triggerElement.onclick = aaui040.clearGlobalError;
        } else {

            triggerElement.onclick = function () {
                aaui040.clearGlobalError();
                return oldOnclick.call(this);
            };
        }
    }

    $("#" + trigger).click(
        function () {
            var originalEmptyError = ($(aaui040.GLOBAL_ERROR_FIELD_EMPTY).css(
                'display') !== 'none'),
                originalInvalidError = ($(
                    aaui040.GLOBAL_ERROR_FIELD_INVALID).css(
                    'display') !== 'none'),
                result = aaui040.checkDate(args, false),
                checkPassed = (result === aaui040.CHECK_RESULT.FILLED_OK) ||
                    (result === aaui040.CHECK_RESULT.OPTIONAL_EMPTY) || false;

            if (!checkPassed || originalEmptyError || originalInvalidError) {
                // 他の入力チェックで入力不備が検出されている（既にスクロールしている）場合、
                // 常にスクロール
                aaui040.scrollToTop();
            }

			// IE6-8対応
			ua = navigator.userAgent.toLowerCase();
			if (ua.match('^((?!msie).)*msie [6-8]\.')) {
				var ev = window.event;
				if (!checkPassed) {
					ev.returnValue = false;

				} else {
					if (ev.returnValue) {
						ev.returnValue = true;

					}
				}

			} else {
				return checkPassed;

			}

        });
}

function DateChecker02(initParams) {

    // 設定プロパティの取得
    var gengoId = initParams.gengoId,
        gengoValues = initParams.gengoValues,
        yearId = initParams.yearId,
        monthId = initParams.monthId,
        dayId = initParams.dayId,
        errorId = initParams.errorId,
        trigger = initParams.trigger,
        oldOnclick,
        args,
        i,
        triggerElement;

    // 必須フィールドが存在しないとき、チェックを実施しない
    if (($("#" + yearId).length === 0) ||
        ($("#" + monthId).length === 0) ||
        ($("#" + trigger).length === 0)) {
        return;
    }

    args = {
        yearId: yearId,
        monthId: monthId,
        inputRequired: !(initParams.inputOptionally) || false,
        inputFieldIdArray: [yearId, monthId]
    };

    args.isWithoutDay = $("#" + dayId).length === 0;
    if (!args.isWithoutDay) {
        // 年月日をチェックするとき
        args.dayId = dayId;
        args.inputFieldIdArray.push(dayId);
    }

    args.isJapaneseCalendar = $("#" + gengoId).length && gengoValues;
    if (args.isJapaneseCalendar) {
        // 和暦としてチェック
        args.gengoId = gengoId;
        args.gengoValues = gengoValues;
        args.inputFieldIdArray.push(gengoId);
        args.inputFieldIdArray.push(gengoValues);
    }

    if ($("#" + errorId).length) {
        args.errorId = errorId;
        // エラー表示要素が設定されているが、エラーメッセージが指定されていないときはデフォルトメッセージを使用する
        args.errorMessageEmpty = initParams.errorMessageEmpty ||
            aaui040.DEFAULT_ERROR_MESSAGE_EMPTY;
            
        // 年月日と年月によってエラーメッセージを切り替える
        if (initParams.errorMessageInvalid) {
            args.errorMessageInvalid = initParams.errorMessageInvalid;
        } else if (!args.isWithoutDay) {
            args.errorMessageInvalid = aaui040.DEFAULT_ERROR_MESSAGE_INVALID;
        } else {
            args.errorMessageInvalid = aaui040.DEFAULT_ERROR_MESSAGE_INVALID_YM;
        }
    }

    if (initParams.checkOnBlur) {
        // フォーカスアウト時の入力チェックの設定
        for (i = 0; i < args.inputFieldIdArray.length; ++i) {
            $("#" + args.inputFieldIdArray[i]).blur(
                function(){ aaui040.checkDate02(args, true); }
                );
        }
    }

    // 以下、ボタンクリック時の入力チェックの設定
    triggerElement = document.getElementById(trigger);
    if (!triggerElement.dateCheckerEnabled) {
        // onclickイベントの先頭にグローバルエラー消去を入れる
        // なお、jQueryのイベントハンドラはonclickの後に実行される

        oldOnclick = triggerElement.onclick;
        triggerElement.dateCheckerEnabled = true;

        if (!oldOnclick) {
            triggerElement.onclick = aaui040.clearGlobalError;
        } else {

            triggerElement.onclick = function () {
                aaui040.clearGlobalError();
                return oldOnclick.call(this);
            };
        }
    }

    $("#" + trigger).click(
        function () {
            var originalEmptyError = ($(aaui040.GLOBAL_ERROR_FIELD_EMPTY).css(
                'display') !== 'none'),
                originalInvalidError = ($(
                    aaui040.GLOBAL_ERROR_FIELD_INVALID).css(
                    'display') !== 'none'),
                result = aaui040.checkDate02(args, false),
                checkPassed = (result === aaui040.CHECK_RESULT.FILLED_OK) ||
                    (result === aaui040.CHECK_RESULT.OPTIONAL_EMPTY) || false;

            if (!checkPassed || originalEmptyError || originalInvalidError) {
                // 他の入力チェックで入力不備が検出されている（既にスクロールしている）場合、
                // 常にスクロール
                aaui040.scrollToTop();
            }

			// IE6-8対応
			ua = navigator.userAgent.toLowerCase();
			if (ua.match('^((?!msie).)*msie [6-8]\.')) {
				var ev = window.event;
				if (!checkPassed) {
					ev.returnValue = false;

				} else {
					if (ev.returnValue) {
						ev.returnValue = true;

					}
				}

			} else {
				return checkPassed;

			}

        });
}

/**
 * エラーが検出されたときにページ最上部にスクロールする
 */
aaui040.scrollToTop = function () {
    var presenceY, exceptPresenceY, position,
        emptyError, invalidError;
    $(aaui040.GLOBAL_ERROR_CLASS_ERROR).not(
        aaui040.GLOBAL_ERROR_FIELD_EMPTY + ',' +
        aaui040.GLOBAL_ERROR_FIELD_INVALID).remove();
    emptyError = $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).css(
        'display') !== 'none';
    invalidError = $(aaui040.GLOBAL_ERROR_FIELD_INVALID).css(
        'display') !== 'none';

    presenceY = $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).position().top;
    exceptPresenceY = $(aaui040.GLOBAL_ERROR_FIELD_INVALID).position().top;

    if (emptyError && invalidError) {
        position = (exceptPresenceY < presenceY) ? exceptPresenceY : presenceY;
    } else if (emptyError) {
        position = presenceY;
    } else {
        position = exceptPresenceY;
    }

    $('html,body').scrollTop(position);
};

/**
 * グローバルエラー領域を消去する
 * 他の同様の機能より先に実行する必要がある
 */
aaui040.clearGlobalError = function () {

    $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).addClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
    $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).removeClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
    $(aaui040.GLOBAL_ERROR_FIELD_INVALID).addClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
    $(aaui040.GLOBAL_ERROR_FIELD_INVALID).removeClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
};


/**
 * 日付チェック(汎用受付)
 *
 * @param args 初期化時に取得した本機能のパラメータ
 * @param isOnBlur 入力フィールドのフォーカスアウトによって呼び出されたか否か
 *
 * @return {Integer}  aaui040.CHECK_RESULT のいずれかを戻す
 */
aaui040.checkDate = function (args, isOnBlur) {

    /**
     * エラー表示解除
     *
     */

    function clearError() {
        var i, $errorField = $('#' + args.errorId);

        // エラーメッセージの削除
        $errorField.find('span').remove();

        // エラー表示クラスの削除
        for (i = 0; i < args.inputFieldIdArray.length; ++i) {
            $('#' + args.inputFieldIdArray[i]).removeClass(aaui040.INVALID_FIELD_CLASS);
            if (sp_aaui001_newDesignLayoutFlg == true) $('#' + args.inputFieldIdArray[i]).parent().removeClass(aaui040.INVALID_FIELD_CLASS);

        }
    }

    /**
     * エラー表示
     *
     * @param isEmptyError 表示するエラーが未入力エラーの時true, 入力誤りのときfalse
     * @returns チェック結果のエラーコード
     */

    function showError(isEmptyError) {
        var j, $errorMessageField, $errorField = $('#' + args.errorId),
            errorMessage = isEmptyError ? args.errorMessageEmpty : args.errorMessageInvalid;

        // 一度すべてのエラー表示を解除する
        clearError();

        // グローバルエラー領域のエラー表示
        if (!isOnBlur) {
            if (isEmptyError) {
                $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
                $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
            } else {
                $(aaui040.GLOBAL_ERROR_FIELD_INVALID).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
                $(aaui040.GLOBAL_ERROR_FIELD_INVALID).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
            }
        }

        // エラーメッセージの表示
        $errorMessageField = $('<span>').html(errorMessage).addClass(
            aaui040.INVALID_CLASS).addClass(aaui040.MESSAGE_CLASS);
        $errorField.append($errorMessageField);

        // 入力された欄へのエラークラスの追加
        for (j = 0; j < args.inputFieldIdArray.length; ++j) {
            $('#' + args.inputFieldIdArray[j]).addClass(aaui040.INVALID_FIELD_CLASS);
            if (sp_aaui001_newDesignLayoutFlg == true) $('#' + args.inputFieldIdArray[j]).parent().addClass(aaui040.INVALID_FIELD_CLASS);

        }

        return isEmptyError ? aaui040.CHECK_RESULT.REQUIRED_EMPTY : aaui040.CHECK_RESULT
            .FILLED_NG;
    }

    /**
     * 未入力項目をチェックする
     *
     * @return CHECK_RESULTオブジェクトの入力状態コード
     */

    function checkEmptyFields() {
        var $checkFields = [
            $('#' + args.yearId), $('#' + args.monthId)
        ],
            filledFieldCount = 0,
            i;

        if (!args.isWithoutDay) {
            $checkFields.push($('#' + args.dayId));
        }
        if (args.isJapaneseCalendar) {
            $checkFields.push($('#' + args.gengoId));
        }

        for (i = 0; i < $checkFields.length; ++i) {
            if ($checkFields[i].val().length) {
                ++filledFieldCount;
            }
        }

        if (filledFieldCount === 0) {
            // すべての入力欄が空欄
            if (!isOnBlur && args.inputRequired) {
                return showError(true);
            }
            clearError();
            return aaui040.CHECK_RESULT.OPTIONAL_EMPTY;
        } 
        
        if (filledFieldCount !== $checkFields.length) {
            // 部分的に入力されている
            return aaui040.CHECK_RESULT.FILLED_PARTLY;
        }

        // 全て入力されている
        return aaui040.CHECK_RESULT.FILLED_UNCHECKED;
    }

    /**
     * ダミーの日を取得する
     * @returns {Integer} 元号と月に応じたダミーの日
     */

    function getDummyDay() {
        if (!isJapaneseCalendar) {
            // 西暦のとき
            return 1;
        }
        month = month - 0;
        switch (gengoId) {
        case aaui040.MEIJI:
            // 明治33年1月1日〜明治45年7月30日までを対象とする。
            // したがって1日はすべての月に存在する
            return 1;
        case aaui040.TAISHO:
            // 大正1年7月30日〜大正15年12月25日までを対象とする。
            // 大正1年7月のみ25日が存在しないので例外として扱う。
            if (month === 7) {
                return 30;
            }
            return 25;
        case aaui040.SHOWA:
            // 昭和1年12月25日〜昭和64年1月7日までを対象とする。
            // 昭和1年12月のみ7日が存在しないので例外として扱う。
            if (month === 12) {
                return 25;
            }
            return 7;
        case aaui040.HEISEI:
            // 平成1年1月8日〜平成31年4月30日までを対象とする。
            // したがって8日はすべての月に存在する
            return 8;
        case aaui040.REIWA:
            // 令和1年5月1日〜を対象とする。
            return 1;
        default:
            return undefined;
        }
    }

    /**
     * 和暦を西暦に変換する
     *
     * @param gengoId 元号ID
     * @param year 年（和暦）
     * @return gengoIdが正しい場合、西暦での年数。正しくない場合undefined
     */

    function getChristianYear(gengoId, japaneseYear) {
        switch (gengoId) {
        case aaui040.MEIJI:
            return japaneseYear + aaui040.BEGIN.meiji.getFullYear() - 1;
        case aaui040.TAISHO:
            return japaneseYear + aaui040.BEGIN.taisho.getFullYear() - 1;
        case aaui040.SHOWA:
            return japaneseYear + aaui040.BEGIN.showa.getFullYear() - 1;
        case aaui040.HEISEI:
            return japaneseYear + aaui040.BEGIN.heisei.getFullYear() - 1;
        case aaui040.REIWA:
            return japaneseYear + aaui040.BEGIN.reiwa.getFullYear() - 1;
        }
    }
    /**
     * 元号ごとの日付範囲チェック
     *
     * @param gengoId 元号ID (MEIJI, TAISHO, SHOWA, HEISEI, REIWA)のいずれか
     * @param year 年（西暦）
     * @param month 月
     * @param day 日
     * @return 指定された元号の日付として正しい場合Dateオブジェクト, 正しくない場合undefined
     */

    function checkGengoRange(gengoId, year, month, day) {
        // 各元号の始まりと終わり
        var begin, end, date;

        switch (gengoId) {
        case aaui040.MEIJI:
            begin = aaui040.BEGIN.meiji;
            end = aaui040.END.meiji;
            break;
        case aaui040.TAISHO:
            begin = aaui040.BEGIN.taisho;
            end = aaui040.END.taisho;
            break;
        case aaui040.SHOWA:
            begin = aaui040.BEGIN.showa;
            end = aaui040.END.showa;
            break;
        case aaui040.HEISEI:
            begin = aaui040.BEGIN.heisei;
            end = new Date(aaui040.BEGIN.heisei.getFullYear() + 9999, 12, 31);//例外として平成の31年5月以降を許容する。
            break;
        case aaui040.REIWA:
            begin = aaui040.BEGIN.reiwa;
            end = new Date(aaui040.BEGIN.reiwa.getFullYear() + 9999, 12, 31);
            break;
        default:
            // 想定しない元号ID
            return;
        }

        date = new Date(year, month - 1, day);
        if (begin <= date && date <= end) {
            return date;
        }
        // 日付が元号の範囲外
        return undefined;
    }

    /**
     * @param gengo 元号プルダウンの入力値
     * @param gengoValuesArray 元号と値の対応配列 [明治, 大正, 昭和, 平成, 令和] の順
     * @return 入力値と配列が対応すれば対応する元号ID、それ以外はundefined
     */

    function getGengoId(gengo, gengoValuesArray) {

        if (gengo == null) {
            return;
        }

        switch (gengo) {
        case gengoValuesArray[aaui040.MEIJI]:
            return aaui040.MEIJI;
        case gengoValuesArray[aaui040.TAISHO]:
            return aaui040.TAISHO;
        case gengoValuesArray[aaui040.SHOWA]:
            return aaui040.SHOWA;
        case gengoValuesArray[aaui040.HEISEI]:
            return aaui040.HEISEI;
        case gengoValuesArray[aaui040.REIWA]:
            return aaui040.REIWA;
        default:
            // 想定しない元号のとき
            return;
        }

    }


    var gengoRawId, year, month, day,
        inputDate, gengoId, numberRegExp = /^[0-9]+$/,
        emptyCheckResult = checkEmptyFields(args),
        isJapaneseCalendar = args.isJapaneseCalendar;

    // 全項目未入力の場合以下の処理は行わない
    if (emptyCheckResult === aaui040.CHECK_RESULT.OPTIONAL_EMPTY ||
        emptyCheckResult === aaui040.CHECK_RESULT.REQUIRED_EMPTY) {
        return emptyCheckResult;
    }

    // フォーカスアウト時は部分的に入力されていてもエラーとしない（入力途中とみなす）
    if (isOnBlur && emptyCheckResult === aaui040.CHECK_RESULT.FILLED_PARTLY) {
        return emptyCheckResult;
    }

    // 年・月・日の値を取得し、それらに数字が1桁以上入力されていることのチェック
    year = $('#' + args.yearId).val();
    month = $('#' + args.monthId).val();

    if (isJapaneseCalendar) {
        gengoRawId = $('#' + args.gengoId).val(); // フォームに入力された生の元号の値
        gengoId = getGengoId(gengoRawId, args.gengoValues); // aaui040.(MEIJI|TAISHO|SHOWA|HEISEI|REIWA)
        // または undefined

        if (gengoId === undefined) {
            return showError(false);
        }
    }
    if (!numberRegExp.test(year)) {
        // 年に整数以外の文字列が入力されている
        return showError(false);
    }
    if (!numberRegExp.test(month) || (month < 1) || (12 < month)) {
        // 月に整数以外の文字列、または1-12以外の整数が入力されている
        return showError(false);
    }

    year = year - 0;
    month = month - 0;

    if (args.isWithoutDay) {

        // 年月のみチェックする場合、日にダミー値をセットする
        if (isJapaneseCalendar) {
            // 和暦のとき            
            day = getDummyDay(gengoId, month);
        } else {
            // 西暦のとき
            day = getDummyDay();
        }
    } else {
        day = $('#' + args.dayId).val();
        if (!numberRegExp.test(day) || (day < 1) || (31 < day)) {
            // 年月日のチェックを実施するときで、日に整数以外の文字列、または1-31以外の整数が入力されている
            return showError(false);
        }
        day = day - 0;
    }

    // 和暦であるとき
    if (args.isJapaneseCalendar) {
        year = getChristianYear(gengoId, year);
        inputDate = checkGengoRange(gengoId, year, month, day);
    } else {
        // 西暦のとき
        inputDate = new Date(year, month - 1, day);
    }

    // 年の範囲が最小値以上であることを確かめる
    if (year < aaui040.MIN_YEAR) {
        return showError(false);
    }

    // 正しい日付かチェックする
    // Dateオブジェクトは誤った日付を補正して保持する。
    // 例: (ユーザ入力) 1月32日
    // (Date) 2月 1日
    // 補正が使用された = 不正な入力とみなす。
    if (inputDate) {
        if (year !== inputDate.getFullYear() || (month !== inputDate.getMonth() +
            1) || day !== inputDate.getDate()) {
            return showError(false);
        }
    } else if (gengoId !== undefined) {
        // 元号と年月日の組み合わせが正しくないとき
        return showError(false);
    }

    clearError();
    return aaui040.CHECK_RESULT.FILLED_OK;

};
/**
 * 日付チェック
 *
 * @param args 初期化時に取得した本機能のパラメータ
 * @param isOnBlur 入力フィールドのフォーカスアウトによって呼び出されたか否か
 *
 * @return {Integer}  aaui040.CHECK_RESULT のいずれかを戻す
 */
aaui040.checkDate02 = function (args, isOnBlur) {

    /**
     * エラー表示解除
     *
     */

    function clearError02() {
        var i, $errorField = $('#' + args.errorId);

        // エラーメッセージの削除
        $errorField.find('span').remove();

        // エラー表示クラスの削除
        for (i = 0; i < args.inputFieldIdArray.length; ++i) {
            $('#' + args.inputFieldIdArray[i]).removeClass(aaui040.INVALID_FIELD_CLASS);
            if (sp_aaui001_newDesignLayoutFlg == true) $('#' + args.inputFieldIdArray[i]).parent().removeClass(aaui040.INVALID_FIELD_CLASS);

        }
    }

    /**
     * エラー表示
     *
     * @param isEmptyError 表示するエラーが未入力エラーの時true, 入力誤りのときfalse
     * @returns チェック結果のエラーコード
     */

    function showError02(isEmptyError) {
        var j, $errorMessageField, $errorField = $('#' + args.errorId),
            errorMessage = isEmptyError ? args.errorMessageEmpty : args.errorMessageInvalid;

        // 一度すべてのエラー表示を解除する
        clearError02();

        // グローバルエラー領域のエラー表示
        if (!isOnBlur) {
            if (isEmptyError) {
                $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
                $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
            } else {
                $(aaui040.GLOBAL_ERROR_FIELD_INVALID).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
                $(aaui040.GLOBAL_ERROR_FIELD_INVALID).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
            }
        }

        // エラーメッセージの表示
        $errorMessageField = $('<span>').html(errorMessage).addClass(
            aaui040.INVALID_CLASS).addClass(aaui040.MESSAGE_CLASS);
        $errorField.append($errorMessageField);

        // 入力された欄へのエラークラスの追加
        for (j = 0; j < args.inputFieldIdArray.length; ++j) {
            $('#' + args.inputFieldIdArray[j]).addClass(aaui040.INVALID_FIELD_CLASS);
            if (sp_aaui001_newDesignLayoutFlg == true) $('#' + args.inputFieldIdArray[j]).parent().addClass(aaui040.INVALID_FIELD_CLASS);

        }

        return isEmptyError ? aaui040.CHECK_RESULT.REQUIRED_EMPTY : aaui040.CHECK_RESULT
            .FILLED_NG;
    }

    /**
     * 未入力項目をチェックする
     *
     * @return CHECK_RESULTオブジェクトの入力状態コード
     */

    function checkEmptyFields02() {
        var $checkFields = [
            $('#' + args.yearId), $('#' + args.monthId)
        ],
            filledFieldCount = 0,
            i;

        if (!args.isWithoutDay) {
            $checkFields.push($('#' + args.dayId));
        }
        if (args.isJapaneseCalendar) {
            $checkFields.push($('#' + args.gengoId));
        }

        for (i = 0; i < $checkFields.length; ++i) {
            if ($checkFields[i].val().length) {
                ++filledFieldCount;
            }
        }

        if (filledFieldCount === 0) {
            // すべての入力欄が空欄
            if (!isOnBlur && args.inputRequired) {
                return showError02(true);
            }
            clearError02();
            return aaui040.CHECK_RESULT.OPTIONAL_EMPTY;
        } 
        
        if (filledFieldCount !== $checkFields.length) {
            // 部分的に入力されている
            return aaui040.CHECK_RESULT.FILLED_PARTLY;
        }

        // 全て入力されている
        return aaui040.CHECK_RESULT.FILLED_UNCHECKED;
    }

    /**
     * ダミーの日を取得する
     * @returns {Integer} 元号と月に応じたダミーの日
     */

    function getDummyDay02() {
        if (!isJapaneseCalendar) {
            // 西暦のとき
            return 1;
        }
        month = month - 0;
        switch (gengoId) {
        case aaui040.MEIJI:
            // 明治33年1月1日〜明治45年7月30日までを対象とする。
            // したがって1日はすべての月に存在する
            return 1;
        case aaui040.TAISHO:
            // 大正1年7月30日〜大正15年12月25日までを対象とする。
            // 大正1年7月のみ25日が存在しないので例外として扱う。
            if (month === 7) {
                return 30;
            }
            return 25;
        case aaui040.SHOWA:
            // 昭和1年12月25日〜昭和64年1月7日までを対象とする。
            // 昭和1年12月のみ7日が存在しないので例外として扱う。
            if (month === 12) {
                return 25;
            }
            return 7;
        case aaui040.HEISEI:
            // 平成1年1月8日〜平成31年4月30日までを対象とする。
            // したがって8日はすべての月に存在する
            return 8;
        case aaui040.REIWA:
            // 令和1年5月1日〜を対象とする。
            return 1;
        default:
            return undefined;
        }
    }

    /**
     * 和暦を西暦に変換する
     *
     * @param gengoId 元号ID
     * @param year 年（和暦）
     * @return gengoIdが正しい場合、西暦での年数。正しくない場合undefined
     */

    function getChristianYear02(gengoId, japaneseYear) {
        switch (gengoId) {
        case aaui040.MEIJI:
            return japaneseYear + aaui040.BEGIN.meiji.getFullYear() - 1;
        case aaui040.TAISHO:
            return japaneseYear + aaui040.BEGIN.taisho.getFullYear() - 1;
        case aaui040.SHOWA:
            return japaneseYear + aaui040.BEGIN.showa.getFullYear() - 1;
        case aaui040.HEISEI:
            return japaneseYear + aaui040.BEGIN.heisei.getFullYear() - 1;
        case aaui040.REIWA:
            return japaneseYear + aaui040.BEGIN.reiwa.getFullYear() - 1;
        }
    }
    /**
     * 元号ごとの日付範囲チェック
     *
     * @param gengoId 元号ID (MEIJI, TAISHO, SHOWA, HEISEI, REIWA)のいずれか
     * @param year 年（西暦）
     * @param month 月
     * @param day 日
     * @return 指定された元号の日付として正しい場合Dateオブジェクト, 正しくない場合undefined
     */

    function checkGengoRange02(gengoId, year, month, day) {
        // 各元号の始まりと終わり
        var begin, end, date;

        switch (gengoId) {
        case aaui040.MEIJI:
            begin = aaui040.BEGIN.meiji;
            end = aaui040.END02.meiji;
            break;
        case aaui040.TAISHO:
            begin = aaui040.BEGIN.taisho;
            end = aaui040.END02.taisho;
            break;
        case aaui040.SHOWA:
            begin = aaui040.BEGIN.showa;
            end = aaui040.END02.showa;
            break;
        case aaui040.HEISEI:
            begin = aaui040.BEGIN.heisei;
            end = aaui040.END02.heisei;
            break;
        case aaui040.REIWA:
            begin = aaui040.BEGIN.reiwa;
            end = new Date(aaui040.BEGIN.reiwa.getFullYear() + 9999, 12, 31);
            break;
        default:
            // 想定しない元号ID
            return;
        }

        date = new Date(year, month - 1, day);
        if (begin <= date && date <= end) {
            return date;
        }
        // 日付が元号の範囲外
        return undefined;
    }

    /**
     * @param gengo 元号プルダウンの入力値
     * @param gengoValuesArray 元号と値の対応配列 [明治, 大正, 昭和, 平成, 令和] の順
     * @return 入力値と配列が対応すれば対応する元号ID、それ以外はundefined
     */

    function getGengoId02(gengo, gengoValuesArray) {

        if (gengo == null) {
            return;
        }

        switch (gengo) {
        case gengoValuesArray[aaui040.MEIJI]:
            return aaui040.MEIJI;
        case gengoValuesArray[aaui040.TAISHO]:
            return aaui040.TAISHO;
        case gengoValuesArray[aaui040.SHOWA]:
            return aaui040.SHOWA;
        case gengoValuesArray[aaui040.HEISEI]:
            return aaui040.HEISEI;
        case gengoValuesArray[aaui040.REIWA]:
            return aaui040.REIWA;
        default:
            // 想定しない元号のとき
            return;
        }

    }


    var gengoRawId, year, month, day,
        inputDate, gengoId, numberRegExp = /^[0-9]+$/,
        emptyCheckResult = checkEmptyFields02(args),
        isJapaneseCalendar = args.isJapaneseCalendar;

    // 全項目未入力の場合以下の処理は行わない
    if (emptyCheckResult === aaui040.CHECK_RESULT.OPTIONAL_EMPTY ||
        emptyCheckResult === aaui040.CHECK_RESULT.REQUIRED_EMPTY) {
        return emptyCheckResult;
    }

    // フォーカスアウト時は部分的に入力されていてもエラーとしない（入力途中とみなす）
    if (isOnBlur && emptyCheckResult === aaui040.CHECK_RESULT.FILLED_PARTLY) {
        return emptyCheckResult;
    }

    // 年・月・日の値を取得し、それらに数字が1桁以上入力されていることのチェック
    year = $('#' + args.yearId).val();
    month = $('#' + args.monthId).val();

    if (isJapaneseCalendar) {
        gengoRawId = $('#' + args.gengoId).val(); // フォームに入力された生の元号の値
        gengoId = getGengoId02(gengoRawId, args.gengoValues); // aaui040.(MEIJI|TAISHO|SHOWA|HEISEI|REIWA)
        // または undefined

        if (gengoId === undefined) {
            return showError02(false);
        }
    }
    if (!numberRegExp.test(year)) {
        // 年に整数以外の文字列が入力されている
        return showError02(false);
    }
    if (!numberRegExp.test(month) || (month < 1) || (12 < month)) {
        // 月に整数以外の文字列、または1-12以外の整数が入力されている
        return showError02(false);
    }

    year = year - 0;
    month = month - 0;

    if (args.isWithoutDay) {

        // 年月のみチェックする場合、日にダミー値をセットする
        if (isJapaneseCalendar) {
            // 和暦のとき            
            day = getDummyDay02(gengoId, month);
        } else {
            // 西暦のとき
            day = getDummyDay02();
        }
    } else {
        day = $('#' + args.dayId).val();
        if (!numberRegExp.test(day) || (day < 1) || (31 < day)) {
            // 年月日のチェックを実施するときで、日に整数以外の文字列、または1-31以外の整数が入力されている
            return showError02(false);
        }
        day = day - 0;
    }

    // 和暦であるとき
    if (args.isJapaneseCalendar) {
        year = getChristianYear02(gengoId, year);
        inputDate = checkGengoRange02(gengoId, year, month, day);
    } else {
        // 西暦のとき
        inputDate = new Date(year, month - 1, day);
    }

    // 年の範囲が最小値以上であることを確かめる
    if (year < aaui040.MIN_YEAR) {
        return showError02(false);
    }

    // 正しい日付かチェックする
    // Dateオブジェクトは誤った日付を補正して保持する。
    // 例: (ユーザ入力) 1月32日
    // (Date) 2月 1日
    // 補正が使用された = 不正な入力とみなす。
    if (inputDate) {
        if (year !== inputDate.getFullYear() || (month !== inputDate.getMonth() +
            1) || day !== inputDate.getDate()) {
            return showError02(false);
        }
    } else if (gengoId !== undefined) {
        // 元号と年月日の組み合わせが正しくないとき
        return showError02(false);
    }

    clearError02();
    return aaui040.CHECK_RESULT.FILLED_OK;

};/**
 * ファイル名 aaui041.js
 * 開発システム anserParaSOL
 * 著作権 Copyright (C) 2013 NTT DATA
 * 収容物
 *  日付の大小チェック機能
 *
 * 修正履歴
 * 2013/08/06 NTTD 河村聡一郎 次世代個人IB開発
 * 2021.07.05 大津 麻祐菜 AnserParaSOL 第14.0版 R001_e-KYC機能<br>
 */
// 日付大小チェック (aaui041)用の名前空間
var aaui041 = {
    // 不正な入力項目に設定するクラス。LiveValidation と同じ
    INVALID_FIELD_CLASS: 'LV_invalid_field',
    // エラーメッセージに設定するクラス。LiveValidation と同じ
    INVALID_CLASS: 'LV_invalid',
    // チェック結果の文章に設定するクラス。LiveValidation と同じ
    MESSAGE_CLASS: 'LV_validation_message',

    // デフォルトのエラーメッセージ
    DEFAULT_ERROR_MESSAGE: '期間を正しく入力して下さい。',

    // デフォルトのエラーメッセージ（期間開始日・未入力）
    DEFAULT_START_EMPTY_ERROR_MESSAGE: '開始日を必ず入力して下さい。',
    // デフォルトのエラーメッセージ（期間開始日）
    DEFAULT_START_ERROR_MESSAGE: '開始日を正しく入力して下さい。',
    // デフォルトのエラーメッセージ（期間終了日・未入力）
    DEFAULT_END_EMPTY_ERROR_MESSAGE: '終了日を必ず入力して下さい。',
    // デフォルトのエラーメッセージ（期間終了日）
    DEFAULT_END_ERROR_MESSAGE: '終了日を正しく入力して下さい。'

};

/**
 * パラメータに設定するプロパティ
 *
 * startYearId 年（開始）のテキストボックスのID<br>
 * startMonthId 月（終了）のプルダウンのID<br>
 * startDayId 日（開始）のプルダウンのID<br>
 * endYearId 年（終了）のテキストボックスのID<br>
 * endMonthId 月（終了）のプルダウンのID<br>
 * endDayId 日（終了）のプルダウンのID<br>
 * inputOptionally 入力を任意にするフラグ
 * <br>
 * errorId エラーメッセージ表示領域のID<br>
 * errorMessage エラーメッセージ<br>
 * <br>
 * errorStartId 開始日エラーメッセージ表示領域のID<br>
 * emptyErrorStartMessage 開始日エラーメッセージ（未入力）<br>
 * errorStartMessage 開始日エラーメッセージ<br>
 * errorEndId 終了日エラーメッセージ表示領域のID<br>
 * emptyErrorEndMessage 終了日エラーメッセージ（未入力）<br>
 * errorEndMessage 終了日エラーメッセージ<br>
 */

function DateRangeChecker(initParams) {

    var startYearId = initParams.startYearId,
        startMonthId = initParams.startMonthId,
        startDayId = initParams.startDayId,
        endYearId = initParams.endYearId,
        endMonthId = initParams.endMonthId,
        endDayId = initParams.endDayId,
        errorId = initParams.errorId,
        errorStartId = initParams.errorStartId,
        errorEndId = initParams.errorEndId,
        trigger = initParams.trigger,
        args = {
            startYearId: startYearId,
            startMonthId: startMonthId,
            startDayId: startDayId,
            endYearId: endYearId,
            endMonthId: endMonthId,
            endDayId: endDayId
        },
        triggerElement,
        inputFieldIdArray = [startYearId, startMonthId, startDayId,
            endYearId, endMonthId, endDayId
        ],
        i,
        oldOnclick;

    // 必須フィールドが存在しないときチェック機能を無効にする
    if ($("#" + startYearId).length === 0 ||
        $("#" + startMonthId).length === 0 ||
        $("#" + startDayId).length === 0 ||
        $("#" + endYearId).length === 0 ||
        $("#" + endMonthId).length === 0 ||
        $("#" + endDayId).length === 0 ||
        $("#" + trigger).length === 0) {
        return;
    }

    // エラー表示要素が設定されているが、エラーメッセージが指定されていないときはデフォルトメッセージを使用する
    if ($("#" + errorId).length) {
        args.errorId = errorId;
        args.errorMessage = initParams.errorMessage || aaui041.DEFAULT_ERROR_MESSAGE;
    }
    if ($("#" + errorStartId).length) {
        args.errorStartId = errorStartId;

        args.emptyErrorStartMessage = initParams.emptyErrorStartMessage ||
            aaui041.DEFAULT_START_EMPTY_ERROR_MESSAGE;
        args.errorStartMessage = initParams.errorStartMessage || aaui041.DEFAULT_START_ERROR_MESSAGE;
    }
    if ($("#" + errorEndId).length) {
        args.errorEndId = errorEndId;

        args.emptyErrorEndMessage = initParams.emptyErrorEndMessage || aaui041.DEFAULT_END_EMPTY_ERROR_MESSAGE;
        args.errorEndMessage = initParams.errorEndMessage || aaui041.DEFAULT_END_ERROR_MESSAGE;
    }
    args.inputRequired = !(initParams.inputOptionally);

    if (initParams.checkOnBlur) {
        // フォーカスアウト時の入力チェックの設定
        for (i = 0; i < inputFieldIdArray.length; ++i) {
            $("#" + inputFieldIdArray[i]).blur(
                function(){ aaui041.checkDateRange(args, true); }
            );
        }
    }

    // 送信ボタンクリック時のチェック設定
    triggerElement = document.getElementById(trigger);
    if (!triggerElement.dateCheckerEnabled) {
        // clickイベントの先頭にグローバルエラー消去を入れる
        // なお、jQueryのイベントハンドラはonclickの後に実行される
        oldOnclick = triggerElement.onclick;
        triggerElement.dateCheckerEnabled = true;

        if (!oldOnclick) {
            triggerElement.onclick = aaui040.clearGlobalError;
        } else {

            triggerElement.onclick = function () {
                aaui040.clearGlobalError();
                return oldOnclick.call(this);
            };
        }
    }

    $("#" + trigger).click(
        function () {
            var originalEmptyError = $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).css(
                'display') !== 'none',
                originalInvalidError = $(
                    aaui040.GLOBAL_ERROR_FIELD_INVALID).css(
                    'display') !== 'none',
                result = aaui041.checkDateRange(args, false);

            if (!result || originalEmptyError || originalInvalidError) {
                // 他の入力チェックで入力不備が検出されている（既にスクロールしている）場合、
                // 常にスクロール
                aaui040.scrollToTop();
            }

			// IE6-8対応
			ua = navigator.userAgent.toLowerCase();
			if (ua.match('^((?!msie).)*msie [6-8]\.')) {
				var ev = window.event;
				if (!result) {
					ev.returnValue = false;

				} else {
					if (ev.returnValue) {
						ev.returnValue = true;

					}
				}

			} else {
				return result;

			}

        });
}

function DateRangeChecker02(initParams) {

    var startYearId = initParams.startYearId,
        startMonthId = initParams.startMonthId,
        startDayId = initParams.startDayId,
        endYearId = initParams.endYearId,
        endMonthId = initParams.endMonthId,
        endDayId = initParams.endDayId,
        errorId = initParams.errorId,
        errorStartId = initParams.errorStartId,
        errorEndId = initParams.errorEndId,
        trigger = initParams.trigger,
        args = {
            startYearId: startYearId,
            startMonthId: startMonthId,
            startDayId: startDayId,
            endYearId: endYearId,
            endMonthId: endMonthId,
            endDayId: endDayId
        },
        triggerElement,
        inputFieldIdArray = [startYearId, startMonthId, startDayId,
            endYearId, endMonthId, endDayId
        ],
        i,
        oldOnclick;

    // 必須フィールドが存在しないときチェック機能を無効にする
    if ($("#" + startYearId).length === 0 ||
        $("#" + startMonthId).length === 0 ||
        $("#" + startDayId).length === 0 ||
        $("#" + endYearId).length === 0 ||
        $("#" + endMonthId).length === 0 ||
        $("#" + endDayId).length === 0 ||
        $("#" + trigger).length === 0) {
        return;
    }

    // エラー表示要素が設定されているが、エラーメッセージが指定されていないときはデフォルトメッセージを使用する
    if ($("#" + errorId).length) {
        args.errorId = errorId;
        args.errorMessage = initParams.errorMessage || aaui041.DEFAULT_ERROR_MESSAGE;
    }
    if ($("#" + errorStartId).length) {
        args.errorStartId = errorStartId;

        args.emptyErrorStartMessage = initParams.emptyErrorStartMessage ||
            aaui041.DEFAULT_START_EMPTY_ERROR_MESSAGE;
        args.errorStartMessage = initParams.errorStartMessage || aaui041.DEFAULT_START_ERROR_MESSAGE;
    }
    if ($("#" + errorEndId).length) {
        args.errorEndId = errorEndId;

        args.emptyErrorEndMessage = initParams.emptyErrorEndMessage || aaui041.DEFAULT_END_EMPTY_ERROR_MESSAGE;
        args.errorEndMessage = initParams.errorEndMessage || aaui041.DEFAULT_END_ERROR_MESSAGE;
    }
    args.inputRequired = !(initParams.inputOptionally);

    if (initParams.checkOnBlur) {
        // フォーカスアウト時の入力チェックの設定
        for (i = 0; i < inputFieldIdArray.length; ++i) {
            $("#" + inputFieldIdArray[i]).blur(
                function(){ aaui041.checkDateRange02(args, true); }
            );
        }
    }

    // 送信ボタンクリック時のチェック設定
    triggerElement = document.getElementById(trigger);
    if (!triggerElement.dateCheckerEnabled) {
        // clickイベントの先頭にグローバルエラー消去を入れる
        // なお、jQueryのイベントハンドラはonclickの後に実行される
        oldOnclick = triggerElement.onclick;
        triggerElement.dateCheckerEnabled = true;

        if (!oldOnclick) {
            triggerElement.onclick = aaui040.clearGlobalError;
        } else {

            triggerElement.onclick = function () {
                aaui040.clearGlobalError();
                return oldOnclick.call(this);
            };
        }
    }

    $("#" + trigger).click(
        function () {
            var originalEmptyError = $(aaui040.GLOBAL_ERROR_FIELD_EMPTY).css(
                'display') !== 'none',
                originalInvalidError = $(
                    aaui040.GLOBAL_ERROR_FIELD_INVALID).css(
                    'display') !== 'none',
                result = aaui041.checkDateRange02(args, false);

            if (!result || originalEmptyError || originalInvalidError) {
                // 他の入力チェックで入力不備が検出されている（既にスクロールしている）場合、
                // 常にスクロール
                aaui040.scrollToTop();
            }

			// IE6-8対応
			ua = navigator.userAgent.toLowerCase();
			if (ua.match('^((?!msie).)*msie [6-8]\.')) {
				var ev = window.event;
				if (!result) {
					ev.returnValue = false;

				} else {
					if (ev.returnValue) {
						ev.returnValue = true;

					}
				}

			} else {
				return result;

			}

        });
}

aaui041.checkDateRange = function (args, isOnBlur) {

    /**
     * エラー表示解除
     */

    function clearError() {
        // エラーメッセージ削除
        $('#' + args.errorId + ' span').remove();

        // 入力欄のエラー表示クラス削除
        $('#' + args.startYearId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.startMonthId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.startDayId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endYearId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endMonthId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endDayId).removeClass(aaui041.INVALID_FIELD_CLASS);
    }

    /**
     * エラー表示
     */

    function showError() {
        var $errorField,
            message = args.errorMessage;

        if (!isOnBlur){
            // グローバルエラー領域のエラー表示
            $(aaui040.GLOBAL_ERROR_FIELD_INVALID).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
            $(aaui040.GLOBAL_ERROR_FIELD_INVALID).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
        }

        // エラーメッセージの表示
        $errorField = $('<span>').html(message).addClass(
            aaui040.INVALID_CLASS).addClass(aaui040.MESSAGE_CLASS);
        $('#' + args.errorId).empty().append($errorField);

        // エラー表示クラスの追加
        $('#' + args.startYearId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.startMonthId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.startDayId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endYearId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endMonthId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endDayId).addClass(aaui040.INVALID_FIELD_CLASS);
    }

    /**
     * 日付の大小チェック
     *
     * @return {Boolean} コンストラクタで設定されたすべての日付入力フォームの日付大小関係が正しいときtrue
     *         一つでも正しくないときfalse
     */
    var resultStartDate, resultEndDate, startYear, startMonth, startDay,
        startDate, endYear, endMonth, endDay, endDate;

    // 開始日の歴日チェック
    // 内部でエラー表示（赤枠・エラーメッセージ表示）もされる
    resultStartDate = aaui040.checkDate({
        yearId: args.startYearId,
        monthId: args.startMonthId,
        dayId: args.startDayId,
        errorId: args.errorStartId,
        errorMessageEmpty: args.emptyErrorStartMessage,
        errorMessageInvalid: args.errorStartMessage,
        inputRequired: args.inputRequired,
        inputFieldIdArray: [args.startYearId, args.startMonthId, args.startDayId]
    }, isOnBlur);

    // 終了日の歴日チェック
    // 内部でエラー表示（赤枠・エラーメッセージ表示）もされる
    resultEndDate = aaui040.checkDate({
        yearId: args.endYearId,
        monthId: args.endMonthId,
        dayId: args.endDayId,
        errorId: args.errorEndId,
        errorMessageEmpty: args.emptyErrorEndMessage,
        errorMessageInvalid: args.errorEndMessage,
        inputRequired: args.inputRequired,
        inputFieldIdArray: [args.endYearId, args.endMonthId, args.endDayId]
    }, isOnBlur);

    // 任意入力項目が完全に未入力のとき
    if (resultStartDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY &&
        resultEndDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY) {
        clearError();
        return true;
    }
    // 必須入力項目が完全に未入力のとき
    if (resultStartDate === aaui040.CHECK_RESULT.REQUIRED_EMPTY &&
        resultEndDate === aaui040.CHECK_RESULT.REQUIRED_EMPTY) {
        // エラー表示はaaui040内でされているので041ではしない
        return false;
    }

    // それ以外の入力不備
    if (resultStartDate !== aaui040.CHECK_RESULT.FILLED_OK ||
        resultEndDate !== aaui040.CHECK_RESULT.FILLED_OK) {
        if (!isOnBlur && (
            (resultStartDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY &&
                resultEndDate === aaui040.CHECK_RESULT.FILLED_OK) ||
            (resultStartDate === aaui040.CHECK_RESULT.FILLED_OK && resultEndDate ===
                aaui040.CHECK_RESULT.OPTIONAL_EMPTY))
        ) {
            // 開始・終了の片方だけ正しく入力されているとき
            // 歴日チェックはエラーを表示しないのでエラーを表示する
            showError();
        }

        return false;
    }

    startYear = $('#' + args.startYearId).val();
    startMonth = $('#' + args.startMonthId).val();
    startDay = $('#' + args.startDayId).val();
    endYear = $('#' + args.endYearId).val();
    endMonth = $('#' + args.endMonthId).val();
    endDay = $('#' + args.endDayId).val();

    startDate = new Date(startYear, startMonth - 1, startDay);
    endDate = new Date(endYear, endMonth - 1, endDay);

    if (endDate < startDate) {
        // 日付の大小関係が不正
        showError();
        return false;
    }
    clearError();
    return true;
};

aaui041.checkDateRange02 = function (args, isOnBlur) {

    /**
     * エラー表示解除
     */

    function clearError02() {
        // エラーメッセージ削除
        $('#' + args.errorId + ' span').remove();

        // 入力欄のエラー表示クラス削除
        $('#' + args.startYearId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.startMonthId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.startDayId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endYearId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endMonthId).removeClass(aaui041.INVALID_FIELD_CLASS);
        $('#' + args.endDayId).removeClass(aaui041.INVALID_FIELD_CLASS);
    }

    /**
     * エラー表示
     */

    function showError02() {
        var $errorField,
            message = args.errorMessage;

        if (!isOnBlur){
            // グローバルエラー領域のエラー表示
            $(aaui040.GLOBAL_ERROR_FIELD_INVALID).addClass(aaui040.GLOBAL_ERROR_CLASS_ERROR);
            $(aaui040.GLOBAL_ERROR_FIELD_INVALID).removeClass(aaui040.GLOBAL_ERROR_CLASS_DEFAULT);
        }

        // エラーメッセージの表示
        $errorField = $('<span>').html(message).addClass(
            aaui040.INVALID_CLASS).addClass(aaui040.MESSAGE_CLASS);
        $('#' + args.errorId).empty().append($errorField);

        // エラー表示クラスの追加
        $('#' + args.startYearId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.startMonthId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.startDayId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endYearId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endMonthId).addClass(aaui040.INVALID_FIELD_CLASS);
        $('#' + args.endDayId).addClass(aaui040.INVALID_FIELD_CLASS);
    }

    /**
     * 日付の大小チェック
     *
     * @return {Boolean} コンストラクタで設定されたすべての日付入力フォームの日付大小関係が正しいときtrue
     *         一つでも正しくないときfalse
     */
    var resultStartDate, resultEndDate, startYear, startMonth, startDay,
        startDate, endYear, endMonth, endDay, endDate;

    // 開始日の歴日チェック
    // 内部でエラー表示（赤枠・エラーメッセージ表示）もされる
    resultStartDate = aaui040.checkDate02({
        yearId: args.startYearId,
        monthId: args.startMonthId,
        dayId: args.startDayId,
        errorId: args.errorStartId,
        errorMessageEmpty: args.emptyErrorStartMessage,
        errorMessageInvalid: args.errorStartMessage,
        inputRequired: args.inputRequired,
        inputFieldIdArray: [args.startYearId, args.startMonthId, args.startDayId]
    }, isOnBlur);

    // 終了日の歴日チェック
    // 内部でエラー表示（赤枠・エラーメッセージ表示）もされる
    resultEndDate = aaui040.checkDate02({
        yearId: args.endYearId,
        monthId: args.endMonthId,
        dayId: args.endDayId,
        errorId: args.errorEndId,
        errorMessageEmpty: args.emptyErrorEndMessage,
        errorMessageInvalid: args.errorEndMessage,
        inputRequired: args.inputRequired,
        inputFieldIdArray: [args.endYearId, args.endMonthId, args.endDayId]
    }, isOnBlur);

    // 任意入力項目が完全に未入力のとき
    if (resultStartDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY &&
        resultEndDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY) {
        clearError02();
        return true;
    }
    // 必須入力項目が完全に未入力のとき
    if (resultStartDate === aaui040.CHECK_RESULT.REQUIRED_EMPTY &&
        resultEndDate === aaui040.CHECK_RESULT.REQUIRED_EMPTY) {
        // エラー表示はaaui040内でされているので041ではしない
        return false;
    }

    // それ以外の入力不備
    if (resultStartDate !== aaui040.CHECK_RESULT.FILLED_OK ||
        resultEndDate !== aaui040.CHECK_RESULT.FILLED_OK) {
        if (!isOnBlur && (
            (resultStartDate === aaui040.CHECK_RESULT.OPTIONAL_EMPTY &&
                resultEndDate === aaui040.CHECK_RESULT.FILLED_OK) ||
            (resultStartDate === aaui040.CHECK_RESULT.FILLED_OK && resultEndDate ===
                aaui040.CHECK_RESULT.OPTIONAL_EMPTY))
        ) {
            // 開始・終了の片方だけ正しく入力されているとき
            // 歴日チェックはエラーを表示しないのでエラーを表示する
            showError02();
        }

        return false;
    }

    startYear = $('#' + args.startYearId).val();
    startMonth = $('#' + args.startMonthId).val();
    startDay = $('#' + args.startDayId).val();
    endYear = $('#' + args.endYearId).val();
    endMonth = $('#' + args.endMonthId).val();
    endDay = $('#' + args.endDayId).val();

    startDate = new Date(startYear, startMonth - 1, startDay);
    endDate = new Date(endYear, endMonth - 1, endDay);

    if (endDate < startDate) {
        // 日付の大小関係が不正
        showError02();
        return false;
    }
    clearError02();
    return true;
};/**
 * ファイル名    aaui042.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2013 NTT DATA
 * 収容物  注意事項確認機能
 * 
 * 修正履歴
 * 2013.7.31 NTTD 渡辺誠　次世代個人IB開発 Phase2
 */

// 注意事項確認機能の利用有無
var aaui042_useFlag = false;

// ボタン非活性表示
var aaui042_disabledClass = 'main-button-disabledA01';

// ボタン表示
var aaui042_abledClass = 'main-buttonA01';

/**
 * 注意事項確認初期化<br>
 * 注意事項確認に必要な要素を設定する。
 * @param param 入力パラメータ
 */
function initNotice(params) {
    
    // 注意事項確認機能の利用有無がfalseの場合、処理を終了
    if (!aaui042_useFlag) {
        return false;
    }
    
    // 入力パラメータに何も設定されていなければ処理終了
    if (!params || !(params instanceof Array)) {
        return false;
    }
    
    var initParam = params[0];

    // 必須パラメータチェック
    if (!initParam.checkboxId || !initParam.nextButtonId
        || $('#' + initParam.checkboxId).length == 0
        || $('#' + initParam.nextButtonId).length == 0) {
        return false;
    }
    
    // ガイダンスエリア存在チェック
    if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
        // 存在する場合は次画面遷移ボタンを非表示
        visibleById($('#' + initParam.nextButtonId).parent().attr('id'), 1)
    } else {
        // 存在しない場合は次画面遷移ボタンを非活性
        enableById(initParam.nextButtonId, false);
        changeClassById(initParam.nextButtonId, aaui042_disabledClass, 0);
        changeClassById(initParam.nextButtonId, aaui042_abledClass, 1);
        visibleById($('#' + initParam.nextButtonId).parent().attr('id'), 0);
    }
    
    // 注意確認チェックボックスクリックイベントバインド
    $('#' + initParam.checkboxId).click(function () {
        confirmNoticeEvent(initParam);
    });
    
}

/**
 * 注意確認チェックボックスクリックイベント機能
 * @param initParam 入力パラメータ
 */
function confirmNoticeEvent(initParam) {
    
    // 注意確認チェックボックスがチェック済みかどうかチェック
    if ($('#' + initParam.checkboxId).prop("checked")) {
        
        // ガイダンスエリア存在チェック
        if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
            // 存在する場合はガイダンスエリアを非表示
            visibleById(initParam.guidanceId, 1);
            // 次画面遷移ボタンを表示
            visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 0);
        } else {
            // 存在しない場合は次画面遷移ボタンを活性
            enableById(initParam.nextButtonId, true);
            changeClassById(initParam.nextButtonId, aaui042_disabledClass, 1);
            changeClassById(initParam.nextButtonId, aaui042_abledClass, 0);
        }
    } else {
        
        // ガイダンスエリア存在チェック
        if (initParam.guidanceId && $('#' + initParam.guidanceId).length > 0) {
            // 存在する場合はガイダンスエリアを表示
            visibleById(initParam.guidanceId, 0);
            // 次画面遷移ボタンを非表示
            visibleById($('#'+ initParam.nextButtonId).parent().attr('id'), 1);
        } else {
            // 存在しない場合は次画面遷移ボタンを非活性
            enableById(initParam.nextButtonId, false);
            changeClassById(initParam.nextButtonId, aaui042_disabledClass, 0);
            changeClassById(initParam.nextButtonId, aaui042_abledClass, 1);
        }
    }
}

/**
 * ファイル名   aaui044.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  ファンド明細ポップアップ画面表示機能
 * 
 * 修正履歴
 * 2014.03.27 NTTD 趙 次世代個人IB開発 Phase3
 */

/** ファンド明細ポップアップ画面 */
var fundDetailPopup = {};

/** 明細ポップアップテンプレート */
var aaui044_fundDetailPopup = "fundDetailPopup";

/** １つのテンプレートの場合 - Start */
/** 明細ポップアップテンプレートの識別子 */
var aaui044_fundDetailPopupId = "";
/** １つのテンプレートの場合 - End */

/** 複数のテンプレートの場合 - Start */
/** 明細ポップアップテンプレート01の識別子  */
var aaui044_fundDetailPopup01Id = "_01";

/** 明細ポップアップテンプレート02の識別子 */
var aaui044_fundDetailPopup02Id = "_02";

/** 明細ポップアップテンプレート03の識別子 */
var aaui044_fundDetailPopup03Id = "_03";
/** 複数のテンプレートの場合 - End */

// BPS制度対応 Start
/** 明細ポップアップテンプレート04の識別子 */
var aaui044_fundDetailPopup04Id = "_04";
/** 複数のテンプレートの場合 - End */
// BPS制度対応 End

/*プラス時黒字設定（Fund明細ポップアップ用）*/
var aaui044_item_plus = "item_plus";

/*マイナス時赤字設定（Fund明細ポップアップ用）*/
var aaui044_item_minus = "item_minus";

/** 明細ポップアップテンプレート03の識別子 */
var aaui044_nisaFlagKey = "_nisaFlag";

/** 明細ポップアップテンプレート03の識別子 */
var aaui044_pcDispIconClass = 'disp-pc-icon';

//PH4.0 金利優遇サービス対応 start
/** 金利優遇サービス確認ダイアログ表示フラグ */
var aaui044_prPopupFlg = 'pr_popup_flg';
// PH4.0 金利優遇サービス対応 end

/** ファンド明細ポップアップ画面を初期化する。 */
var fundDetailPopup = {};
fundDetailPopup.init= function() {
  window.body = document.body;

  if (window.body) {

    /* 投信3版追加 */
    /** １つのテンプレートの場合 - Start */
    fundDetailPopup.popup = document.getElementById( aaui044_fundDetailPopup + aaui044_fundDetailPopupId );
    if (fundDetailPopup.popup != null) {
       window.body.appendChild(fundDetailPopup.popup);
    }
    /** １つのテンプレートの場合 - Start */
    
    /** 複数のテンプレートの場合 - End */
    // １番目のテンプレート
    fundDetailPopup.popup01 = document.getElementById( aaui044_fundDetailPopup + aaui044_fundDetailPopup01Id );
    if (fundDetailPopup.popup01 != null) {
       window.body.appendChild(fundDetailPopup.popup01);
    }
    
    // ２番目のテンプレート
    fundDetailPopup.popup02 = document.getElementById( aaui044_fundDetailPopup + aaui044_fundDetailPopup02Id );
    if (fundDetailPopup.popup02 != null) {
       window.body.appendChild(fundDetailPopup.popup02);
    }
    
    // ３番目のテンプレート
    fundDetailPopup.popup03 = document.getElementById( aaui044_fundDetailPopup + aaui044_fundDetailPopup03Id );
    if (fundDetailPopup.popup03 != null) {
       window.body.appendChild(fundDetailPopup.popup03);
    }
    
    // BPS制度対応 Start
    // ４番目のテンプレート
    fundDetailPopup.popup04 = document.getElementById( aaui044_fundDetailPopup + aaui044_fundDetailPopup04Id );
    if (fundDetailPopup.popup04 != null) {
       window.body.appendChild(fundDetailPopup.popup04);
    }
    // BPS制度対応 End
    /** 複数のテンプレートの場合 - End */
    
    
     // 背面のレイヤーを作成する。
    laylerDialogDisp(fundDetailPopup.popup);
    laylerDialogDisp(fundDetailPopup.popup01);
    laylerDialogDisp(fundDetailPopup.popup02);
    laylerDialogDisp(fundDetailPopup.popup03);
    // BPS制度対応 Start
    laylerDialogDisp(fundDetailPopup.popup04);
    // BPS制度対応 End    
  }
}



/**
 * ポップアップ画面を表示する機能。
 * 
 * @param selPopupTemplate ファンド明細ポップアップ要素ID
 * @return なし
 */
function displayPopup(selPopupTemplate) {
    // ポップアップを一度閉じる
    closeFundDetailPopup();
    if($('#'+aaui044_fundDetailPopup + selPopupTemplate+' .body') != null){
        var popupContentId = $('#'+aaui044_fundDetailPopup + selPopupTemplate+' .body').attr('id');
        showPopup(aaui044_fundDetailPopup + selPopupTemplate, popupContentId);
    }
}



/**
 * ファンド明細ポップアップ画面を表示する。
 * 
 * @param selectRow  選択行番号
 * @param keyObject  ファンド明細ポップアップ画面の要素ID・キー情報Object
 *                   ファンド明細ポップアップの表示する際、下記の要素を利用する。
 *                          fundStateKey          ：取引ステータスキー(配列 or 文字列)
 *                          messageAreaProperty   ：取引状態メッセージエリアID
 *                          messageProperty       ：取引状態メッセージID
 *                          buttonProperty        ：取引ボタンID(配列 or 文字列)
 *                          formSendKey           ：遷移先キー(配列 or 文字列)
 *                          itCodeKey             ：業務系ファンドキー(配列 or 文字列)
 * @param selPopupTemplate 選択ポップアップテンプレート
 * 
 * @return なし
 */
function showFundDetailPopup(selectRow, keyObject, selPopupTemplate) {
  // ファンド明細データリストのサイズが0である場合
  if (details != null && details.length > 0) {
    
    // build popup window
    buildFundDetailPopup(selectRow, keyObject, selPopupTemplate);
    closeFundDetailPopup();
    
    // ファンド明細ポップアップ画面を表示する。
    displayPopup(selPopupTemplate);

    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 start
    // ポップアップ画面を表示する際にスクロールを固定する
    scrollFixed();
    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 end
  }
}



/**
 * ファンド明細ポップアップ画面の各要素に設定し、画面を作成する。
 * 
 * @param selectRow  選択行番号
 * @param keyObject  ファンド明細ポップアップ画面の要素ID・キー情報Object
 *                   ファンド明細ポップアップの表示する際、下記の要素を利用する。
 *                          fundStateKey          ：取引ステータスキー(配列 or 文字列)
 *                          messageAreaProperty   ：取引状態メッセージエリアID
 *                          messageProperty       ：取引状態メッセージID
 *                          buttonProperty        ：取引ボタンID(配列 or 文字列)
 *                          formSendKey           ：遷移先キー(配列 or 文字列)
 *                          itCodeKey             ：業務系ファンドキー(配列 or 文字列)
 * @param selPopupTemplate 選択ポップアップテンプレート
 * 
 * @return なし
 */
function buildFundDetailPopup(selectRow, keyObject, selPopupTemplate) {
	
  // 臨時onclick属性を初期化する。
  tmpBtnOnclickBs = "";
  
  // 明細情報リストがある場合
  if (details != null && details.length > 0) {
  
    // 取引状態項目存在チェック
    var hiddenFundStatesFlg = true;
    // 取引状態キー配列
    var fundStateKeyArray = convertStringToArray(keyObject.fundStateKey);
    // ボタン名属性配列
    var buttonPropertyArray = convertStringToArray(keyObject.buttonProperty);
    // ボタン表示フラグ配列
    var buttonVisibleArray = initPopupButtons(fundStateKeyArray);
    // ボタン名属性配列
    var formSendKeyArray = convertStringToArray(keyObject.formSendKey);
    // ボタン処理カウント
    var existsButton = 0;
    // 業務系ファンドID配列
    var itCodeKeyArray;
    
    if (keyObject.itCodeKey) {
    
        itCodeKeyArray = convertStringToArray(keyObject.itCodeKey);
    
    }
    
    // 明細ポップアップテーブルの各行を初期化する。
    initFundDetailPopupTable(selPopupTemplate)
    
    // 明細データリストを明細ポップアップ画面に各要素に設定
    for (var key in details[selectRow]) {
    
      var select_key = key + selPopupTemplate;
      var element = document.getElementById(select_key);
      
      if (element != null) {
        // マイナス値が入る可能性がある場合styleを切り替える。
        if($("#"+select_key).hasClass(aaui044_item_plus) 
              || $("#"+select_key).hasClass(aaui044_item_minus)){
          if(details[selectRow][key].indexOf("-") == 0){
            $("#"+select_key).removeClass(aaui044_item_plus);
            $("#"+select_key).addClass(aaui044_item_minus);
          
          } else {
            $("#"+select_key).removeClass(aaui044_item_minus);
            $("#"+select_key).addClass(aaui044_item_plus);
          }
        }
        
        element.innerHTML = details[selectRow][key];
      }
      
      // ファンド明細情報（keyObject）がある場合、取引状態メッセージ・ボタン名設定
      for(fskIdx=0; fskIdx<fundStateKeyArray.length; fskIdx++){
        
        // 現在キーが取引状態キーである場合、対象行は表示にする。
        if(fundStateKeyArray[fskIdx] == key){
          buttonVisibleArray[fskIdx] = false;
        }
        
        // 明細ポップアップ画面要素をチェック
        if(key == fundStateKeyArray[fskIdx]){
          // fundStatesがnullである場合、処理を止める。
          if(typeof(fundStates) === "undefined" || fundStates == null
                                                || fundStates.length == 0){
            break;
          }
          
          // 取引状態（fundStates）に設定値が存在する場合
          for(fsIdx=0; fsIdx<fundStates.length; fsIdx++){
            var buttonDisabled = false;
            
            // 一致するボタン名が存在する場合
            if(details[selectRow][key] == fundStates[fsIdx][0]){
              buttonDisabled = fundStates[fsIdx][2];
              
              var nisaFlag = details[selectRow][key + aaui044_nisaFlagKey];
              
              // ボタンが非活性状態に取引状態メッセージを設定する。
              // 取引状態が終了・休場である場合、
              // 対象ボタンを削除し、取引状態メッセージ欄を表示する。
              if(buttonDisabled == true){
                $('#' + keyObject.messageProperty + selPopupTemplate).text(fundStates[fsIdx][1]);
                buttonVisibleArray[fskIdx] = true;
                setButtonsVisible(buttonVisibleArray[fskIdx], buttonPropertyArray[fskIdx], selPopupTemplate);
                hiddenFundStatesFlg = false;
                
              // 取引状態が終了・休場でない場合、対象ボタンを活性化にする。
              } else {
                // ボタン
                var $button = $("#" + buttonPropertyArray[fskIdx] + selPopupTemplate);
                // 遷移先設定
                var setSubmit = details[selectRow][formSendKeyArray[fskIdx]];
                
                if (itCodeKeyArray) {
                    // 業務系ファンドID
                    var itCodeValue = details[selectRow][itCodeKeyArray[fskIdx]];
                    
                    var $itCode = $('#' + setSubmit).find("[name=" + itCodeKeyArray[fskIdx] + "]");
                    
                    if (itCodeValue && $itCode) {
                        
                        $itCode.val(itCodeValue);
                        
	                }
                }
                
                // PH4.0 金利優遇サービス対応 start
                // 金利優遇サービス確認ダイアログ表示制御フラグを取得
                var prFlag = details[selectRow][aaui044_prPopupFlg];
                // PH4.0 金利優遇サービス対応 end
                
                // 明細ポップアップボタンのonclick属性を初期化する。
                $button.off("click", buildFundDetailPopup_onclick01);
                $button.off("click", buildFundDetailPopup_onclick02);
                $button.off("click", buildFundDetailPopup_onclick03);
                // BPS制度対応 start
                $button.off("click", buildFundDetailPopup_onclick04);
                // BPS制度対応 end
                
                // 取引ボタンによりnisaダイアログが表示しない場合
                if(typeof nisaFlag === 'undefined' || nisaFlag == false){
                  // 該当ボタンが「PCサイトへ：class」である場合。
                  if($button.hasClass(aaui044_pcDispIconClass)){
                    // ボタンのクリックイベント生成
                    $button.click({submit:setSubmit}, buildFundDetailPopup_onclick01);
                  // PH4.0 金利優遇サービス対応 start
                  } else if (prFlag == true) {
                    // ボタンのクリックイベント生成 確認ダイアログを表示させる
                    $button.click({submit:setSubmit}, buildFundDetailPopup_onclick04);
                  // PH4.0 金利優遇サービス対応 end
                  } else {
                    // ボタンのクリックイベント生成
                    $button.click({submit:setSubmit}, buildFundDetailPopup_onclick02);
                  }
                  
                // 取引ボタンによりnisaダイアログが表示する場合
                } else {
                  // ボタンのクリックイベント生成
                  $button.click({submit:setSubmit}, buildFundDetailPopup_onclick03);
                }
                
              }
              
              existsButton++;
            } 
          }
        }
      }
    }
    
    // 選択したファンド明細情報にボタンがない場合、全ボタンを非表示に設定
    if(existsButton == 0){
      buttonVisibleArray = initPopupButtons(fundStateKeyArray);
    }
    
    // 取引状態メッセージ欄を表示・非表示に切り替える。
    setObjectStyleVisible(selPopupTemplate, keyObject.messageAreaProperty, hiddenFundStatesFlg);
    
    // ファンド明細情報（keyObject）がある場合、取引状態メッセージ・ボタン名設定
    setButtonsVisible(buttonVisibleArray, buttonPropertyArray, selPopupTemplate);
  }
}


/**
 * 明細ポップアップボタンのonclick属性０１
 * 
 * @param event submit情報
 * @return なし
 */
function buildFundDetailPopup_onclick01(event){
  // 臨時onclick属性を格納
  tmpBtnOnclickBs = "formSend('"+ event.data.submit +"')";
}


/**
 * 明細ポップアップボタンのonclick属性０２
 * 
 * @param event submit情報
 * @return なし
 */
function buildFundDetailPopup_onclick02(event){
  // 遷移する。
  formSend(event.data.submit);
}


/**
 * 明細ポップアップボタンのonclick属性０３
 * 
 * @param event submit情報
 * @return なし
 */
function buildFundDetailPopup_onclick03(event){
  // 臨時onclick属性を格納
  tmpBtnOnclickBs = "formSend('"+ event.data.submit +"')";
  // nisaダイアログポップアップを初期化
  return dispConfirm(this, 'nisa');
}

//PH4.0 金利優遇サービス対応 start
 /**
  * 明細ポップアップボタンのonclick属性０４
  * 
  * @param event submit情報
  * @return なし
  */
 function buildFundDetailPopup_onclick04(event){
   // 臨時onclick属性を格納
   tmpBtnOnclickBs = "formSend('"+ event.data.submit +"')";
   // 金利優遇サービス確認ダイアログポップアップを初期化
   return dispConfirm(this, 'prefential');
 }
//PH4.0 金利優遇サービス対応 end

/**
 * 明細ポップアップ画面を非表示にする。
 * 
 * @param なし
 * @return なし
 */
function initFundDetailPopupTable(selPopupTemplate) {

  // 各項目の設定値を初期化する。
  $("#" + aaui044_fundDetailPopup + selPopupTemplate).find("table").filter(":first").each(function(){
    var tableId = $(this).attr("id");
    
    $("#" + tableId + " td span").each(function(){
      var element = $(this)[0];
      if (element != null) {
        element.innerHTML = "";
      }
    });
    
  });
  
}



/**
 * 明細ポップアップ画面の各要素を初期化する。
 * 
 * @param fundStateKeyArray  ファンド明細ポップアップの要素
 * @return ボタン表示フラグ配列
 */
function initPopupButtons(fundStateKeyArray) {

  // ボタン表示フラグ配列
  var buttonVisibleArray = [];
  
  for(i=0; i<fundStateKeyArray.length; i++){
    buttonVisibleArray.push(true);
  }
  
  return buttonVisibleArray;
}



/**
 * 引数を配列化して返却する。
 * 
 * @param obj  文字列或は配列
 * @return 配列
 */
function convertStringToArray(obj) {

  // 引数(obj)が配列でない場合、配列化して処理する。
  if(obj instanceof Array){  
    obj = obj;
  }else{
    obj = [ obj ];
  }
  
  return obj;
}



/**
 * ボタンを非表示・表示を制御する。
 * 
 * @param buttonVisibleArray  ボタン表示フラグ配列
 * @param buttonPropertyArray  ボタン名属性配列
 * @return なし
 */
function setButtonsVisible(buttonVisible, buttonProperty, selPopupTemplate) {

  var buttonVisibleArray = convertStringToArray(buttonVisible);
  var buttonPropertyArray = convertStringToArray(buttonProperty);

  // buttonPropertyArrayのlength分、非表示・表示に設定する。
  for(i=0; i<buttonVisibleArray.length; i++){
    if(buttonVisibleArray[i] == true) {
      $("#" + buttonPropertyArray[i] + selPopupTemplate).hide();
    } else {
      $("#" + buttonPropertyArray[i] + selPopupTemplate).show();
    }
  }
}



/**
 * 引数(要素)を非表示・表示を制御する。
 * 
 * @param obj  要素
 * @param objFlg  要素フラグ(非表示・表示)
 * @return なし
 */
function setObjectStyleVisible(selPopupTemplate, obj, objFlg) {
  var element = document.getElementById(obj + selPopupTemplate);

  if (element != null) {
    // 要素フラグがtrueの場合、非表示
    if(objFlg == true){
      element.style.display = "none";
      
    // 要素フラグがfalseの場合、表示
    } else {
      element.style.display = "";
    }
  }
}



/**
 * 明細ポップアップ画面を非表示にする。
 * 
 * @param なし
 * @return なし
 */
function closeFundDetailPopup() {
  
  // 明細ポップアップのpopupがNULLでない場合、非表示にする。
  if (fundDetailPopup.popup != null) {
    fundDetailPopup.popup.style.display = "none";
  }
  
  // 明細ポップアップのpopupがNULLでない場合、非表示にする。
  if (fundDetailPopup.popup01 != null) {
    fundDetailPopup.popup01.style.display = "none";
  }
  
  // 明細ポップアップのpopup02がNULLでない場合、非表示にする。
  if (fundDetailPopup.popup02 != null) {
    fundDetailPopup.popup02.style.display = "none";
  }
  
  // 明細ポップアップのpopup03がNULLでない場合、非表示にする。
  if (fundDetailPopup.popup03 != null) {
    fundDetailPopup.popup03.style.display = "none";
  }
  
  // BPS制度対応 Start
  // 明細ポップアップのpopup04がNULLでない場合、非表示にする。
  if (fundDetailPopup.popup04 != null) {
    fundDetailPopup.popup04.style.display = "none";
  }
  // BPS制度対応 End

  // スクロールを禁止を解除
  $("html").off('.noScroll');
  // 縦横変更時の設定を解除
  $(window).off('.reOpen');

  var version = androidVersion();
  if ('2.3' == version) {
    $("#dummytable").remove();
    }

  // 背面のレイヤーを非表示
  $('#laylerDialog').dialog('close');
}

//PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 start
/**
 * 明細ポップアップ画面を非表示にする。（投信）
 * スクロールロック固定の解除を追加し、closeFundDetailPopupと区別する
 * 
 * @param なし
 * @return なし
 */
function closeInvFundDetailPopup() {
    // 明細ポップアップ画面を非表示にする。
    closeFundDetailPopup()

    // ポップアップ画面を閉じたときスクロール固定を解除する
    unScrollFixed();
}
// PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 end

/**
 * 複数項目をマージして対象項目に設定 
 *   ※マージ対象項目１+マージ対象項目２
 * 
 * @param fromItem1  マージ対象項目１キー
 * @param fromItem2  マージ対象項目２キー
 * @param toItem  マージ項目キー
 * @return なし
 */
function mergeDetailsItems(fromItem1, fromItem2, toItem) {

  // 複数項目をマージ処理
  for(i=0; i<details.length; i++){
    // toItem項目初期化
    details[i][toItem] = "";
    
    // fromItem1項目がnullでない場合
    if(details[i][fromItem1] != null || details[i][fromItem1] != ""){
      details[i][toItem] = details[i][fromItem1];
      
      // fromItem1とfromItem2項目ともnullでない場合
      if(details[i][fromItem2] != null || details[i][fromItem2] != "") {
        details[i][toItem] += " " + details[i][fromItem2];
      }
      
    // fromItem2項目がnullでない場合
    } else if(details[i][fromItem2] != null || details[i][fromItem2] != "") {
      details[i][toItem] = details[i][fromItem2];
    }
  }
  
}


var mailcheckdspflg = false;

//カスタマイズ可能文言
var aaui045_dialogTitle = '確認';
var aaui045_dialogMsg = 'お客様の入力したメールアドレスはセキュリティ上推奨しません。<br />その他のメールアドレスに変更する場合は「キャンセル」ボタンを押下して下さい。';
var aaui045_dialogOkBtnMsg = 'OK';
var aaui045_dialogCancelBtnMsg = 'キャンセル';
var aaui045_domain = '';
var aaui045_checkMailAddr1 = 'false';
var aaui045_checkMailAddr2 = 'false';
var aaui045_checkMailAddr3 = 'false';
var aaui045_checkMailAddr4 = 'false';
var aaui045_isCkClsBlackList = true;
var aaui045_isDispOkBtn = true;

/**
 * メールアドレス注意喚起メッセージを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @param idlist 対象のテキストボックスのidリスト
 * @param isLite Lite版フラグ(Lite版の場合はtrueを渡せばこの処理は行わない)
 * @return チェック結果(ボタン押下結果含む)
 */
function mailcheck(event, idlist, isLite) {

  // ドメイン設定がされていない場合はチェックは行わず後続処理を行う
  if ("" == aaui045_domain) {
      return true;
  }

  // Lite版の場合はチェックは行わず後続処理を行う(isLite指定なしの場合はfalse判定となる)
  if (true == isLite) {
      return true;
  }

  // 画面表示フラグがtrue以外 メッセージ表示フラグがtrue
  if (!mailcheckdspflg) {
      var msgdspflg = false;

      // 対象のテキストボックスに除外メールアドレスが含まれているかチェック
      if (idlist != null && idlist != '') {
          var mailaddresslist = idlist.split(',');
          var domainArray = aaui045_domain.split(',');

          // 画面のメールアドレス欄の数だけループ
          for (var i=0; i < mailaddresslist.length; i++) {
              var checkVal = $('#' + mailaddresslist[i]).val();

              // 該当項目が画面に表示されないパターンを考慮しておく
              if (typeof checkVal == 'undefined') {
                  continue;
              }

              if (aaui045_isCkClsBlackList) {
                  // チェック方式がブラックリスト方式の場合
                  // チェック対象ドメインの数だけループ
                  for (var j=0; j < domainArray.length; j++) {
                      // 入力されたアドレスと後方一致する場合
                      if ((checkVal + " ").indexOf(domainArray[j] + " ") != -1) {
                          msgdspflg = true;
                          break;
                      }
                  }
              } else {
                  // チェック方式がホワイトリスト方式の場合

                    if ("" == checkVal) {
                        // 未入力の場合
                        continue;
                    }

                  var isNotExistDomainArray = true;
                  // チェック対象ドメインの数だけループ
                  for (var j=0; j < domainArray.length; j++) {
                      // 入力されたアドレスと後方一致する場合
                      if ((checkVal + " ").indexOf(domainArray[j] + " ") != -1) {
                          isNotExistDomainArray = false;
                          break;
                      }
                  }
                  if (isNotExistDomainArray) {
                      // 入力ドメインがホワイトリスト内に存在しない場合
                      msgdspflg = true;
                      break;
                  }
              }
          }
      }

      // ガイダンス表示アリ判定の場合
      if (msgdspflg) {
          // 確認ダイアログの表示
          aaui045_confirmDialog(aaui045_dialogMsg, aaui045_dialogTitle, '270', '90%',
                  aaui045_dialogOkBtnMsg, aaui045_dialogCancelBtnMsg, function(cancel) {
              if (cancel) {
                  return false;
              }
              mailcheckdspflg = true;

              //safariのリンク押下時
              var ua = navigator.userAgent;
              if (ua.match('Safari') && $(event).attr('href')) {
                  var script = '<script type=\"text/javascript\">function link() {location.href = \"'
                      + $(event).attr('href')
                      +'\";}</script>';
                  $('body').append(script);
                  var click = $(event).attr('onclick').replace(';','&&link();');
                  $(event).attr('onclick', click);
                  $(event).trigger('click');
              } else {
                  event.click();
              }
          });
      }

      // ガイダンス表示ナシ判定の場合
      else {
          mailcheckdspflg = true;

      }
  }

  return mailcheckdspflg;

};

/**
* 確認ダイアログを作成する。
* 
* @param message ダイアログに表示するメッセージ
* @param title ダイアログのタイトル
* @param height ダイアログの高さ
* @param width ダイアログの幅
* @param buttonok OKボタン押下時の処理
* @param buttoncancel キャンセルボタン押下時の処理
* @param response コールバック関数
* @return なし
*/
function aaui045_confirmDialog(message, title, height, width, buttonok,
      buttoncancel, response) {

  var _dlg = $('<div>' + message + '</div>');
  var _buttons = {};

  if (aaui045_isCkClsBlackList || (!aaui045_isCkClsBlackList && aaui045_isDispOkBtn)) {
      // チェック方式がブラックリスト方式の場合または、チェック方式がホワイトリスト方式かつ、OKボタン表示有無が表示の場合
      _buttons[buttonok] = function() {
          $(this).dialog('close');
          response(false)
      };
  }

  _buttons[buttoncancel] = function() {
      $(this).dialog('close');
      response(true)
  };

  _dlg.dialog({
      modal : true,
      draggable : false,
      resizable : false,
      closeText : "",
      title : title,
      height : height,
      width : width,
      buttons : _buttons,
      overlay : {
          opacity : 0.3,
          background : '#225B7F'
      }, 
      open: function(event) {
          var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
          var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
          $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
          $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));

          var version = androidVersion();
          if ('2.3' == version) {
              $('body').prepend('<table id = "dummytable" height="9999"></table>');
          }
          $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
          $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
          $(".ui-button-background").removeClass("ui-button");
          $(".ui-dialog-titlebar-close").hover(function() {
              $(this).addClass("ui-state-hover");
          }, function() {
              $(this).removeClass("ui-state-hover");
          })

      },
      close: function(event) {
          var version = androidVersion();
          if ('2.3' == version) {
              $("#dummytable").remove();
          }
     }
  });

};

/**
 * メールアドレスチェック対象の項目を選出する
 * 
 * @param idList メールアドレスの物理項目ID群("txtBox001, txtBox002...")
 * @param addrList メールアドレス区分判定用("1,1...")
 * @param chkFlgList メール通知パスワード利用等判定([true,true...])
 * @return targetIdList 判定対象項目ID一覧
 */
function selectTargetId(idList, addrList, chkFlgList){

    var targetIdList = null;
    if(idList != null && idList != ""){
        targetIdArr = idList.split(",");
        addrArr = addrList.split(",");

        for(var i = 0; i < targetIdArr.length; i++){
            // チェックする物理項目IDの数だけ処理を行う
            var mailAddrChkFlg = "false";
            
            // ドメインチェック対象かどうかを判定する
            switch($.trim(addrArr[i])){
                case "1":
                    // メールアドレス１の場合
                    mailAddrChkFlg = aaui045_checkMailAddr1;
                    break;
                case "2":
                    // メールアドレス２の場合
                    mailAddrChkFlg = aaui045_checkMailAddr2;
                    break;
                case "3":
                    // メールアドレス３の場合
                    mailAddrChkFlg = aaui045_checkMailAddr3;
                    break;
                case "4":
                    // メールアドレス４の場合
                    mailAddrChkFlg = aaui045_checkMailAddr4;
                    break;
                default:
                    // 上記以外の場合
                    break;
            }

            if(mailAddrChkFlg == "true" && chkFlgList[i]){
                // ドメインチェック対象 かつ メール通知パスワード利用する場合のみ判定対象とする
                if(targetIdList == null){
                    // 対象物理項目IDが他に存在しない場合、そのまま代入する。
                    targetIdList = $.trim(targetIdArr[i]);
                } else {
                    // 対象物理項目IDが他に存在する場合、カンマをはさんで代入する。
                    targetIdList = targetIdList + "," + $.trim(targetIdArr[i]);
                }
            }
        }
    }

    return targetIdList;
};/*
 * ファイル名    aaui046_sp.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2015 NTT DATA
 * 収容物  金利優遇サービス確認ダイアログ
 *         金利優遇サービス注意喚起ダイアログ
 * 
 * 修正履歴
 * 2015.03.17 NTTDFC 夜光 Phase4.0 金利優遇サービス
 * 2023.02.20 大津 麻祐菜 AnserParaSOL WebViewスマホ画面対応（Phase2）
 */

// カスタマイズ可能文言
var aaui046_dialogTitle = '金利優遇サービス対象商品確認';

var aaui046_dialogOkBtnMsg = 'OK';

var aaui046_dialogCancelBtnMsg = 'キャンセル';

var aaui046_dialogMsg = 'お客様が選択していただいた商品は金利優遇サービス対象外です。<br>よろしいでしょうか。';

var aaui046_dialogDspFlg = true;

//二重サブミット回避フラグ
var aaui046_formSendFlg = false;

/** 金利優遇サービスポップアップテンプレート */
var aaui046_krygSvcPopup = "krygSvcPopup";

/** 金利優遇サービスポップアップ画面を初期化する。 */
var krygSvcPopup = {};
krygSvcPopup.init= function(topcTargetButtons) {

    // PCサイトへダイアログ処理を取り消す。
    if (aaui046_dialogDspFlg) {
        $(topcTargetButtons).each(function(i, val) {

            removePcDispIconBtnId(val)

            var click_temp = $('#' + val).attr('onclick');

            // onclick属性を初期化する。
            $('#' + val).off('click');
            $('#' + val).attr('onclick', click_temp);

        });
    }

    window.body = document.body;

  if (window.body) {
    krygSvcPopup.popup = document.getElementById( aaui046_krygSvcPopup );
    
    if (krygSvcPopup.popup != null) {
      window.body.appendChild(krygSvcPopup.popup);
    }

    // 背面のレイヤーを作成する。
    laylerDialogDisp(krygSvcPopup.popup);
  }
}

/**
 * PCサイトへダイアログボタンID配列から金利優遇注意喚起ダイアログボタンIDを削除する。
 * 
 * @param topcTargetButton PCサイトへダイアログ対象ボタン
 * @return なし
 */
function removePcDispIconBtnId(topcTargetButton) {

    var index = pcDispIconBtnIdArray.indexOf(topcTargetButton);

    if (index != -1) {
        pcDispIconBtnIdArray.splice(index, 1);
    }

}
/**
 * 金利優遇サービスダイアログコントロールメソッド
 * 
 * @param element       ボタン情報
 * @param btnKeyObject  ボタン詳細情報（キー情報Object）
 *           - buttonName      :ボタン名
 *           - buttonDisabled  :ボタン活性非活性フラグ
 *           - symbolicName    :シンボリックネーム
 *           - onclick    :クリック時処理(現状はloadingのみ対応する)
 * 
 * @return なし
 */
function showKrygSvcPopup(element, btnKeyObject) {

  // ダイアログを使用するかしないかをカスタマイズで設定できます（デフォルトは使用）
  if (aaui046_dialogDspFlg) {

      buildKrygSvcPopup(element, btnKeyObject);
      // ポップアップ画面を表示する。
      krygDisplayPopup(btnKeyObject); 

  } else {

      krygSvcPopupNoDsp(element, btnKeyObject);
  }
}
/**
 * 金利優遇注意喚起ダイアログコントロールメソッド
 *
 * @param element
 * @param btnKeyObject  ボタン詳細情報（キー情報Object）
 *          - buttonName      :ボタン名
 *          - buttonDisabled  :ボタン活性非活性フラグ
 *          - symbolicName    :シンボリックネーム
 *          - onclick    : 金利優遇注意喚起ダイアログボタン押下時イベント(loadingのみ対応)
 */
function showKrygSvcAlertPopup(element, btnKeyObject) {

	// ダイアログを使用するかしないかをカスタマイズで設定できます（デフォルトは使用）
	if (aaui046_dialogDspFlg) {

		// ボタン情報を定義（注意喚起ダイアログ）
		// SGA001, SGA002,
		// SGW001, SGW002, SGW003 から呼び出されます。
		var krygSvcDialogButtons = {};
		krygSvcDialogHeight = 'auto';
		krygSvcDialogWidth = '90%';

		krygSvcDialogButtons = createKrygSvcAlertDialogBtnInfo(element, krygSvcDialogButtons);
		buildKrygSvcPopup(element, btnKeyObject);

		// ダイアログの生成
		aaui046_confirmDialog(element, btnKeyObject, krygSvcDialogButtons,
				krygSvcDialogHeight, krygSvcDialogWidth);

		// ボタンの活性・非活性の制御を行います
		setKrygSvcButtonsDisabled(btnKeyObject);

	} else {
		krygSvcDialogFormSend(element, element.name);
	}
}
/**
 * 金利優遇サービスダイアログ表示なし時処理
 * 
 * @param element       ボタン情報
 * @param btnKeyObject  ボタン詳細情報（キー情報Object）
 *           - buttonName      :ボタン名
 *           - buttonDisabled  :ボタン活性非活性フラグ
 *           - symbolicName    :シンボリックネーム
 *           - onclick    :クリック時処理(現状はloadingのみ対応する)
 * 
 * @return なし
 * 
 */
function krygSvcPopupNoDsp(element, btnKeyObject) {
 
    var onclick = '';

    // 該当ボタンのonclick処理を取得する。
    for(var btnIdx=0; btnIdx<btnKeyObject.length; btnIdx++){
        if (element.name == btnKeyObject[btnIdx].symbolicName) {
            onclick = btnKeyObject[btnIdx].onclick;
        }
    }

    var $button = $("#" + element.id);

    // onclick属性を初期化する。
    $button.off('click');
    $button.attr('onclick', '');

    var click_temp = '';

    // 該当ボタンが「PCサイトへ：class」である場合
    if($button.hasClass(aaui044_pcDispIconClass)){

        tmpBtnOnclickBsEvent = element;
        click_temp = "return loading($('#" + element.id + "'))";

        // PCサイトへボタンの場合、処理中処理を呼出ようにする。
        // 処理中処理：PCサイトへボタン対応、処理中メッセージ対応
        $button.attr('onclick', click_temp);

    // 該当ボタンが「PCサイトへ：class」でない場合
    } else {
        // 処理中対象ボタンの場合
        if (onclick !=null && onclick.match('loading')) {

            click_temp = "return loading($('#" + element.id + "'))";

            $button.attr('onclick', click_temp);

         }
    }
    $button.click();
}
/**
* 金利優遇サービスポップアップを設定し、画面を作成する。
*
* @param element       ボタン情報
* @param btnKeyObject  ボタン詳細情報（キー情報Object）
*           - buttonName      :ボタン名
*           - buttonDisabled  :ボタン活性非活性フラグ
*           - symbolicName    :シンボリックネーム
*           - onclick    :クリック時処理(現状はloadingのみ対応する)
* 
* @return なし
*/
function buildKrygSvcPopup(element, btnKeyObject) {

  // 臨時onclick属性を初期化する。
  tmpBtnOnclickBs = "";

  var symbolicName = '';
  var onclick = '';
  var buttonName = '';
  // ボタン情報（btnKeyObject）がある場合、ボタン名設定
  for(var btnIdx=0; btnIdx<btnKeyObject.length; btnIdx++){

    symbolicName = btnKeyObject[btnIdx].symbolicName;
    onclick = btnKeyObject[btnIdx].onclick;
    buttonName = btnKeyObject[btnIdx].buttonName;

    var $button = $("#" + buttonName);

    // 該当ボタンが「PCサイトへ：class」である場合
    if($button.hasClass(aaui044_pcDispIconClass)){
      $button.click({element:element, symbolicName:symbolicName, onclick:onclick, buttonName:buttonName}, krygSvcPopup_onclick01);

    // 該当ボタンが「PCサイトへ：class」でない場合
    } else {
      $button.click({element:element, symbolicName:symbolicName, onclick:onclick, buttonName:buttonName}, krygSvcPopup_onclick02);
    }
  }
}

/**
* 金利優遇サービスポップアップボタンのonclick属性０１
* 
* @param event submit情報
* @return なし
*/
function krygSvcPopup_onclick01(event){

    $("#" + event.data.element.form.id + " [type=hidden]").each(function () {

        if (this.name.indexOf('forward_') != -1) {
            event.data.element.form.removeChild(this);
        }
    });
  var input = document.createElement("input");
  input.setAttribute("type", "hidden");
  input.name = event.data.symbolicName;
  event.data.element.form.appendChild(input);

  var onclick = event.data.onclick;
  var buttonName = event.data.buttonName;

  // 処理中対象である場合
  if (onclick !=null && onclick.match('loading')) {

      // PCサイトダイアログの[OK」ボタン押下時、処理中処理を呼出すようにする。
      // 処理中処理で、金利優遇注意喚起ダイアログの該当ボタンのonclick処理が実行される。
      tmpBtnOnclickBs = "loading(event)";

      // 金利優遇注意喚起ダイアログの該当ボタンを押下時、submitするようにする。
      var click_temp = "formSend('"+ event.data.element.form.id +"')";

      $('#' + buttonName).off('click');
      $('#' + buttonName).attr('onclick', click_temp);

      // 金利優遇注意喚起ダイアログの該当ボタンのPCサイト処理を取り消す。
      // PCサイトダイアログが処理中処理で二重表示を避けるため。
      removePcDispIconBtnId(buttonName);
  } else {
      // 処理中対象外の場合、PCサイトダイアログの[OK」ボタン押下時、submitするようにする。
      tmpBtnOnclickBs = "formSend('"+ event.data.element.form.id +"')";
  }

}

/**
* 金利優遇サービスポップアップボタンのonclick属性０２
* 
* @param event submit情報
* @return なし
*/
function krygSvcPopup_onclick02(event){

  var input = document.createElement("input");
  input.setAttribute("type", "hidden");
  input.name = event.data.symbolicName;
  event.data.element.form.appendChild(input);

  var onclick = event.data.onclick;
  var buttonName = event.data.buttonName;

  // 処理中対象である場合
  if (onclick !=null && onclick.match('loading')) {

      // 金利優遇注意喚起ダイアログの該当ボタンを押下時、submitするようにする。
     var click_temp = "formSend('"+ event.data.element.form.id +"')";

     $('#' + buttonName).off('click');
     $('#' + buttonName).attr('onclick', click_temp);

     // 処理中処理にて、金利優遇注意喚起ダイアログの該当ボタンの押下時処理が実行される。
     loading($('#' + buttonName));

  } else {
      // 遷移する。
      formSend(event.data.element.form.id);
  }
}

/**
* ポップアップ画面を表示する機能。
* 
* @param なし
* @return なし
*/
function krygDisplayPopup(btnKeyObject) {

  if($('#'+aaui046_krygSvcPopup +' .body') != null){
    var popupContentId = $('#'+aaui046_krygSvcPopup+' .body').attr('id');
    krygConfirmPopup(aaui046_dialogTitle, '310', '290',function(cancel) { if (cancel) { return;}});
  }
  
  // ボタンの活性・非活性の制御を行います
  setKrygSvcButtonsDisabled(btnKeyObject);
}

/**
 * 金利優遇サービス注意喚起ダイアログボタン情報定義
 *
 * @param element
 * @param krygSvcDialogButtons
 * @return krygSvcDialogButtons ボタン情報
 */
function createKrygSvcAlertDialogBtnInfo(element, krygSvcDialogButtons) {

	krygSvcDialogButtons[aaui046_dialogOkBtnMsg] =
	{
			id    : aaui046_dialogOkBtnMsg,
			text  : aaui046_dialogOkBtnMsg,
			click : function() {
				krygSvcDialogFormSend(element, element.name);
				$(this).dialog('close');
			}
	};
	krygSvcDialogButtons[aaui046_dialogCancelBtnMsg] =
	{
			id    : aaui046_dialogCancelBtnMsg,
			text  : aaui046_dialogCancelBtnMsg,
			click : function(){
				$(this).dialog('close');
			}
	};
	return krygSvcDialogButtons;
}

/**
 * 金利優遇注意喚起ダイアログのボタン押下時フォームサブミット処理
 *
 * @param element
 * @param symbolicName ボタンシンボリックネーム
 * @return なし
 */
function krygSvcDialogFormSend(element, symbolicName) {
	var input = document.createElement("input");
	input.setAttribute("type", "hidden");
	input.name = symbolicName;

	element.form.appendChild(input);

	if (!aaui046_formSendFlg) {
		$(element.form).submit();
		aaui046_formSendFlg = true;
	}
}

/**
 * 金利優遇注意喚起ダイアログ作成
 *
 * @param element
 * @param btnKeyObject  ボタン詳細情報（キー情報Object）
 *          - buttonName      :ボタン名
 *          - buttonDisabled  :ボタン活性非活性フラグ
 *          - symbolicName    :シンボリックネーム
 * @param krygSvcDialogButtons ボタン情報
 * @param height
 * @param width
 */
function aaui046_confirmDialog(element, btnKeyObject, krygSvcDialogButtons, height, width) {

	var _dlg = $('<div>' + aaui046_dialogMsg + '</div>');

	var buttonName = '';
	var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
	var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
	$dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);

	// ダイアログの生成を行います
	_dlg.dialog({
		modal:true,
		draggable:false,
		resizable:false,
		title:aaui046_dialogTitle,
		closeText:"",
		height:height,
		width:width,
		buttons:krygSvcDialogButtons,
		dialogClass: '',
		closeOnEscape: false,
		overlay:{
			opacity: 0.3,
			background: '#225B7F'
		},
		open:function(){
			$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
			$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
			$(".ui-button-background").removeClass("ui-button");
			$(".ui-dialog-titlebar-close").hover(function() {
				$(this).addClass("ui-state-hover");
			}, function() {
				$(this).removeClass("ui-state-hover");
			})
		}
	});

	// ダイアログの生成が終わった後に、
	// ボタンの活性、非活性の制御を行います。
	var buttonDisabled = '';
	for (var i = 0; i < btnKeyObject.length; i++) {

		buttonName = btnKeyObject[i].buttonName;
		buttonDisabled = btnKeyObject[i].buttonDisabled;

		if (buttonDisabled == true) {
			$("#"+buttonName).button("disable");
		}
	}
}

/**
 * 金利優遇注意喚起ダイアログ表示処理
 * 
 * @param title タイトル
 * @param height ダイアログ高
 * @param width ダイアログ幅
 * @param response 
 * @return なし
 */
function krygConfirmPopup(title, height, width, response) {

	// 金利優遇注意喚起ダイアログ作成にて表示処理を行うため使用しない。
	var dlg = $('#'+aaui046_krygSvcPopup).dialog();
    if (dlg.dialog('isOpen')) {
        dlg.dialog('close');
    }
    var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
    
    $('#'+aaui046_krygSvcPopup).dialog({
        modal: true,
        draggable: false,
        resizable: false,
        title: title,
        closeText:"",
        height: height,
        width: width,
        dialogClass: '',
        closeOnEscape: false,
        overlay: {
        opacity: 0.3,
        background: '#225B7F'
        },
        open:function(){
        	$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
        	$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
        	$(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
        }
    });
 }

/**
* ボタンの活性・非活性を制御する。
* 
* @param btnKeyObject  ボタン情報
* @return なし
*/
function setKrygSvcButtonsDisabled(btnKeyObject) {

  for(var btnIdx = 0; btnIdx < btnKeyObject.length; btnIdx++){

    if(btnKeyObject[btnIdx].buttonDisabled == true) {
      $("#" + btnKeyObject[btnIdx].buttonName).attr('disabled', true);
    }

  }
}

/**
 * ポップアップ画面を非表示にする。
 * 
 * @param なし
 * @return なし
 */
function closeKrygSvcPopup() {

  // 金利優遇サービスポップアップのpopupがNULLでない場合、非表示にする。
  if (krygSvcPopup.popup != null) {
         krygSvcPopup.popup.style.display = "none";
          $('#' + aaui046_krygSvcPopup).dialog('close');
  }

  // スクロールを禁止を解除
  $("html").off('.noScroll');
  // 縦横変更時の設定を解除
  $(window).off('.reOpen');
    
  // 背面のレイヤーを非表示
  $('#laylerDialog').dialog('close');

  tmpBtnOnclickBs = '';
}
/*
 * ファイル名     aaui047.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2015 NTT DATA
 * 収容物  ソフトウェアトークン取引認証通知ポップアップ表示機能
 * 
 * 修正履歴
 * 2015.06.01 田中 昭裕 共同_R013_ＳＷトークンによる取引認証 新規作成
 * 2019.02.07 菅原 拓海 R002_ソフトウェアトークン利用開始フロー改善
 */

// カスタマイズ可能文言
var aaui047_sendSwTokenTranAuthPopupTitle = '取引認証通知';
var aaui047_sendSwTokenTranAuthPopupMsg = 'トークンアプリに取引認証通知を送信しました。トークンアプリにて振込通知内容をご確認の上、手続きを進めて下さい。';
var aaui047_sendSwTokenTranAuthPopupOkBtnMsg = 'OK';
var aaui047_sendSwTokenTranAuthPopupUseFlag = true;
var aaui047_sendSwTokenTranInfPopupTitle = '取引内容送信';
var aaui047_sendSwTokenTranInfPopupMsg = 'トークンアプリに取引内容を送信しました。トークンアプリにて取引内容をご確認の上、手続きを進めて下さい。';

/**
 * ソフトウェアトークン取引認証通知ポップアップを表示する。
 */
function dispSendSwTokenTranAuthPopup() {

    // デフォルトメッセージ設定
    var dialogTitle = aaui047_sendSwTokenTranAuthPopupTitle;
    var dialogMsg = aaui047_sendSwTokenTranAuthPopupMsg;
    var dialogOkBtnMsg = aaui047_sendSwTokenTranAuthPopupOkBtnMsg;
    var useFlag = aaui047_sendSwTokenTranAuthPopupUseFlag;
    var appUseFlg = $('#SOFT_TK_BANK_APP_USE_FLG').val();

    // ソフトウェアトークン取引認証通知ポップアップ使用有無を判定する
    if (!useFlag) {

        return;

    }
    if (appUseFlg == 'true') {

		var dialogTitle = aaui047_sendSwTokenTranInfPopupTitle;
		var dialogMsg = aaui047_sendSwTokenTranInfPopupMsg;

    }

    aaui047_sendSwTokenTranAuthPopupDialog(dialogMsg, dialogTitle, 'auto', '90%', dialogOkBtnMsg);

};

/**
 * ソフトウェアトークン取引認証通知ポップアップを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonOk OKボタン押下時の処理
 * @return なし
 */
function aaui047_sendSwTokenTranAuthPopupDialog(message, title, height, width, buttonOk) {

    var _dlg = $('<div>' + message + '</div>');

    var _buttons = {};
    
    _buttons[buttonOk] = function() {

        $(this).dialog('close');

    };

    _dlg.dialog( {
    	
    	modal : true,
    	draggable : false,
    	resizable : false,
    	title : title,
    	closeText:"",
    	height : height,
    	width : width,
    	buttons : _buttons,
    	overlay : {
    		opacity : 0.3,
    		background : '#225B7F'
    	},
    	open: function(event) {
    	   var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
		   var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
		   $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
		   $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
    		
    		var version = androidVersion();
    		if ('2.3' == version) {
    			$('body').prepend('<table id = "dummytable" height="9999"></table>');
    		}
    	    $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
    	    $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
    	    $(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })

    	},
    	close: function(event) {
    		var version = androidVersion();
    		if ('2.3' == version) {
    			$("#dummytable").remove();
    		}
    	}
    });
};

/*
 * ファイル名     aaui048.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2015 NTT DATA
 * 収容物  トークンアプリ確認ポップアップ表示機能
 * 
 * 修正履歴
 * 2015.07.29 高岩 哲也 共同_R013_ＳＷトークンによる取引認証 新規作成
 * 2019.02.07 菅原 拓海 R002_ソフトウェアトークン利用開始フロー改善
 */

// カスタマイズ可能文言
var aaui048_dialogTitle = 'トークンアプリ確認';
var aaui048_dialogMsg = 'トークンアプリ上の取引確認開始タブを押すと「取引確認機能が有効になりました。」と表示されます。表示を確認できた方は「OK」を押して下さい。<br />トークンアプリの設定方法について再度確認される方は「キャンセル」を押して下さい。';
var aaui048_dialogOkBtnMsg = 'OK';
var aaui048_dialogCancelBtnMsg = 'キャンセル';
var aaui048_dialogDspFlg = true;
var aaui048_confirmdspflg = false;
var aaui048_dialogAppTitle = 'トークンアプリ確認';
var aaui048_dialogAppMsg = 'トークンアプリ上の取引確認開始タブを押すと「取引確認機能が有効になりました。」と表示されます。表示を確認できた方は「OK」を押して下さい。<br />トークンアプリの設定方法について再度確認される方は「キャンセル」を押して下さい。';

/**
 * 確認メッセージを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @return なし
 */
function dispTokenAppConfirmPopup(event) {

	if (!aaui048_dialogDspFlg) {
		return true;
	}

	var attentionFlg = $('#BOC_ATTENTION_FLG').val();
	var appUseFlg = $('#SOFT_TK_BANK_APP_USE_FLG').val();

	if (attentionFlg != 'true') {
		return true;
	}

	if (appUseFlg == 'true') {
		aaui048_dialogTitle = aaui048_dialogAppTitle;
		aaui048_dialogMsg = aaui048_dialogAppMsg;
	}

	// ダイアログを使用するかしないかをカスタマイズで設定できます（デフォルトは使用）
	if (aaui048_dialogDspFlg && !aaui048_confirmdspflg) {
		aaui048_confirmDialog(aaui048_dialogMsg, aaui048_dialogTitle, 'auto',
				'90%', aaui048_dialogOkBtnMsg, aaui048_dialogCancelBtnMsg,
				function(cancel) {
					if (cancel) {
						return;
					}
					aaui048_confirmdspflg = true;

					// safariのリンク押下時
					var ua = navigator.userAgent;
					if (ua.match('Safari') && $(event).attr('href')) {
						var script = '<script type=\"text/javascript\">function link() {location.href = \"' + $(
								event).attr('href') + '\";}</script>';
						$('body').append(script);
						var click = $(event).attr('onclick').replace(';',
								'&&link();');
						$(event).attr('onclick', click);
						$(event).trigger('click');
					} else {
						event.click();
					}
				});
	} else {
		return aaui048_confirmdspflg;
	}
	return aaui048_confirmdspflg;
};

/**
 * トークンアプリ確認ポップアップ表示機能を作成する。
 * 
 * @param message トークンアプリ確認ポップアップ表示機能に表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function aaui048_confirmDialog(message, title, height, width, buttonok,
		buttoncancel, response) {
	var _dlg = $('<div>' + message + '</div>');
	var _buttons = {};
	_buttons[buttonok] = function() {
		$(this).dialog('close');
		response(false)
	};
	_buttons[buttoncancel] = function() {
		$(this).dialog('close');
		response(true)
	};
	
	_dlg.dialog( {
		modal : true,
		closeText:"",
		draggable : false,
		resizable : false,
		title : title,
		height : height,
		width : width,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		},
		open: function(event) {
 		   var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
		   var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
		   $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
		   $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
    		
			var version = androidVersion();
			if ('2.3' == version) {
				$('body').prepend('<table id = "dummytable" height="9999"></table>');
			}
			$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
			$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
			$(".ui-button-background").removeClass("ui-button");
			$(".ui-dialog-titlebar-close").hover(function() {
				$(this).addClass("ui-state-hover");
			}, function() {
				$(this).removeClass("ui-state-hover");
			})
		},
		close: function(event) {
			var version = androidVersion();
			if ('2.3' == version) {
				$("#dummytable").remove();
			}
		}
	});
};/*
 * ファイル名 aaui049.js
 * 開発システム ANSER-WEB(AA)
 * 著作権 Copyright(C) 2016 NTT DATA
 * 収容物 ファイルアップロード機能
 * ・ファイルアップロード利用判定機能
 * ・ファイルアップロード機能初期化
 * ・アップロードファイル一覧表示機能（再表示時）
 * ・ファイルアップロード機能（クライアント）
 * ・アップロードファイル削除機能（クライアント）
 * 
 * 修正履歴
 * 2016.02.16 田口 雄一朗 R002_証書貸付ローンサービス追加 新規作成
 */

// カスタマイズ可能文言
var aaui049_warnMsg_fileUpload_unavailable = 'アップロード推奨環境ではないため、書類アップロードが実施出来ません。'
var aaui049_dialogOkBtnMsg = 'OK'
var aaui049_dialogCancelBtnMsg = 'キャンセル'
var aaui049_dialogTitle_checkError_fileSize = '確認'
var aaui049_dialogMsg_checkError_fileSize = 'ファイルサイズが規定範囲内ではありません。<BR>ご確認のうえ、再度アップロードをお願い致します。'
var aaui049_dialogTitle_checkError_extension = '確認'
var aaui049_dialogMsg_checkError_extension = 'アップロード可能な拡張子ではありません。<BR>再度確認のうえ、アップロードをお願い致します。'
var aaui049_dialogTitle_checkError_fileCount = '確認'
var aaui049_dialogMsg_checkError_fileCount = 'アップロード最大件数超過（5ファイルまで）のためアップロードできません。'
var aaui049_dialogTitle_checkWarn_fileName = '確認'
var aaui049_dialogMsg_checkWarn_fileName = '文字数上限を超えているため、一部切り取って受付ました。'
var aaui049_dialogTitle_uploadConfirm = 'アップロード実行確認'
var aaui049_dialogMsg_uploadConfirm = 'ファイルアップロードを実行しますか？<BR>よろしければ「OK」を押して下さい。'
var aaui049_dialogTitle_uploadSuccess = 'アップロード正常終了'
var aaui049_dialogMsg_uploadSuccess = 'ファイルアップロード処理が正常終了しました。'
var aaui049_dialogTitle_uploadError = 'アップロード異常終了'
var aaui049_dialogMsg_uploadError = 'ファイルアップロード処理が異常終了しました。'
var aaui049_dialogTitle_deleteConfirm = 'ファイル削除実行確認'
var aaui049_dialogMsg_deleteConfirm = 'ファイルを削除してもよろしいですか？<BR>よろしければ「OK」を押して下さい。'
var aaui049_dialogTitle_deleteSuccess = 'ファイル削除正常終了'
var aaui049_dialogMsg_deleteSuccess = 'ファイル削除処理が正常終了しました。'
var aaui049_dialogTitle_deleteError = 'ファイル削除異常終了'
var aaui049_dialogMsg_deleteError = 'ファイル削除処理が異常終了しました。'
var aaui049_dialogTitle_fileOperationUpload = 'ファイルアップロード中'
var aaui049_dialogMsg_fileOperationUpload = 'ただ今ファイルアップロード中です。<BR>しばらくお待ち下さい。'
var aaui049_dialogTitle_fileOperationDelete = 'ファイル削除中'
var aaui049_dialogMsg_fileOperationDelete = 'ただ今ファイル削除中です。<BR>しばらくお待ち下さい。'
var aaui049_deleteBtnMsg = '削除'

// グローバル変数
var PROCESS_TYPE_UPLOAD = "UPLOAD";
var PROCESS_TYPE_DELETE = "DELETE";
var CONTEXT_PATH;
var ELEMENT_NAME_FILE_ADD_BTN_INPUT;
var ELEMENT_NAME_FILE_ADD_BTN_SPAN;
var SESSION_ID_NAME;
var SESSION_ID_VALUE;
var SERVER_ID_NAME;
var SERVER_ID_VALUE;
var fileSeqCounter;
var fileSeqArray;
var UPLOAD_POSSIBLE_MAX_FILE_SIZE;
var UPLOAD_POSSIBLE_FILE_COUNT;
var UPLOAD_POSSIBLE_EXTENSION_ARRAY;
var DOCUMENT_CLS_FILE_LIST_ID_BASE;
var ELEMENT_ID_WARNING_AREA;
var ELEMENT_ID_WARNING_MSG;
var ELEMENT_IDS_ERROR_DISPLAY;
var ELEMENT_IDS_ERROR_DESTROY;
var ELEMENT_ID_SYSTEMDATETIME;
var ELEMENT_ID_ERROR_MSG;

/**
 * ファイルアップロード利用判定機能
 * 
 * @param elemIdwarnArea
 *            警告表示エリア画面要素ID
 * @param elemNmFileAddBtnInput
 *            追加ボタンinputタグNAME
 * @param elemNmFileAddBtnSpan
 *            追加ボタンspanタグNAME
 * @param elemIdGuidanceArea
 *            利用者ガイダンス画面要素ID
 * @param elemIdConfirmBtnArea
 *            確認画面へボタンエリア画面要素ID
 * @return 判定結果（真偽値）
 */
function judgeFileUpload(
	elemIdwarnArea, 
	elemNmFileAddBtnInput, 
	elemNmFileAddBtnSpan,
	elemIdGuidanceArea,
	elemIdConfirmBtnArea
	) {

	// File API利用可否判定
	var isFileUpload = window.File;

	if (isFileUpload) {

		return true;

	} else {

		// 警告エリアを表示する
		document.getElementById(elemIdwarnArea).style.display = "";

		// 追加ボタンを使用不可にする
		if(elemNmFileAddBtnSpan){

			var elemsFileUpBtnSpan = document.getElementsByClassName("fileupload-input-button");

			for (var i = 0; i < elemsFileUpBtnSpan.length; i++) {

				elemsFileUpBtnSpan[i].className = 'fileupload-common-button fileupload-input-button disabled';

			}

		}

		if(elemNmFileAddBtnInput){

			var elemsFileUpBtnInput = document.getElementsByName(elemNmFileAddBtnInput);

			for (var i = 0; i < elemsFileUpBtnInput.length; i++) {

			    elemsFileUpBtnInput[i].disabled = true;

			}

		}

		// 利用者ガイダンスを非表示にする
		if(elemIdGuidanceArea){

			document.getElementById(elemIdGuidanceArea).style.display = "none";

		}

		// 確認画面へボタンを非表示にする
		if(elemIdConfirmBtnArea){

			document.getElementById(elemIdConfirmBtnArea).style.display = "none";

		}

		return false;

	}

}

/**
 * ファイルアップロード機能初期化
 * 
 * @param contextPath コンテキストパス
 * @param bankCd 金融機関コード
 * @param elemenNamefileAddBtnInput 追加ボタンinputタグNAME
 * @param elemenNamefileAddBtnSpan 追加ボタンspanタグNAME
 * @param sessionIdName セッションID名
 * @param sessionIdValue セッションID値
 * @param serverIdName サーバID識別子名
 * @param serverIdValue サーバID識別子値
 * @param fileSeqCounterValue ファイル通番カウンタ設定値
 * @param uploadPossibleMaxFileSize 登録可能最大ファイルサイズ
 * @param uploadPossibleFileCount 登録可能ファイル件数
 * @param uploadPossibleExtensions 登録可能拡張子
 * @param documentClsFileListIdBase 書類区分別アップロード一覧領域ID基本部
 * @param elemIdWarningArea 警告エリア画面要素ID
 * @param elemIdWarningMsg 警告メッセージ画面要素ID
 * @param elemIdsErrorDisplay 異常時表示対象画面項目ID
 * @param elemIdsErrorDestroy 異常時破棄対象画面要素
 * @param elemIdSystemDateTime システム日時画面要素ID
 * @param elemIdErrorMsg エラーメッセージ画面要素ID
 * @return なし
 */
function initFileUpload(
	contextPath, 
	elemenNamefileAddBtnInput, 
	elemenNamefileAddBtnSpan, 
	sessionIdName, 
	sessionIdValue, 
	serverIdName, 
	serverIdValue, 
	fileSeqCounterValue, 
	uploadPossibleMaxFileSize, 
	uploadPossibleFileCount, 
	uploadPossibleExtensions, 
	documentClsFileListIdBase,
	elemIdWarningArea,
	elemIdWarningMsg,
	elemIdsErrorDisplay,
	elemIdsErrorDestroy,
	elemIdSystemDateTime,
	elemIdErrorMsg) {

	// グローバル変数設定
	CONTEXT_PATH = contextPath;
	ELEMENT_NAME_FILE_ADD_BTN_INPUT = elemenNamefileAddBtnInput;
	ELEMENT_NAME_FILE_ADD_BTN_SPAN = elemenNamefileAddBtnSpan;
	SESSION_ID_NAME = sessionIdName;
	SESSION_ID_VALUE = sessionIdValue;
	SERVER_ID_NAME = serverIdName;
	SERVER_ID_VALUE = serverIdValue;
	fileSeqCounter = Number(fileSeqCounterValue);
	fileSeqArray = new Array();
	UPLOAD_POSSIBLE_MAX_FILE_SIZE = Number(uploadPossibleMaxFileSize);
	UPLOAD_POSSIBLE_FILE_COUNT = Number(uploadPossibleFileCount);
	UPLOAD_POSSIBLE_EXTENSION_ARRAY = uploadPossibleExtensions.replace(/\s+/g, "").split(",");
	DOCUMENT_CLS_FILE_LIST_ID_BASE = documentClsFileListIdBase;
	ELEMENT_ID_WARNING_AREA = elemIdWarningArea;
	ELEMENT_ID_WARNING_MSG = elemIdWarningMsg;
	ELEMENT_IDS_ERROR_DISPLAY = elemIdsErrorDisplay.replace(/\s+/g, "").split(",");
	ELEMENT_IDS_ERROR_DESTROY = elemIdsErrorDestroy.replace(/\s+/g, "").split(",");
	ELEMENT_ID_SYSTEMDATETIME = elemIdSystemDateTime;
	ELEMENT_ID_ERROR_MSG = elemIdErrorMsg;

}

/**
 * アップロードファイル一覧表示機能（再表示時）
 * 
 * @param fileSeq ファイル通番 
 * @param fileNm ファイル名
 * @param documentCls 書類区分
 * @return なし
 */
function dispFileList(
	fileSeq, 
	fileNm, 
	documentCls) {

	// ファイル通番配列に追加
	fileSeqArray.push(fileSeq);

	if (UPLOAD_POSSIBLE_FILE_COUNT <= fileSeqArray.length) {

		// 最大ファイル数を超えた場合、追加ボタン表示制御（使用不可）
		addBtnDispControl(true);

	}
	
	// テンプレート出力
	fileListTempalteOutPut(fileSeq, fileNm, documentCls);

}

/**
 * ファイルアップロード機能（クライアント）
 * 
 * @param file ファイル
 * @param documentCls 書類区分
 * @return なし
 */
function fileUpload(
	file, 
	documentCls) {

	// 入力チェック
	var resultIsFileUpload = checkUploadFile(file);
	
	if (resultIsFileUpload) {

		// ファイル通番を採番
		var fileSeq = ("00" + fileSeqCounter).substr(-3);
		// 確認ダイアログ表示
		var promiseConfirmDialog = doDeferredConfirmDialog(aaui049_dialogTitle_uploadConfirm, aaui049_dialogMsg_uploadConfirm);

		promiseConfirmDialog.done(function(){
			// 「OK」押下時処理

			// ファイル操作ダイアログ表示
			showFileOperationDialog(PROCESS_TYPE_UPLOAD);

			// ファイルアップロード実行
			var promiseFileUpload = doDeferredFileUpload(file.name, file, fileSeq, documentCls);
			promiseFileUpload.done(function(data){
				// ファイルアップロード成功（正常終了）
				var resultInfo = data;
				
				// 処理結果ステータスが成功の場合
				if("success" == resultInfo["RESULT_STATUS"]){
					// ファイルアップロード成功時後処理
					afterProcessSuccess(fileSeq);
	
					// ダイアログ表示
					var classNm = 'fileUploadAlertDialog-uploadSuccess-class';
					fileUploadAlertDialog(aaui049_dialogMsg_uploadSuccess, aaui049_dialogTitle_uploadSuccess, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
	
					if ("true" == resultInfo["IS_EDIT_FILE_NAME"]) {
						// ファイル名編集済みの場合
						var classNm = 'fileUploadAlertDialog-editFileNm-class';
						fileUploadAlertDialog(aaui049_dialogMsg_checkWarn_fileName, aaui049_dialogTitle_checkWarn_fileName, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
					}
					// テンプレート出力
					fileListTempalteOutPut(fileSeq, resultInfo["UPLOAD_FILE_NAME"], documentCls);
	
					// ファイルプレビュー画像表示
					preview(file, fileSeq);
	
				// 処理結果ステータスが誤りの場合
				} else if("warn" == resultInfo["RESULT_STATUS"]){
					// 警告メッセージを設定する
					checkWorningArea();
					var warnMsgElm = document.getElementById(ELEMENT_ID_WARNING_MSG);
					warnMsgElm.innerHTML = resultInfo["SCREEN_MESSAGE"];

					// 警告エリアを“表示”に変更する
					var warnAreaElm = document.getElementById(ELEMENT_ID_WARNING_AREA);
					warnAreaElm.style.display = "";

					// ダイアログ表示
					var classNm = 'fileUploadAlertDialog-uploadWarn-class';
					fileUploadAlertDialog(resultInfo["SCREEN_MESSAGE"], "エラー", 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
					
				// 処理結果ステータスが異常の場合
				} else if("error" == resultInfo["RESULT_STATUS"]){
					// エラーメッセージを設定
					var errorMsgElm = document.getElementById(ELEMENT_ID_ERROR_MSG);
					errorMsgElm.innerHTML = resultInfo["SCREEN_MESSAGE"];
		
					// システム日時を設定
					var systemDateElm = document.getElementById(ELEMENT_ID_SYSTEMDATETIME);
					systemDateElm.innerHTML = resultInfo["SYSTEM_DATE_TIME"];
					
					// 異常時表示画面を表示に設定
					for(var i = 0; i < ELEMENT_IDS_ERROR_DISPLAY.length; i++){
						var errorDisplayElm = document.getElementById(ELEMENT_IDS_ERROR_DISPLAY[i]);
						errorDisplayElm.style.display = "";
					}
					
					// 異常時破棄画面を破棄
					for(var i = 0; i < ELEMENT_IDS_ERROR_DESTROY.length; i++){
						var errorDestroyElm = document.getElementById(ELEMENT_IDS_ERROR_DESTROY[i]);
						errorDestroyElm.parentNode.removeChild(errorDestroyElm);
					}
		
					// ダイアログ表示
					var classNm = 'fileUploadAlertDialog-uploadError-class';
					fileUploadAlertDialog(aaui049_dialogMsg_uploadError, aaui049_dialogTitle_uploadError, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
					
				}
				
				// ファイル操作ダイアログを閉じる
				closeFileOperationDialog();
				return;
				
			});
			promiseFileUpload.fail(function(){
				// ファイルアップロード失敗（異常終了）

				// ファイル操作ダイアログを閉じる
				closeFileOperationDialog();
				return;
			});
		});
		promiseConfirmDialog.fail(function(){
			// 「キャンセル」押下時処理
			return;
		});
	} else {
	    return;
	}
}

/**
 * アップロードファイル削除機能（クライアント）
 * 
 * @param fileSeq ファイル通番
 * @param fileNm ファイル名
 * @param documentCls 書類区分
 * @return なし
 */
function deleteUploadFile(
	fileSeq, 
	fileNm, 
	documentCls) {

	// 確認ダイアログ表示
	var promiseConfirmDialog = doDeferredConfirmDialog(aaui049_dialogTitle_deleteConfirm, aaui049_dialogMsg_deleteConfirm);
	
	promiseConfirmDialog.done(function(){
		// 「OK」押下時処理

		// ファイル操作ダイアログ表示
		showFileOperationDialog(PROCESS_TYPE_DELETE);

		// ファイル削除実行
		var promiseFileDelete = doDeferredFileDelete(fileSeq, fileNm, documentCls);
		promiseFileDelete.done(function(data){
			// ファイル削除成功（正常終了）
			var resultInfo = data;
			
			// 処理結果ステータスが成功の場合
			if("success" == resultInfo["RESULT_STATUS"]){
				// 警告メッセージに空文字を設定
				checkWorningArea();
				var warnMsgElm = document.getElementById(ELEMENT_ID_WARNING_MSG);
				warnMsgElm.innerHTML = "";
				
				// 警告エリアを非表示に設定
				var warnAreaElm = document.getElementById(ELEMENT_ID_WARNING_AREA);
				warnAreaElm.style.display = "none";
	
				// ファイル名配列より削除対象ファイルを破棄
				var idx = fileSeqArray.indexOf(fileSeq);
				if (-1 != idx) {
				    fileSeqArray.splice(idx,1);
				}
	
				// 追加ボタン使用可
				addBtnDispControl(false);
	
				// 表示削除
				$("#fileSeq_" + fileSeq).remove();
	
				// ダイアログ表示
				var classNm = 'fileUploadAlertDialog-deleteSuccess-class';
				fileUploadAlertDialog(aaui049_dialogMsg_deleteSuccess, aaui049_dialogTitle_deleteSuccess, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
			
			// 処理結果ステータスが異常の場合
			} else if("error" == resultInfo["RESULT_STATUS"]){
				// エラーメッセージを設定
				var errorMsgElm = document.getElementById(ELEMENT_ID_ERROR_MSG);
				errorMsgElm.innerHTML = resultInfo["SCREEN_MESSAGE"];

				// システム日時を設定
				var systemDateElm = document.getElementById(ELEMENT_ID_SYSTEMDATETIME);
				systemDateElm.innerHTML = resultInfo["SYSTEM_DATE_TIME"];
				
				// 異常時表示画面を表示に設定
				for(var i = 0; i < ELEMENT_IDS_ERROR_DISPLAY.length; i++){
					var errorDisplayElm = document.getElementById(ELEMENT_IDS_ERROR_DISPLAY[i]);
					errorDisplayElm.style.display = "";
				}
				
				// 異常時破棄画面を破棄
				for(var i = 0; i < ELEMENT_IDS_ERROR_DESTROY.length; i++){
					var errorDestroyElm = document.getElementById(ELEMENT_IDS_ERROR_DESTROY[i]);
					errorDestroyElm.parentNode.removeChild(errorDestroyElm);
				}
				
				// ダイアログ表示
				var classNm = 'fileUploadAlertDialog-deleteError-class';
				fileUploadAlertDialog(aaui049_dialogMsg_deleteError, aaui049_dialogTitle_deleteError, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);				
				
			}

			// ファイル操作ダイアログを閉じる
			closeFileOperationDialog();
			return;
		});
		promiseFileDelete.fail(function(){
			// ファイル削除失敗（異常終了）

			// ファイル操作ダイアログを閉じる
			closeFileOperationDialog();
			return;
		});

	});
	promiseConfirmDialog.fail(function(){
		// 「キャンセル」押下時処理
	    return;
	});
	return;
}

// ▼▼▼【prvate関数】▼▼▼

/**
 * 追加ボタン表示制御。
 * 
 * @param isDisabled
 *            使用可否（true:使用不可/false:使用可）
 * @return なし
 */
function addBtnDispControl(isDisabled) {

	// 追加ボタン表示制御
	var classNameVal = '';
	if (isDisabled) {
		 classNameVal = 'fileupload-common-button fileupload-input-button disabled';
	} else {
		classNameVal = 'fileupload-common-button fileupload-input-button';
	}

	var btnInputElms = document.getElementsByName(ELEMENT_NAME_FILE_ADD_BTN_INPUT);
	var btnSpanElms = document.getElementsByName(ELEMENT_NAME_FILE_ADD_BTN_SPAN);
	for (var i = 0; i < btnInputElms.length; i++) {
		btnInputElms[i].disabled = isDisabled;
	}
	for (var i = 0; i < btnSpanElms.length; i++) {
		btnSpanElms[i].className = classNameVal;
	}
}

/**
 * テンプレート出力。
 * 
 * @param fileSeq ファイル通番 
 * @param fileNm ファイル名
 * @param documentCls 書類区分
 * @return なし
 */
function fileListTempalteOutPut(fileSeq, fileNm, documentCls) {

	sanitaize = {
		tag : function (str) {
			return str.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/ /g, '&#32;').replace(/\t/g, '&#9;').replace(/\r/g, '&#13;').replace(/\n/g, '&#10;').replace(/&/g, '&amp;').replace(/\(/g, '&#40;').replace(/\)/g, '&#41;');
	 	},

		text : function (str) {
			return str.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&/g, '&amp;');
		}
	};

	// テンプレート出力[START]
	var node = ''
	+'    <tr class="template-upload1 fade1" id="fileSeq_' + sanitaize.tag(fileSeq) + '">'
	+'        <td style="width: 70%; word-break: break-all;">'
	+'            <p class="name" style="font-size: 80%;">' + sanitaize.text(fileNm) + '</p>'
	+'            <span class="preview">'
	+'               <canvas id="myCanvas_' + sanitaize.tag(fileSeq) + '" width="1" height="1"></canvas>'
	+'            </span>'
	+'            <strong class="error text-danger"></strong>'
	+'        </td>'
	+'        <td>'
	+'            <input type="button" class="fileupload-common-button fileupload-input-button" onclick="deleteUploadFile(\'' + sanitaize.tag(fileSeq) + '\', \'' + sanitaize.tag(fileNm) + '\', \'' + sanitaize.tag(documentCls) + '\')" value="' + aaui049_deleteBtnMsg + '" />'
	+'        </td>'
	+'    </tr>';
	$("#" + DOCUMENT_CLS_FILE_LIST_ID_BASE + documentCls).append(node);
	// テンプレート出力[END]
}

/**
 * 入力チェック。
 * 【チェック内容】
 *  ・ファイルサイズ（ファイルサイズが0より大きいかどうか。かつ、ファイルサイズがグローバル変数．登録可能最大ファイルサイズ以内かどうか。）
 *  ・拡張子チェック（拡張子が存在するかつ、グローバル変数．登録可能拡張子配列に存在するかどうか。）
 *  ・ファイル数チェック（アップロード済みのファイルがグローバル変数．登録可能ファイル件数未満かどうか。）
 * 
 * @param file Fileオブジェクト
 * @return 真偽値
 */
function checkUploadFile(file){

	var dialogTitle = '確認';
	var fileNm = file.name;
	var fileTypes = fileNm.split(".");

	// ファイルサイズチェック
	if (file.size <= 0) {
		// ダイアログ表示
		var classNm = 'fileUploadAlertDialog-inputCheckError-class';
		fileUploadAlertDialog(aaui049_dialogMsg_checkError_fileSize, aaui049_dialogTitle_checkError_fileSize, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
		return false;
	}
	if (UPLOAD_POSSIBLE_MAX_FILE_SIZE < file.size) {
		// ダイアログ表示
		var classNm = 'fileUploadAlertDialog-inputCheckError-class';
		fileUploadAlertDialog(aaui049_dialogMsg_checkError_fileSize, aaui049_dialogTitle_checkError_fileSize, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
		return false;
	}

	// 拡張子チェック
	if (fileTypes.length == 0) {
		// ダイアログ表示
		var classNm = 'fileUploadAlertDialog-inputCheckError-class';
		fileUploadAlertDialog(aaui049_dialogMsg_checkError_extension, aaui049_dialogTitle_checkError_extension, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
		return false;
	}

	var extensionLowerCase = fileTypes[fileTypes.length - 1].toLowerCase();
	var resultInArrayIdx = $.inArray(extensionLowerCase, UPLOAD_POSSIBLE_EXTENSION_ARRAY);
	if (resultInArrayIdx == -1) {
		// ダイアログ表示
		var classNm = 'fileUploadAlertDialog-inputCheckError-class';
		fileUploadAlertDialog(aaui049_dialogMsg_checkError_extension, aaui049_dialogTitle_checkError_extension, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);
		return false;
	}

	// ファイル数チェック
	if (UPLOAD_POSSIBLE_FILE_COUNT <= fileSeqArray.length) {
		// ダイアログ表示
		var classNm = 'fileUploadAlertDialog-inputCheckError-class';
		fileUploadAlertDialog(aaui049_dialogMsg_checkError_fileCount, aaui049_dialogTitle_checkError_fileCount, 'auto', '90%', aaui049_dialogOkBtnMsg, classNm);

		// 追加ボタン使用不可
		addBtnDispControl(true);
		return false;
	}
	return true;
}

/**
 * 確認ダイアログ表示【Deferred処理】。
 * 
 * @param dialogTitle ダイアログタイトル
 * @param dialogMsg ダイアログメッセージ
 * @return プロミス
 */
var doDeferredConfirmDialog = function(dialogTitle, dialogMsg){
	var defer = $.Deferred();

	// ファイルアップロード実行確認ダイアログ表示
	fileUploadConfirmDialog(dialogMsg, dialogTitle, 'auto', '90%', aaui049_dialogOkBtnMsg, aaui049_dialogCancelBtnMsg, function(cancel){
		if (cancel) {
			resFileUploadConfirmDialog = false;
			defer.reject();// 却下
		} else {
			resFileUploadConfirmDialog = true;
			defer.resolve();// 解決
		}
	});
	return defer.promise();// プロミスを作って返却
};

/**
 * 確認ダイアログを作成する。
 * 
 * @param message
 *            ダイアログに表示するメッセージ
 * @param title
 *            ダイアログのタイトル
 * @param height
 *            ダイアログの高さ
 * @param width
 *            ダイアログの幅
 * @param buttonok
 *            OKボタン押下時の処理
 * @param buttoncancel
 *            キャンセルボタン押下時の処理
 * @param response
 *            コールバック関数
 * @return なし
 */
function fileUploadConfirmDialog(
	message, 
	title, 
	height, 
	width, 
	buttonok, 
	buttoncancel,
	response) {

	var _dlg = $('<div class="fileUploadConfirmDialog-class">' + message + '</div>');
	var _buttons = {};
	_buttons[buttonok] = function() {
		$(this).dialog('close');
		response(false)
	};
	_buttons[buttoncancel] = function() {
		$(this).dialog('close');
		response(true)
	};
	
	_dlg.dialog({
		close : function() {
			// close処理（ダイアログを破棄）
			$('.fileUploadConfirmDialog-class').dialog('destroy').remove();
		},
		modal : true,
		draggable : false,
		resizable : false,
		title : title,
		height : height,
		width : width,
		closeOnEscape : false,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		},
        closeText:"",
		open:function(){
		  	var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
		    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
		    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
		    $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
    		
            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
            $(".ui-button-background").removeClass("ui-button");
            $(".ui-dialog-titlebar-close").hover(function() {
                $(this).addClass("ui-state-hover");
            }, function() {
                $(this).removeClass("ui-state-hover");
            })
		}
	});
};

/**
 * ファイル操作ダイアログを表示する。
 * 
 * @param processType
 *            処理種別
 * @return なし
 */
function showFileOperationDialog(processType) {
	var wait_dialogTitle = '';
	var wait_dialogMsg = '';
	if (PROCESS_TYPE_UPLOAD == processType) {
		wait_dialogTitle = aaui049_dialogTitle_fileOperationUpload;
		wait_dialogMsg = aaui049_dialogMsg_fileOperationUpload;
	} else if (PROCESS_TYPE_DELETE == processType) {
		wait_dialogTitle = aaui049_dialogTitle_fileOperationDelete;
		wait_dialogMsg = aaui049_dialogMsg_fileOperationDelete;
	}

	//ダイアイログを作成
	fileOperationDialog(wait_dialogMsg, wait_dialogTitle, 'auto', '90%', '', '', function(cancel) {
		if (cancel) {
			return false;
		}
	});
	$('.ui-dialog-buttonpane').css('display', 'none');
	$('.ui-dialog-titlebar-close').css('display', 'none');

	return;
}

/**
 * ファイル操作ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function fileOperationDialog(
	message,
	title,
	height,
	width,
	buttonok,
	buttoncancel,
	response) {

	var _dlg = $('<div class="fileOperationDialog-class">' + message + '</div>');
	var _buttons = {};
	_buttons[buttonok] = function() {
		$(this).dialog('close');
		response(false)
	};
	_buttons[buttoncancel] = function() {
		$(this).dialog('close');
		response(true)
	};

	_dlg.dialog({
		modal : true,
		draggable : false,
		resizable : false,
		title : title,
		height : height,
		width : width,
		closeOnEscape : false,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		}
	});
};

/**
 * 警告ダイアログを作成する。
 * 
 * @param message
 *            ダイアログに表示するメッセージ
 * @param title
 *            ダイアログのタイトル
 * @param height
 *            ダイアログの高さ
 * @param width
 *            ダイアログの幅
 * @param buttonok
 *            OKボタン押下時の処理
 * @param classNm
 *            ダイアログクラス名
 * @return なし
 */
function fileUploadAlertDialog(message, title, height, width, buttonok, classNm) {
	var _dlg = $('<div class=' + classNm + '>' + message + '</div>');
	var _buttons = {};
	_buttons[buttonok] = function() {
		$(this).dialog('close');
	};
	
	if(title == aaui049_dialogTitle_uploadError || title == aaui049_dialogTitle_deleteError){
		_dlg.dialog({
			close : function() {
				// close処理（ダイアログを破棄）
				$('.' + classNm).dialog('destroy').remove();
			},
			bgiframe : true,
			modal : true,
			draggable : false,
			resizable : false,
			title : title,
			height : height,
			width : width,
			closeOnEscape: false,
			buttons : _buttons,
			overlay : {
				opacity : 0.3,
				background : '#225B7F'
			},
			position: {
				of : '#blk047',
				at : 'center bottom',
				my : 'center top'
			},
	        closeText:"",
			open:function(){
				var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
			    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
			    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
			    $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
	    		
	            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
	            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
	            $(".ui-button-background").removeClass("ui-button");
                $(".ui-dialog-titlebar-close").hover(function() {
                    $(this).addClass("ui-state-hover");
                }, function() {
                    $(this).removeClass("ui-state-hover");
                })
			}
		});
	} else {
		_dlg.dialog({
			close : function() {
				// close処理（ダイアログを破棄）
				$('.' + classNm).dialog('destroy').remove();
			},
			bgiframe : true,
			modal : true,
			draggable : false,
			resizable : false,
			title : title,
			height : height,
			width : width,
			closeOnEscape: false,
			buttons : _buttons,
			overlay : {
				opacity : 0.3,
				background : '#225B7F'
			},
	        closeText:"",
			open:function(){
				var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
			    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
			    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
			    $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
	    		 
	            $("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
	            $("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
	            $(".ui-button-background").removeClass("ui-button");
                $(".ui-dialog-titlebar-close").hover(function() {
                    $(this).addClass("ui-state-hover");
                }, function() {
                    $(this).removeClass("ui-state-hover");
                })
			}
		});
	}
};

/**
 * ファイルアップロード実行【Deferred処理】。
 * 
 * @param fileNm
 *            ファイル名
 * @param file
 *            Fileオブジェクト
 * @param fileSeq
 *            ファイル通番
 * @param documentCls
 *            書類区分
 * @return プロミス
 */
var doDeferredFileUpload = function(fileNm, file, fileSeq, documentCls){
	var defer = $.Deferred();

	// FileReaderの作成
	var reader = new FileReader();
	// バイナリ形式で読み込む
	reader.readAsDataURL(file);

	// 読込終了後の処理
	reader.onload = function(e) {

		var base64Str = reader.result;
		base64Str = base64Str.substring(base64Str.indexOf("base64,") + 7);

		var jsonData = {
			"uploadFile": base64Str,
			"fileNm": fileNm,
			"fileSeq": fileSeq,
			"documentCls": documentCls
		};

		var url = CONTEXT_PATH + '/FileUpload?PT=JO&json=on&' + SESSION_ID_NAME + '=' + SESSION_ID_VALUE + '&' + SERVER_ID_NAME + '=' + SERVER_ID_VALUE;

		// Ajax通信
		$.ajax({
			async: false,
			url: url,
			type: "POST",
			data: JSON.stringify(jsonData),
			processData: false,
			contentType: false,
			dataType: 'json',
		    success:function(data) {
				defer.resolve(data);// 解決
		    },
		    error:function(data) {
				defer.reject();// 却下
		    }
		});
	};
	return defer.promise();// プロミスを作って返却
};

/**
 * ファイルアップロード成功時後処理。
 * 
 * @param fileSeq
 *            ファイル通番
 * @return なし
 */
function afterProcessSuccess(fileSeq){

	// 警告メッセージに空文字を設定
	checkWorningArea();
	var warnMsgElm = document.getElementById(ELEMENT_ID_WARNING_MSG);

	warnMsgElm.value = "";

	// 警告エリアを非表示に設定
	var warnAreaElm = document.getElementById(ELEMENT_ID_WARNING_AREA);
	warnAreaElm.style.display = "none";

	// 重複チェック用配列に追加
	fileSeqArray.push(fileSeq);

	if (UPLOAD_POSSIBLE_FILE_COUNT <= fileSeqArray.length) {
		// 最大ファイル数を超えた場合、追加ボタン使用不可
		addBtnDispControl(true);
	}

	// ファイル通番カウンタをカウントアップ
	++fileSeqCounter;

}

 /**
  * ファイル削除実行【Deferred処理】。
  * 
  * @param fileSeq ファイル通番
  * @param fileNm ファイル名
  * @param documentCls 書類区分
  * @return プロミス
  */
var doDeferredFileDelete = function(fileSeq, fileNm, documentCls){

	sanitaize = {
		decode : function (str) {
			return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&#32;/g, ' ').replace(/&#9;/g, '\t').replace(/&#13;/g, '\r').replace(/&#10;/g, '\n').replace(/&amp;/g, '&').replace(/&#40;/g, '(').replace(/&#41;/g, ')');
		}
	};

	var defer = $.Deferred();

	var jsonData = {
		"fileSeq": sanitaize.decode(fileSeq),
		"fileNm": sanitaize.decode(fileNm),
        "documentCls": sanitaize.decode(documentCls)
	};

	var url = CONTEXT_PATH + '/FileUploadCancel?PT=JO&json=on&' + SESSION_ID_NAME + '=' + SESSION_ID_VALUE + '&' + SERVER_ID_NAME + '=' + SERVER_ID_VALUE;

	// Ajax通信
	$.ajax({
		async: false,
		url: url,
		type: "POST",
		data: JSON.stringify(jsonData),
		processData: false,
		contentType: false,
		dataType: 'json',
	    success:function(data) {
			defer.resolve(data);// 解決
	    },
	    error:function(data) {
			defer.reject();// 却下
	    }
	});
	return defer.promise();// プロミスを作って返却
 };

/**
 * ファイル操作ダイアログを破棄する。
 * 
 * @return なし
 */
function closeFileOperationDialog() {
	// ファイル操作ダイアログを破棄
	$('.fileOperationDialog-class').dialog('destroy').remove();
}

/**
 * ファイルプレビュー画像表示
 * 
 * @param file Fileオブジェクト
 * @param fileSeq ファイル通番
 * @return なし
 */
function preview(file, fileSeq) {

	var canvas = document.getElementById('myCanvas_' + fileSeq);
	var ctx = canvas.getContext("2d");

	if ('application/pdf' == file.type) {
		// PDFの場合
		// canvasタグに属性追加
		$("#myCanvas_" + fileSeq).attr('width','64');
		$("#myCanvas_" + fileSeq).attr('height','64');
		
		var image = new Image();
		image.src = "/docs/images/pdf.png";
		image.onload = function() {
			ctx.drawImage(image, 0, 0);
		}
	} else {
		// PDF以外の場合、画像プレビューを表示する
		
		var image = new Image();
		var reader = new FileReader();

		reader.onload = function(evt) {

			// 画像がloadされた後に、canvasに描画する
			image.onload = function(evt) {
				
				var frameWidth = 100;
				var nWidth = image.naturalWidth || getNaturalSize(image).width;// ff :
																				// ie
				var nHeight = image.naturalHeight || getNaturalSize(image).height;// ff :
																					// ie
				
				var scale = frameWidth / nWidth;
				var ImgWidth = nWidth * scale;
				var ImgHeight = nHeight * scale;
				
				// canvasタグに属性追加
				$("#myCanvas_" + fileSeq).attr('width',ImgWidth);
				$("#myCanvas_" + fileSeq).attr('height',ImgHeight);
				
				ctx.drawImage(image, 0, 0, ImgWidth, ImgHeight);
			}

			// 画像のURLをソースに設定
			image.src = evt.target.result;
		}

		// ファイルを読み込み、データをBase64でエンコードされたデータURLにして返す
		reader.readAsDataURL(file);
	}
}

/**
 * getNaturalSize
 */
var getNaturalSize = function(image){
	var w, h, key = "actual", run, mem;
	if(window.opera){
	}
	if (image[key] && image[key].src === image.src) {
		return image[key];
	}
	run = image.runtimeStyle;
	mem = {
		"w" : run.width,
		"h" : run.height
	}; // keep runtimeStyle
	run.width = "auto"; // override
	run.height = "auto";
	w = image.width;
	h = image.height;
	run.width = mem.w; // restore
	run.height = mem.h;
	image[key] = {
		"width" : w,
		"height" : h,
		"src" : image.src
	};
	return image[key]; // bond
};

/**
 * 誤り画面タグ判定
 * 
 * @return なし
 */
function checkWorningArea(){

	$('div#input-warning-presence').addClass('input-warning');
	$('div#input-warning-exceptPresence').addClass('input-warning');

	// 要素が削除されている場合、新規に作成
	if(!document.getElementById(ELEMENT_ID_WARNING_MSG)){

		var parentElem = document.getElementById("swpBlkChild016");

		var childElem_1 = document.createElement("div");
		childElem_1.setAttribute("id","blk051");
		childElem_1.setAttribute("class","form-error-blockA01");

		var childElem_2 = document.createElement("ul");
		childElem_2.setAttribute("id","ul004");
		childElem_2.setAttribute("class","form-error-listA01");

		var childElem_3 = document.createElement("li");
		childElem_3.setAttribute("id","li012");

		var childElem_4 = document.createElement("span");
		childElem_4.setAttribute("id","svrErr001");

		childElem_3.appendChild(childElem_4);
		childElem_2.appendChild(childElem_3);
		childElem_1.appendChild(childElem_2);
		parentElem.appendChild(childElem_1);

	}

}
/*
 * ファイル名     aaui050.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2016 NTT DATA
 * 収容物  メール送達確認用ポップアップ表示機能
 * 
 * 修正履歴
 * 2016.04.20 小橋 琢磨 R002_証書貸付ローンサービス追加 新規作成
 */

// カスタマイズ可能文言
var aaui050_mailDeliveryConfirmPopupTitle = '確認';
var aaui050_mailDeliveryConfirmPopupMsg = 'メール送達確認用パスワード送信先として前画面にて入力いただいたメールアドレスにメール送達確認用パスワードを送信しました。';
var aaui050_mailDeliveryConfirmPopupOkBtnMsg = 'OK';
var aaui050_mailDeliveryConfirmPopupUseFlg = true;

/**
 * メール送達確認用ポップアップを表示する。
 */
function dispMailDeliveryConfirmPopup() {

	// デフォルトメッセージ設定
	var dialogTitle = aaui050_mailDeliveryConfirmPopupTitle;
	var dialogMsg = aaui050_mailDeliveryConfirmPopupMsg;
	var dialogOkBtnMsg = aaui050_mailDeliveryConfirmPopupOkBtnMsg;
	var useFlag = aaui050_mailDeliveryConfirmPopupUseFlg;

	// メール送達確認用ポップアップ使用有無を判定する
	if (!useFlag) {

		return;

	}

	aaui050_sendMailDeliveryConfirmPopupDialog(dialogMsg, dialogTitle, 'auto',
			'90%', dialogOkBtnMsg);

};

/**
 * メール送達確認用ポップアップを作成する。
 * 
 * @param message
 *            ダイアログに表示するメッセージ
 * @param title
 *            ダイアログのタイトル
 * @param height
 *            ダイアログの高さ
 * @param width
 *            ダイアログの幅
 * @param buttonOk
 *            OKボタン押下時の処理
 * @return なし
 */
function aaui050_sendMailDeliveryConfirmPopupDialog(message, title, height,
		width, buttonOk) {

	var _dlg = $('<div>' + message + '</div>');

	var _buttons = {};
	_buttons[buttonOk] = function() {

		$(this).dialog('close');

	};

	_dlg.dialog( {
		
		modal : true,
		draggable : false,
		resizable : false,
		title : title,
		closeText:"",
		height : height,
		width : width,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		},
		open:function(){
			var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
		    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
		    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
		    $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
			
			
			$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
			$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
			$(".ui-button-background").removeClass("ui-button");
			$(".ui-dialog-titlebar-close").hover(function() {
				$(this).addClass("ui-state-hover");
			}, function() {
				$(this).removeClass("ui-state-hover");
			})
		}
	});
};
/*
 * ファイル名     aaui051.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2016 NTT DATA
 * 収容物  外部サイト遷移確認ポップアップ表示機能
 * 
 * 修正履歴
 * 2016.04.20 小橋 琢磨 R002_証書貸付ローンサービス追加 新規作成
 */

// カスタマイズ可能文言
var aaui051_dialogTitle = '確認';
var aaui051_dialogMsg_51 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_52 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_53 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_54 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_55 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_56 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_57 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_58 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_59 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogMsg_60 = '申込ページへ遷移します。よろしければ「OK」を押して下さい。';
var aaui051_dialogOkBtnMsg = 'OK';
var aaui051_dialogCancelBtnMsg = 'キャンセル';
var aaui051_dialogDspFlg = true;

// グローバル変数
var CONFIRM_RESULT = false;

/**
 * 外部サイト遷移確認ポップアップを表示する。
 * 
 * @param event
 *            押下したボタン、リンクのDOM要素
 * @param proposalType
 *            申込種別
 * @return 判定結果（真偽値）
 */
function dispExternalTransferConfirmPopup(event, proposalType) {

	// デフォルトメッセージ設定
	var dialogTitle = aaui051_dialogTitle;
	var useFlag = aaui051_dialogDspFlg;
	var dialogOkBtnMsg = aaui051_dialogOkBtnMsg;
	var dialogCancelBtnMsg = aaui051_dialogCancelBtnMsg;

	// 確認メッセージ使用有無を判定する
	if (!useFlag) {
		return true;
	}

	// 外部サイト遷移確認メッセージ文言カスタマイズ情報設定
	var dialogMsg = createDialogMsg(proposalType);

	if (!CONFIRM_RESULT) {
		createExternalTransferConfirmDialog(
				dialogMsg,
				dialogTitle,
				'auto',
				'90%',
				dialogOkBtnMsg,
				dialogCancelBtnMsg,
				function(cancel) {
					if (cancel) {
						return;
					}
					CONFIRM_RESULT = true;

					// safariのリンク押下時
					var ua = navigator.userAgent;
					if (ua.match('Safari') && $(event).attr('href')) {
						var script = '<script type=\"text/javascript\">function link() {location.href = \"' + $(
								event).attr('href') + '\";}</script>';
						$('body').append(script);
						var click = $(event).attr('onclick').replace(';',
								'&&link();');
						$(event).attr('onclick', click);
						$(event).trigger('click');
					} else {
						event.click();
					}
				});
	} else {
		CONFIRM_RESULT = true;
	}
	return CONFIRM_RESULT;
};

/**
 * 外部サイト遷移確認メッセージを作成する。
 * 
 * @param proposalType
 *            申込種別
 * 
 * @return ダイアログに表示するメッセージ
 */
function createDialogMsg(proposalType) {

	var dialogMsgObj = {
		'51' : aaui051_dialogMsg_51,
		'52' : aaui051_dialogMsg_52,
		'53' : aaui051_dialogMsg_53,
		'54' : aaui051_dialogMsg_54,
		'55' : aaui051_dialogMsg_55,
		'56' : aaui051_dialogMsg_56,
		'57' : aaui051_dialogMsg_57,
		'58' : aaui051_dialogMsg_58,
		'59' : aaui051_dialogMsg_59,
		'60' : aaui051_dialogMsg_60
	};

	return dialogMsgObj[proposalType];

}

/**
 * 確認ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function createExternalTransferConfirmDialog(message, title, height, width,
		buttonok, buttoncancel, response) {

	var _dlg = $('<div>' + message + '</div>');
	var _buttons = {};
	_buttons[buttonok] = function() {
		$(this).dialog('close');
		response(false)
	};
	_buttons[buttoncancel] = function() {
		$(this).dialog('close');
		response(true)
	};
	
	_dlg.dialog( {
		modal : true,
		closeText:"",
		draggable : false,
		resizable : false,
		title : title,
		height : height,
		width : width,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		},
		open:function(){
		var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
	    var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
	    $dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
	    $("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
		
		$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
		$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
		$(".ui-button-background").removeClass("ui-button");
		$(".ui-dialog-titlebar-close").hover(function() {
			$(this).addClass("ui-state-hover");
		}, function() {
			$(this).removeClass("ui-state-hover");
		})
		}
	});
};
/*
 * ファイル名     aaui052_sp.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2016 NTT DATA
 * 収容物  ログアウト処理（非同期処理） 決済アプリ用ログアウト処理
 * 
 * 修正履歴
 * 2017.03.03 小澤 知弘 R028_ペイジー支払　新規作成
 * 2020.12.09 長田 健太 XX009_標準_見守りサービスアプリ対応
 */

/**
 * ログアウト処理（非同期処理） 決済アプリ用ログアウト処理。非同期処理であり、画面遷移は行わない為、決済アプリ以外では呼び出し禁止
 * 
 * @param contextPath
 *            金融機関情報取得処理のコンテキストパス
 * @param logicName
 *            業務処理名
 * @param sessionIdName
 *            セッションID設定名
 * @param sessionIdValue
 *            セッションID
 * @param serverIdName
 *            サーバID識別子設定名
 * @param serverIdValue
 *            サーバID識別子値
 * @param buttonName
 *            ボタン名
 * @param screenId
 *            画面ID
 * @param businessCounter
 *            業務カウンタ
 */
function logoutBlogic(contextPath, logicName, sessionIdName,sessionIdValue,serverIdName,serverIdValue, buttonName, screenId, businessCounter) {
	var dataObj = {};
	dataObj[sessionIdName] = sessionIdValue;
	dataObj.PT = 'BS';
	$.ajax({
		type:'POST',
		url: contextPath + '/BGLOBALNAVIDSP'
		+ '?' + sessionIdName + '=' + sessionIdValue
		+ '&PT=BS&' + serverIdName + '=' + serverIdValue 
		+ '&BUTTON_NAME=' + buttonName + '&BHD0000=' + screenId + '&BHD0001=' + businessCounter,
		data : dataObj,
		async:true
		});
	return;
}
/**
* 中止処理（非同期処理） 決済アプリ用中止処理。非同期処理であり、画面遷移は行わない為、決済アプリ以外では呼び出し禁止
* 
* @param contextPath
*            金融機関情報取得処理のコンテキストパス
* @param logicName
*            業務処理名
* @param sessionIdName
*            セッションID設定名
* @param sessionIdValue
*            セッションID
* @param serverIdName
*            サーバID識別子設定名
* @param serverIdValue
*            サーバID識別子値
* @param buttonName
*            ボタン名
* @param screenId
*            画面ID
* @param businessCounter
*            業務カウンタ
*/

function cancelBlogic(contextPath, logicName ,sessionIdName,sessionIdValue,serverIdName,serverIdValue, buttonName, screenId, businessCounter) {
	var dataObj = {};
	dataObj[sessionIdName] = sessionIdValue;
	dataObj.PT = 'BS';
	$.ajax({
		type:'POST',
		url: contextPath + '/' + screenId + 'Dispatch'
		+ '?' + sessionIdName + '=' + sessionIdValue
		+ '&PT=BS&' + serverIdName + '=' + serverIdValue 
		+ '&BUTTON_NAME=' + buttonName + '&BHD0000=' + screenId + '&BHD0001=' + businessCounter,
		data : dataObj,
		async:true
		});
	return;
}/*
 * ファイル名   aaui053.js
 * 開発システム AnserParaSOL
 * 著作権       Copyright(C) 2018 NTT DATA
 * 収容物       電話番号認証状態取得機能クライアント非同期処理
 * 
 * 修正履歴<br>
 * 2018.08.06 河野 将太 AnserParaSOL 第10.0版 R001_届出電話番号認証 新規作成<br>
 * 
 * @author 株式会社 NTTデータフロンティア
 * @version 1.0
 */

// 電話番号認証処理送信可能フラグ
var telNoAuthSubmitAbleFlg = true;

/**
 * 電話番号認証状態取得機能クライアント非同期処理<br>
 * 電話番号認証画面へ遷移後、認証判定結果が"未認証"の場合に一定間隔で認証判定を実行する。<br>
 * 認証判定結果が"未認証"以外の場合にsubmitを実行する。<br>
 * 
 * @param submitBtnId
 *            送信ボタンID
 * @param unAuthFlg
 *            未認証フラグ
 * @param interval
 *            実行間隔(秒)
 * @param contextPath
 *            コンテキストパス
 * @param sessionIdName
 *            セッションID名
 * @param sessionIdValue
 *            セッションID値
 * @param serverIdName
 *            サーバID名
 * @param serverIdValue
 *            サーバID値
 */
function telNoAuthStatusGetAsyncProc(submitBtnId, unAuthFlg, interval,
		contextPath, sessionIdName, sessionIdValue, serverIdName, serverIdValue) {

	try {

		if ((unAuthFlg == "true")) {

			// 電話番号認証状態取得処理
			var getStatus = function() {

				if (telNoAuthSubmitAbleFlg == true) {

					$.ajax( {
						url : contextPath + '/TelNoAuthenticationStatusGet' + '?'
						+ sessionIdName + '=' + sessionIdValue + '&PT=BS&'
						+ serverIdName + '=' + serverIdValue,

						type : "GET",
						dataType : "json",
						success : function(data) {

						// ステータスコード200で帰ってきたときの処理
						// timeOut、認証済み、エラー発生のいずれかの場合、タイマーを解除し、submit
						if (data.timeOut || data.success || data.error) {

							document.getElementById(submitBtnId).click();
							return;

						}

					},
					error : function(xhr, textStatus, errorThrown) {

						// ajax自体のerror時もsubmitを発行し、業務処理側にゆだねる
						document.getElementById(submitBtnId).click();
						return;
					}

					});

					// (interval*1000)ミリ秒後に再度処理を実行するよう設定
					setTimeout(getStatus, interval*1000);

				}

			};

			// 処理実行
			setTimeout(getStatus, interval*1000);

		}

	} catch (e){

		document.getElementById(submitBtnId).click();

	}

}

/**
 * 電話番号認証処理送信判定<br>
 * submitの実行有無を判定する。
 * 
 * @return 送信判定結果（true:送信あり、false:送信なし）
 */
function isTelNoAuthSubmit() {

	if (telNoAuthSubmitAbleFlg === true) {

		telNoAuthSubmitAbleFlg = false;
		return true;

	} else {

		return false;

	}
}
/**
 * ファイル名     aaui054_sp.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2021 NTT DATA
 * 収容物  メール送達確認用ポップアップ表示機能(Ekyc)
 * 
 * 修正履歴
 * 2021.07.19 真崎 翔太 14版(R001)1.3版_eKYC_メール送達確認用ポップアップ表示機能 新規作成
 */

// カスタマイズ可能文言
var aaui054_mailDeliveryConfirmPopupForEkycTitle = '確認';
var aaui054_mailDeliveryConfirmPopupForEkycMsg = '入力いただいたメールアドレスにメール送達確認用パスワードを送信しました。';
var aaui054_mailDeliveryConfirmPopupForEkycOkBtnMsg = 'OK';
var aaui054_mailDeliveryConfirmPopupForEkycUseFlg = true;

/**
 * メール送達確認用ポップアップを表示する。
 */
function dispMailDeliveryConfirmPopupForEkyc() {

	// デフォルトメッセージ設定
	var dialogTitle = aaui054_mailDeliveryConfirmPopupForEkycTitle;
	var dialogMsg = aaui054_mailDeliveryConfirmPopupForEkycMsg;
	var dialogOkBtnMsg = aaui054_mailDeliveryConfirmPopupForEkycOkBtnMsg;
	var useFlag = aaui054_mailDeliveryConfirmPopupForEkycUseFlg;

	// メール送達確認用ポップアップ使用有無を判定する
	if (!useFlag) {

		return;

	}

	aaui054_sendMailDeliveryConfirmPopupDialog(dialogMsg, dialogTitle, 'auto',
			'90%', dialogOkBtnMsg);

};

/**
 * メール送達確認用ポップアップを作成する。
 * 
 * @param message
 *            ダイアログに表示するメッセージ
 * @param title
 *            ダイアログのタイトル
 * @param height
 *            ダイアログの高さ
 * @param width
 *            ダイアログの幅
 * @param buttonOk
 *            OKボタン押下時の処理
 * @return なし
 */
function aaui054_sendMailDeliveryConfirmPopupDialog(message, title, height,
		width, buttonOk) {

	var _dlg = $('<div>' + message + '</div>');

	var _buttons = {};
	_buttons[buttonOk] = function() {

		$(this).dialog('close');

	};

	_dlg.dialog( {

		modal : true,
		draggable : false,
		resizable : false,
		title : title,
		height : height,
		width : width,
		buttons : _buttons,
		overlay : {
			opacity : 0.3,
			background : '#225B7F'
		},
		closeText:"",
		open: function() {
			var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
			var $dailog = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front");
			$dailog.css('z-index',(arr.length ? Math.max(...arr) : 0) + 1);
			$("div.ui-widget-overlay.ui-front").css('z-index',(arr.length ? Math.max(...arr) : 0));
			$("span.ui-button-icon.ui-icon.ui-icon-closethick").css("margin","-8px");
			$("button.ui-button.ui-corner-all.ui-widget.ui-button-icon-only.ui-dialog-titlebar-close").addClass("ui-button-background");
			$(".ui-button-background").removeClass("ui-button");
			$(".ui-dialog-titlebar-close").hover(function() {
				$(this).addClass("ui-state-hover");
			}, function() {
				$(this).removeClass("ui-state-hover");
			})
		}
	});

};
/*
 * ファイル名    sp_aaui001.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  ポップアップ表示機能
 * 
 * 修正履歴
 * 2014.05.07 NTTD 半田佳菜 次世代個人IB開発
 * 2023.02.20 大津 麻祐菜 AnserParaSOL PSL_OP_668<br>
 */


var dialogParam = {
    dialogTitle : '',
    dialogMsg : '',
    dialogOkBtnMsg : '',
    dialogCancelBtnMsg : '',
    buttonNum : '2',
    titleFlag : true,
    dialogId : '',
    stopFlag : false,
};

/** スマートフォン（新デザイン）表示判定 */
var sp_aaui001_newDesignLayoutFlg = false;

/**
 * aaui004_入力情報初期化警告メッセージ機能
 * @param event ボタン押下時のDOM要素
 * @param confirmtype 確認タイプ
 * @param jsVer05Flg 旧JSからの呼び出しかの判定
 * @return なし
 * 
 */
var initdspflg = false;

var aaui004_dialogTitle = '確認';
var aaui004_dialogMsg = 'ページを移動すると入力中のデータは破棄されます。<br />移動する場合は「OK」を押して下さい。<br />「キャンセル」を押すと、移動を行わず元の画面に戻ります。';
var aaui004_dialogOkBtnMsg = 'OK';
var aaui004_dialogCancelBtnMsg = 'キャンセル';

var aaui004_dialogTitleIborder = '確認';
var aaui004_dialogMsgIborder = 'インターネットバンキングのお申込手続きについては、ログアウトが必要となります。よろしいですか？';
var aaui004_dialogOkBtnMsgIborder = 'はい';
var aaui004_dialogCancelBtnMsgIborder = 'いいえ';

function initinput(event, confirmtype, jsVer05Flg) {

    var processingflg = $('#processingflg').val();
    var inputingflg = $('#inputingflg').val();
    
    if(jsVer05Flg){
       processingflg = false;
       inputingflg = true;
    };
    
    var sp = true;

    // デフォルトメッセージ設定
    dialogParam.dialogTitle = aaui005_dialogTitle;
    dialogParam.dialogMsg = aaui005_dialogMsg;
    dialogParam.dialogOkBtnMsg = aaui005_dialogOkBtnMsg;
    dialogParam.dialogCancelBtnMsg = aaui005_dialogCancelBtnMsg;
    dialogParam.buttonNum = '2';
    dialogParam.titleFlag = true;
    dialogParam.dialogId = 'initinput';
    
    var stopprocessFlag = false;
    var targetBtnClass = $(event).attr('class');
    var str = '' + targetBtnClass + '';
    
    if(!jsVer05Flg){
       stopprocessFlag = $(event).attr('onclick').match('stopprocess');
    }
    
    //中止処理警告メッセージ判定
    if (stopprocessFlag && processingflg == 'true') {
        sp = false
    } else if(str.indexOf('gnav-pcicon') !== -1){
        return check(event,'topc');
    } else {
        // 確認タイプに'iborder'が指定された場合
        if (confirmtype == 'iborder') {
            // メッセージ設定
            dialogParam.dialogTitle = aaui004_dialogTitleIborder;
            dialogParam.dialogMsg = aaui004_dialogMsgIborder;
            dialogParam.dialogOkBtnMsg = aaui004_dialogOkBtnMsgIborder;
            dialogParam.dialogCancelBtnMsg = aaui004_dialogCancelBtnMsgIborder;
            // 警告メッセージを常に表示するため、入力情報初期化警告メッセージ表示フラグにtrueを設定
            inputingflg = true;
        }else if(confirmtype == 'logout'){
            dialogParam.dialogTitle = logoutConfirmDialogTitle;
            dialogParam.dialogMsg = logoutConfirmDialogMsg;
            dialogParam.dialogOkBtnMsg = logoutConfirmDialogOkBtnMsg;
            dialogParam.dialogCancelBtnMsg = logoutConfirmDialogCancelBtnMsg;
            dialogParam.buttonNum = '2';
            dialogParam.titleFlag = true;
            dialogParam.dialogId = 'logoutConfirmDialog';
             // 警告メッセージを常に表示するため、入力情報初期化警告メッセージ表示フラグにtrueを設定
            inputingflg = true;
        }
    }
    //画面表示フラグがtrue以外　かつ　中止処理警告メッセージ表示フラグがtrue以外　かつ　入力情報初期化警告メッセージ表示フラグがtrueの場合
    if (!initdspflg && sp && inputingflg == true) {
       dialogSpDisp(dialogParam, event, 'initdsp');
    } else {
        initdspflg = true;
    }
    return initdspflg;
};

/**
 * aaui028_確認メッセージ表示機能
 * @param event ボタン押下時のDOM要素
 * @param confirmtype 確認タイプ
 * @return なし
 * 
 */
var confirmdspflg = false;

/* スイッチング仕様変更 - 追加 */
/* pcConfirmダイアログ */
var $pcConfirm_dlg = null;

// カスタマイズ可能文言
// パスワード確認
var aaui028_passwordDialogTitle = 'パスワード登録の確認';
var aaui028_passwordDialogMsg = 'パスワードを設定いたします。<br>お取引に必要なパスワードですので、お忘れにならないようにご注意ください。<br>OKボタンを押下すると、設定されたパスワードで登録します。';
var aaui028_passwordDialogOkBtnMsg = 'OK';
var aaui028_passwordDialogCancelBtnMsg = 'キャンセル';
var aaui028_passwordUseFlg = false;
// ISA利用可能額なし購入確認
var aaui028_nisaDialogTitle = '確認';
var aaui028_nisaDialogMsg = 'NISA利用可能額が0円のため、NISA預りでの購入はできません。NISA預り以外で購入する場合は「OK」を押して下さい。「キャンセル」を押すと、移動を行わず元の画面に戻ります。';
var aaui028_nisaDialogOkBtnMsg = 'OK';
var aaui028_nisaDialogCancelBtnMsg = 'キャンセル';
var aaui028_nisaUseFlg = true;
//金利優遇サービス注意喚起
var aaui028_prDialogTitle = '金利優遇サービス対象ファンド確認';
var aaui028_prDialogMsg = 'お客様が選択していただいたファンドは金利優遇サービス対象外です。<br>よろしいでしょうか。';
var aaui028_prDialogOkBtnMsg = 'OK';
var aaui028_prDialogCancelBtnMsg = 'キャンセル';
var aaui028_prUseFlg = true;

function dispConfirm(event, confirmtype) {
    // デフォルトメッセージ設定
    var useFlg = aaui028_passwordUseFlg;
    dialogParam.dialogTitle = aaui028_passwordDialogTitle;
    dialogParam.dialogMsg = aaui028_passwordDialogMsg;
    dialogParam.dialogOkBtnMsg = aaui028_passwordDialogOkBtnMsg;
    dialogParam.dialogCancelBtnMsg = aaui028_passwordDialogCancelBtnMsg;
    dialogParam.buttonNum = '2';
    dialogParam.titleFlag = true;
    dialogParam.dialogId = 'passwordDialog';

    // 確認タイプに'password'が指定された場合
    if (confirmtype == 'password') {
        // パスワード確認用メッセージ設定
        dialogParam.dialogTitle = aaui028_passwordDialogTitle;
        dialogParam.dialogMsg = aaui028_passwordDialogMsg;
        dialogParam.dialogOkBtnMsg = aaui028_passwordDialogOkBtnMsg;
        dialogParam.dialogCancelBtnMsg = aaui028_passwordDialogCancelBtnMsg;
        useFlg = aaui028_passwordUseFlg;
    } else if (confirmtype == 'nisa') {
        // ISA利用可能額なし購入確認用メッセージ設定
        dialogParam.dialogTitle = aaui028_nisaDialogTitle;
        dialogParam.dialogMsg = aaui028_nisaDialogMsg;
        dialogParam.dialogOkBtnMsg = aaui028_nisaDialogOkBtnMsg;
        dialogParam.dialogCancelBtnMsg = aaui028_nisaDialogCancelBtnMsg;
        useFlg = aaui028_nisaUseFlg;
        dialogParam.dialogId = 'nisaDialog';
        
        /* 「PCサイトへ」ダイアログを格納 */
        if($("#pcConfirmDialog").is(':visible') == true){
            $pcConfirm_dlg = $("#pcConfirmDialog");
        }
    } else if (confirmtype == 'prefential') {
        // 金利優遇サービス注意喚起メッセージ設定
        dialogParam.dialogTitle = aaui028_prDialogTitle;
        dialogParam.dialogMsg = aaui028_prDialogMsg;
        dialogParam.dialogOkBtnMsg = aaui028_prDialogOkBtnMsg;
        dialogParam.dialogCancelBtnMsg = aaui028_prDialogCancelBtnMsg;
        useFlg = aaui028_prUseFlg;
    }
    // 確認メッセージ使用有無を判定する
    if (!useFlg) {
        //金利優遇サービスの場合は使用有無
        if (confirmtype == 'prefential') {
            eval(tmpBtnOnclickBs);
            tmpBtnOnclickBs = '';
        }
        return true;
    }
    if (!confirmdspflg) {
        dialogSpDisp(dialogParam, event, 'initdsp');
    } else {
        confirmdspflg = true;
    }
    return confirmdspflg;
};

var aaui028_tsGnaviNoUseDialogTitle = 'ご注意';
var aaui028_tsGnaviNoUseDialogMsg = '投資信託以外のお取扱いはできません。';
var aaui028_tsGnaviNoUseDialogBtnMsg = 'OK';
var aaui028_tsGnaviNoUseDialogTitleFlg = false;
var aaui028_tsGnaviNoUseDialogFlg = false;
function dispConfirmTsGnavi(event) {
    // デフォルトメッセージ設定
    var useFlg = aaui028_tsGnaviNoUseDialogFlg;
    dialogParam.dialogTitle = aaui028_tsGnaviNoUseDialogTitle;
    dialogParam.dialogMsg = aaui028_tsGnaviNoUseDialogMsg;
    dialogParam.dialogOkBtnMsg = aaui028_tsGnaviNoUseDialogBtnMsg;
    dialogParam.buttonNum = '1';
    dialogParam.titleFlag = aaui028_tsGnaviNoUseDialogTitleFlg;
    dialogParam.dialogId = 'gnavinouse';
    
    // 確認メッセージ使用有無を判定する
    if (!useFlg) {
        return true;
    }
    
    if (!confirmdspflg) {
        dialogSpDisp(dialogParam, event, 'initdsp');
    } else {
        confirmdspflg = true;
    }
    return confirmdspflg;
};

/**
 * javascript_smart_ver01_サーバエラーメッセージ表示機能
 * @param error エラーメッセージ
 * @param code エラーコード
 * @return なし
 * 
 */

var showErrorDialogTitle = 'エラー';
var showErrorDialogOkBtnMsg = 'OK';
var errorDialogIndex = 0;

function showErrorMessage(error, code){
    if(error != "" || code != ""){
        errorDialogIndex++;
        dialogParam.dialogMsg = error + code;
        dialogParam.dialogTitle = showErrorDialogTitle;
        dialogParam.dialogOkBtnMsg = showErrorDialogOkBtnMsg;
        dialogParam.buttonNum = '1';
        dialogParam.titleFlag = true;
        dialogParam.dialogId = 'errorDialog' + errorDialogIndex;
        dialogSpDisp(dialogParam);
    };
};

/**
 * javascript_smart_ver06_メール通知表示機能
 * @param message メール通知メッセージ
 * @return なし
 * 
 */
var showMailDialogTitle = '確認';
var showMailDialogOkBtnMsg = 'OK';
var mailDialogIndex = 0;

function showMessage(message){
    mailDialogIndex++;
    dialogParam.dialogMsg = message;
    dialogParam.dialogTitle = showMailDialogTitle;
    dialogParam.dialogOkBtnMsg = showMailDialogOkBtnMsg;
    dialogParam.buttonNum = '1';
    dialogParam.titleFlag = true;
    dialogParam.dialogId = 'mailDialog' + mailDialogIndex;
    dialogSpDisp(dialogParam);
};
/**
 * javascript_smart_ver06_クライアントチェックエラー表示機能
 * @param message クライアントチェックエラーメッセージ
 * @return なし
 * 
 */
var showErrorLivevalidationDialogTitle = 'エラー';
var showErrorLivevalidationDialogOkBtnMsg = 'OK';
var errorLivevalidationDialogIndex = 0;
var showErrorLivevalidationDialogflag = false;

function showErrorLivevalidation(message){
    if(showErrorLivevalidationDialogflag){
       return false;
    }
    showErrorLivevalidationDialogflag = true;
    setTimeout(function() {
        errorLivevalidationDialogIndex++;
        dialogParam.dialogMsg = message;
        dialogParam.dialogTitle = showErrorLivevalidationDialogTitle;
        dialogParam.dialogOkBtnMsg = showErrorLivevalidationDialogOkBtnMsg;
        dialogParam.buttonNum = '1';
        dialogParam.titleFlag = true;
        dialogParam.dialogId = 'errorLivevalidationDialog' + errorLivevalidationDialogIndex;
        dialogSpDisp(dialogParam);
    },400);
    
    setTimeout(function() {
        showErrorLivevalidationDialogflag = false;
    },1600);
};


/**
 * javascript_smart_ver05（３版投信対応）
 */
var confirmPopup = {};
confirmPopup.init= function() {
  window.body = document.body;

  if (window.body) {
    /* 投信3版追加 */
    confirmPopup.attentionPopup = document.getElementById("attentionPopup");
    confirmPopup.attentionBody = document.getElementById("attentionBody");

    /* 投信3版追加 */
    window.body.appendChild(confirmPopup.attentionPopup);

     // 背面のレイヤーを作成する。
    laylerDialogDisp();
  }
}

confirmPopup.hide = function() {
  // 投信ポップアップを閉じる
  if (confirmPopup.attentionPopup != null) {
    /* 投信3版追加 */
    confirmPopup.attentionPopup.style.display = "none"; 
  }
  // スクロールを禁止を解除
  $("html").off('.noScroll');
  // 縦横変更時の設定を解除
  $("window").off('reOpen');
  
  var version = androidVersion();
  if ('2.3' == version) {
    $("#dummytable").remove();
    }

  // 背面のレイヤーを非表示
  $('#laylerDialog').dialog('close');
}

/* 投信3版対応 */
/**
 * ガイダンス出力関連の初期化処理。
 * 
 * @param keyObject  初期化処理関連キーオブジェクト。
 *                     popupUse          ：ポップアップ画面使用フラグ
 *                     popupLinkId       ：ポップアップリンクID
 *                     popupOutputAreaId ：ガイダンス出力エリアID
 * @return なし
 */
function initAttentionPopup(keyObject) {
  // 引数が存在する場合
  if(keyObject != null){
  
    // ポップアップ画面を使用する場合
    if(keyObject.popupUse == true){
      $("#"+keyObject.popupLinkId).css({"display": ""});
      $("#"+keyObject.popupOutputAreaId).css({"display": "none"});
    // ポップアップ画面を使用しない場合
    }else{
      $("#"+keyObject.popupLinkId).css({"display": "none"});
      $("#"+keyObject.popupOutputAreaId).css({"display": ""});
    }
    
    // ガイダンス出力ポップアップ画面の「OK」ボタンにclickイベントを生成
    $('#pupbtn003').click(function(){
      hiddenAttentionPopup();
    })
    
  }
}

/**
 * ガイダンス出力ポップアップ画面を表示する。
 * 
 * @param content ガイダンスメッセージ
 * @return なし
 */
function showAttentionPopup(content) {
  // ガイダンスエリアに引数（ガイダンスメッセージ）を設定する。
  confirmPopup.attentionBody.innerHTML = content;

  // ポップアップを一度閉じる
  confirmPopup.hide();
  // ポップアップを表示する
  if($('#attentionPopup') != null && $('#attentionBody') != null){
    showPopup('attentionPopup','attentionBody');

    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 start
    // ポップアップ画面を表示する際にスクロールを固定する
    scrollFixed();
    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 end
  }
}

/**
 * ガイダンス出力ポップアップ画面を非表示にする。
 * 
 * @return なし
 */
function hiddenAttentionPopup() {

  confirmPopup.hide();

    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 start
    // ポップアップ画面を閉じたときスクロール固定を解除する
    unScrollFixed();
    // PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 end
}


/**
 * javascript_smart_ver05_ガイダンス表示機能（中止）※投信用
 * @param event ボタン押下時のDOM要素
 * @param confirmtype 確認タイプ
 * @param obj 確認タイプ
 * @return なし
 * 
 */
function check_ts(event, confirmtype, obj){
    
    // ダイアログのOKボタン押下し、動作するように格納。
    tmpBtnOnclickBs = "formSend('" + obj.id + "');";
    
    // javascript_smart_ver05_ガイダンス表示機能呼び出し。
    check(event, confirmtype);

};


/**
 * javascript_smart_ver05_ガイダンス表示機能（タイトルなし）
 * @param content ガイダンス
 * @return なし
 * 
 */
var showGuidanceDialogOkBtnMsg = 'OK';
var guidanceDialogIndex = 0;
var scrollPosition;

function showGuidancePopup(content){
    guidanceDialogIndex++;
    dialogParam.dialogMsg = content;
    dialogParam.dialogOkBtnMsg = showGuidanceDialogOkBtnMsg;
    dialogParam.buttonNum = '1';
    dialogParam.titleFlag = false;
    dialogParam.dialogId = 'guidanceDialog' + guidanceDialogIndex;
    dialogSpDisp(dialogParam);

	if (navigator.userAgent.toLowerCase().match('android')) {

		// androidの場合
		$('body').css('overflow', 'hidden');

	} else {

		// それ以外
		scrollPosition = $(window).scrollTop();
		$('body').css('position', 'fixed');
		$('body').css('top', '-' + scrollPosition + 'px');

	}
};

/**
 * javascript_smart_ver05_ガイダンス表示機能（中止/PCサイトへ/ログアウト/本格IBへ）
 * @param event ボタン押下時のDOM要素
 * @param confirmtype 確認タイプ
 * @return なし
 * 
 */
 
ver05dspspflg = false;

 // PCサイトへ
var pcConfirmDialogTitle = '確認';
var pcConfirmDialogMsg = 'PCサイトへ移動します。';
var pcConfirmDialogOkBtnMsg = 'OK';
var pcConfirmDialogCancelBtnMsg = 'キャンセル';
//PCサイトダイアログ表示有無
var pcConfirmDialogUseFlg = 'true';
 // ログアウト
var logoutConfirmDialogTitle = '確認';
var logoutConfirmDialogMsg = 'ログアウトします。';
var logoutConfirmDialogOkBtnMsg = 'OK';
var logoutConfirmDialogCancelBtnMsg = 'キャンセル';

function check(event, confirmtype){
    
    if(confirmtype == 'stop'){
        return initinput(event, 'init', true);
        
    }else if(confirmtype == 'iborder'){
        return initinput(event, 'iborder', true);
        
    }else if(confirmtype == 'logout'){
        return initinput(event, 'logout', true);
        
    }else if(confirmtype == 'topc'){
        //PCダイアログを使用する有無フラグ
        if(pcConfirmDialogUseFlg == 'true'){
            dialogParam.dialogTitle = pcConfirmDialogTitle;
            dialogParam.dialogMsg = pcConfirmDialogMsg;
            dialogParam.dialogOkBtnMsg = pcConfirmDialogOkBtnMsg;
            dialogParam.dialogCancelBtnMsg = pcConfirmDialogCancelBtnMsg;
            dialogParam.buttonNum = '2';
            dialogParam.titleFlag = true;
            dialogParam.dialogId = 'pcConfirmDialog';
            dialogSpDisp(dialogParam, event, 'ver05dsp');
        }else {
            //遷移を行うためtrueを返却
            ver05dspspflg = true;
        }
        
        return ver05dspspflg;
    };
};


/**
 * PCサイト表示判定機能
 * @param event ボタン押下時のDOM要素
 * @return なし
 * 
 */

var pcDispIconClass = 'disp-pc-icon';
var pcDispIconClassGnav = 'gnav-pcicon';
var pcHiddenIconClassArray = ['hidden-pc-icon01'];
var pcHiddenIconClassArrayGnav = ['hidden-pc-icon01'];
var pcDispIconBtnIdArray = [];
var pcDispIconBtnIdArrayGnav = [];


function pcDispDialog(target){
    var targetBtnClass = $(target).attr('class');
    var str = '' + targetBtnClass + '';
    
    var pcDispFlg = false;
    
    if(str.indexOf('' + pcDispIconClass + '') !== -1){
        pcDispFlg = true;
    }
    for(var i = 0; i < pcHiddenIconClassArray.length; ++i ){
        if(str.indexOf('' + pcHiddenIconClassArray[i] + '') !== -1){
            pcDispFlg = false;
        }
    }
    
    return pcDispFlg;
    
}

/***グロナビ版***/

function pcDispDialogGnav(target){

    var targetBtnClass = $(target).attr('class');
    var str = '' + targetBtnClass + '';
    
    var pcDispFlg = false;
    
    if(str.indexOf('' + pcDispIconClassGnav + '') !== -1){
        pcDispFlg = true;
    }
        for(var i = 0; i < pcHiddenIconClassArray.length; ++i ){
        if(str.indexOf('' + pcHiddenIconClassArray[i] + '') !== -1){
            pcDispFlg = false;
        }
    }
    
    return pcDispFlg;
}


/** 臨時onclick属性 */
var tmpBtnOnclickBs = null;
var tmpBtnOnclickBsEvent = null;
var tmpBtnOnclickGnav = null;
var tmpBtnOnclickGnavEvent = null;


jQuery.event.add(window, "load", function() {
	
	// PCアイコン注意喚起ポップアップメッセージ利用無の場合
	if (pcConfirmDialogUseFlg != 'true') {
		
		return;
		
	}
	
    // 業務側のＰＣサイトクラス
    var strPcDispIconClassBs = '.' + pcDispIconClass;
    pcDispIconBtnIdArray = [];
    
    // Gnavi側のＰＣサイトクラス
    var strPcDispIconClassGnav = '.' + pcDispIconClassGnav;
    pcDispIconBtnIdArrayGnav = [];
    
    // Blooean値を返すJSコード
    var strJSCheckRtn = 'return ';
    
    $(strPcDispIconClassBs).each( function(){
        
        if(pcDispDialog(this)){
            pcDispIconBtnIdArray.push($(this).attr('id'));
            
            var str = $(this).attr('onclick');
            
            if(str == null){
                str = '';
            }
            
            if(!str.match('loading')){
            
                // submitタイプでBlooean値を返すJSコードがある場合
                if(!str.match(strJSCheckRtn)){
                    // onclick属性を初期化する。
                    $(this).removeAttr('onclick');
                }
                
                $(this).click(function(){
                    
                    // submitタイプでBlooean値を返すJSコードがある場合
                    if(!str.match(strJSCheckRtn)){
                        tmpBtnOnclickBs = str;
                    }
                    // 現在のeventを保持
                    tmpBtnOnclickBsEvent = this;
                    
                    return loading(this);
                });
            }
        }
    });
    
});

/**
 * 投信用PCアイコンの初期化処理
 * @param objID グルナビメニューのDOM要素
 * @return なし
 * 
 */
function initPCIconButton(objID) {
    
    // PCアイコン注意喚起ポップアップメッセージ利用無の場合
    if (pcConfirmDialogUseFlg != 'true') {
        
        return;
        
    }
    
    // Gnavi側のＰＣサイトクラス
    var strPcDispIconClassGnav = '.' + pcDispIconClassGnav;
    pcDispIconBtnIdArrayGnav = [];
    
    // Blooean値を返すJSコード
    var strJSCheckRtn = 'return ';
    
    $("#" + objID + " "+ strPcDispIconClassGnav).each( function(){

        
        if(pcDispDialogGnav(this)){
            pcDispIconBtnIdArrayGnav.push($(this).attr('id'));
            
            var str = $(this).attr('onclick');
            
            if(str == null){
                str = '';
            }
            
            if(!str.match('loading')){
                 // submitタイプでBlooean値を返すJSコードがある場合
                if(!str.match(strJSCheckRtn)){
                    // onclick属性を初期化する。
                    $(this).removeAttr('onclick');
                }
                
                $(this).click(function(){
                    
                    // submitタイプでBlooean値を返すJSコードがある場合
                    if(!str.match(strJSCheckRtn)){
                        tmpBtnOnclickGnav = str;
                        tmpBtnOnclickBs = null;
                    }
                    // 現在のeventを保持
                    tmpBtnOnclickGnavEvent = this;
                    tmpBtnOnclickBsEvent = null;
                    
                    return loading(this);
                });

            }
        }
    });
}

/**
 * 全frameコンテンツIDをDefault/Tempに切り替える。
 * 
 * @param defaultFrameFlag  frameエリア初期フラグ
 *                            true   Default状態
 *                            false  Temp状態
 * @return なし  
 */
function setDefaultFrameAll(defaultFrameFlag){

    // frameエリア初期フラグがtrueの場合、Default状態にする。
    if(defaultFrameFlag === true){
        $("#frame-body_temp").attr("id","frame-body");
        $("#contentsfooter_sp_temp").attr("id","contentsfooter_sp");
        $("#commonfooter_sp_temp").attr("id","commonfooter_sp");
        $("#frame-header_temp").attr("id","frame-header");
        
    // frameエリア初期フラグがfalseの場合、Temp状態にする。
    } else {
        $("#frame-body").attr("id","frame-body_temp");
        $("#contentsfooter_sp").attr("id","contentsfooter_sp_temp");
        $("#commonfooter_sp").attr("id","commonfooter_sp_temp");
        $("#frame-header").attr("id","frame-header_temp");
    }
    
}


/**
 * ダイアログを表示する。
 * 
 * @param initParams  ダイアログ初期化パラメータオブジェクト配列
 *                    初期化パラメータは以下のような構造で設定される
 *                      dialogTitle        ：ダイアログのタイトル
 *                      dialogMsg          ：ダイアログに表示するメッセージ
 *                      dialogOkBtnMsg     ：OKボタンの文言
 *                      dialogCancelBtnMsg ：キャンセルボタンの文言
 *                      buttonNum          ：表示ボタン数
 *                      titleFlag        ：タイトル表示フラグ
 *                      dialogId           ：ダイアログのID
 * @return なし  
 */
 
 //現在表示中のダイアログイベント保持用の変数
var currentDialogButton_event = null;
 
function dialogSpDisp(initParams, event, flagChange){
    //現在表中のダイアログイベントを保持
    currentDialogButton_event = event;

    var width01 = window.innerWidth*0.9;

    if($('#'+ dialogParam.dialogId).length == 0){
    	var response = function(cancel) {
            event = currentDialogButton_event;
            currentDialogButton_event = null;
            
            // Gnavi側のＰＣサイトボタンの場合
            if(tmpBtnOnclickGnavEvent != null){
                event = tmpBtnOnclickGnavEvent;
                tmpBtnOnclickGnavEvent = null;
            }
            
            // 業務側のＰＣサイトボタンの場合
            if(tmpBtnOnclickBsEvent != null){
                event = tmpBtnOnclickBsEvent;
                tmpBtnOnclickBsEvent = null;
            }
            
            if (cancel) {
                return;
            }
            if(flagChange == 'initdsp'){
                initdspflg = true;
            }
            if(flagChange == 'confirmdsp'){
                confirmdspflg = true;
            }
            if(flagChange == 'ver05dsp'){
                ver05dspspflg = true;
            }
            //safariのリンク押下時
            var ua = navigator.userAgent;
            if (ua.match('Safari') && $(event).attr('href')) {
                var script = '<script type=\"text/javascript\">function link() {location.href = \"'
                    + $(event).attr('href')
                    +'\";}</script>';
                $('body').append(script);
                var click = $(event).attr('onclick').replace(';','&&link();');
                $(event).attr('onclick', click);
                $(event).trigger('click');
            } else {
                // formタグが存在する場合。
                if(event.form != null){
                    // 臨時onclick属性に設定値がある場合、実行する。
                    if(tmpBtnOnclickBs !== null && tmpBtnOnclickBs !== ''){
                        eval(tmpBtnOnclickBs);
                        tmpBtnOnclickBs = '';
                    }else if(tmpBtnOnclickGnav !== null && tmpBtnOnclickGnav !== ''){
                        eval(tmpBtnOnclickGnav);
                        tmpBtnOnclickGnav = '';
                    // 臨時onclick属性に設定値がない場合、
                    } else {
                    
                        var click_temp = $(event).attr('onclick');
                    
                        // onclick属性を初期化する。
                        $(event).off('click');
                        $(event).attr('onclick','');
                    
                        // submitボタン実行
                        $(event).click();
                    
                        $(event).attr('onclick', click_temp);
                    }
                    
                    // 別windowで次画面を開いた際に再度ダイアログが表示されるようにフラグを初期化
                    ver05dspspflg = false;
                    
                // formタグが存在しない場合。
                } else {
                    // 臨時onclick属性に設定値がある場合、実行する。
                    if(tmpBtnOnclickBs !== null && tmpBtnOnclickBs !== ''){
                        eval(tmpBtnOnclickBs);
                        tmpBtnOnclickBs = '';
                    }else if(tmpBtnOnclickGnav !== null && tmpBtnOnclickGnav !== ''){
                        eval(tmpBtnOnclickGnav);
                        tmpBtnOnclickGnav = '';
                    } 
                    
                }
            }
        };

        if (sp_aaui001_newDesignLayoutFlg == true) {
        	dialogSpNewDesign(dialogParam.dialogMsg, dialogParam.dialogTitle, 'auto', '90%', dialogParam.dialogOkBtnMsg, dialogParam.dialogCancelBtnMsg,dialogParam.buttonNum, dialogParam.titleFlag, dialogParam.dialogId, dialogParam.stopFlag, response);
        } else {
            dialogSp(dialogParam.dialogMsg, dialogParam.dialogTitle, 'auto', '90%', dialogParam.dialogOkBtnMsg, dialogParam.dialogCancelBtnMsg,dialogParam.buttonNum, dialogParam.titleFlag, dialogParam.dialogId, response);
        }
    } else {
        // ダイアログ表示
        $("#" + dialogParam.dialogId).fadeIn("slow");
        // ダイアログ表示
        $("#overlay_" + dialogParam.dialogId).fadeIn("slow");
    }

    if (!sp_aaui001_newDesignLayoutFlg == true) {
    	$('#'+ dialogParam.dialogId).dialog('open');
    }
    
    // 全frameコンテンツIDをTemp-IDに変更する。
    setDefaultFrameAll(false);
    
};

/**
 * Androidのversionを取得する。
 * @return androidVersion
 */
function androidVersion() {
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Android") > 0) {
        var version = parseFloat(userAgent.slice(userAgent.indexOf("Android") + 8));
        return version;
    }
    return -1;
}

/**
 * ダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param dialogId ダイアログのID
 * @param response コールバック関数
 * @return なし
 */
function dialogSp(message, title, height, width, buttonok, buttoncancel, buttonNum, titleFlag, dialogId, response) {
    var _dlg = $('<div id = \'' + dialogId + '\'>' + message + '</div>');
    var _buttons = {};    
    if(buttonNum == '2'){
        _buttons[buttonok] = function() {
        
            // nisaダイアログが表示されている場合、閉じる。
            if($pcConfirm_dlg != null){
                $(this).dialog('close');
                $pcConfirm_dlg = null;
                
                return;
            } else {
                $(this).dialog('close');
            }
            
            // 全frameコンテンツIDをDefault-IDに戻す。
            setDefaultFrameAll(true);
            
            response(false);
        };
        _buttons[buttoncancel] = function() {
        
            // nisaダイアログが表示されている場合、閉じる。
            if($pcConfirm_dlg != null){
                $pcConfirm_dlg.dialog('close');
                $pcConfirm_dlg = null;
            }
        
        
            $(this).dialog('close');
            
            // 全frameコンテンツIDをDefault-IDに戻す。
            setDefaultFrameAll(true);
            
            response(true);
        };
    } else {
       _buttons[buttonok] = function() {
        
        $(this).dialog('close');
        
        // 全frameコンテンツIDをDefault-IDに戻す。
        setDefaultFrameAll(true);
        

		if ((navigator.userAgent.toLowerCase().match('android')) && (document.body.style.overflow = 'hidden')) {

			// androidの場合
			$('body').css('overflow', '');

		} else if (document.body.style.position = 'fixed') {

			// それ以外
			$('body').css('position', '');
			$('body').css('top', '');
			$(window).scrollTop(scrollPosition);

		}

        return true;
       };
    };
    _dlg.dialog({
        modal : true,
        draggable : false,
        resizable : false,
        autoOpen : false,
        title : title,
        height : height,
        width : width,
        buttons : _buttons,
        open : function(e){
            var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
            var currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
            var $dialogs = $("div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
            var $highestZIndexDialog = $dialogs.first();
            $dialogs.each(function() {
                var current = $highestZIndexDialog.css('z-index');
                var next = $(this).css('z-index');
                if ((+ current) < (+ next)) {
                    $highestZIndexDialog = $(this);
                }
            });
            $highestZIndexDialog.css('z-index',currentMaxZIndex + 1);
            $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex);
            $(".ui-dialog-titlebar-close", $highestZIndexDialog).hide();
            $("html").on('touchmove.noScroll' + dialogId ,function(e){
                e.preventDefault();
            });
            scrollCreate( 'parent_' + dialogId, dialogId);
            $(window).on('orientationchange resize.reOpen' + dialogId,function(e){
                scrollCreate( 'parent_' + dialogId, dialogId);
            }); 
            var version = androidVersion();
            if('2.3' == version) {
                $('body').prepend('<table id = "dummytable" height="9999"></table>');
            }
        },
        close : function(e){
            var version = androidVersion();
            if('2.3' == version) {
                $("#dummytable").remove();
            }
            
            var aauiDialogs = $("div[class^='popup'], div.ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front:visible");
            var dialogzIndex = -1;
            for (var i = 0;i<aauiDialogs.length;i++) {
                if ($(aauiDialogs[i]).is(':visible') && aauiDialogs[i].style.zIndex && (+ dialogzIndex) < (+ aauiDialogs[i].style.zIndex)) {
                    dialogzIndex = aauiDialogs[i].style.zIndex;
                }
            }
            if (dialogzIndex != -1) {
                $("div.ui-widget-overlay.ui-front").css('z-index',dialogzIndex - 1);
            }
            $("html").off('.noScroll' + dialogId);
            $(window).off('.reOpen' + dialogId);
        },
        overlay : {
            opacity : 0.3,
            background : '#225B7F'
        }
    });
    
    $('#'+ dialogId).closest('.ui-dialog').attr('id','parent_' + dialogId);
    $('#'+ dialogId).closest('.ui-dialog').css('z-index',1000);
    if(!titleFlag){
        $('#parent_'+ dialogId +' .ui-dialog-titlebar').remove();
    }
};

/**
 * カスタマイズポップアップ機能
 * @param showCustomcontentId ポップアップに表示する内容のID
 * @param showCustomdialogOkBtnMsg OKボタンの文言
 * @param showCustomtitleFlag タイトル表示フラグ
 * @param showCustomdialogTitle ポップアップのタイトル
 * @return false
 * 
 */
var showCustomdialogOkBtnMsg = 'OK';
var showCustomtitleFlag = false;

function showCustomPopup(showCustomcontentId, showCustomdialogOkBtnMsg, showCustomtitleFlag, showCustomdialogTitle){
    dialogParam.dialogMsg = '';
    dialogParam.dialogOkBtnMsg = showGuidanceDialogOkBtnMsg;
    dialogParam.buttonNum = '1';
    dialogParam.dialogTitle = showCustomdialogTitle;
    dialogParam.titleFlag = showCustomtitleFlag;
    dialogParam.dialogId = 'showCustom' + showCustomcontentId;
    dialogSpDisp(dialogParam);
    
    //ポップアップの内容を移動されているか判定する
    if($('#showCustom' + showCustomcontentId + ' #' + showCustomcontentId).length == 0){
        //ポップアップの内容を移動する
        $('#' + showCustomcontentId).appendTo('#showCustom' + showCustomcontentId).css('display','block');
        //ポップアップの位置を調節する
        scrollCreate( 'parent_showCustom' + showCustomcontentId, 'showCustom' + showCustomcontentId);
    }
    
    return false;
};



/**
 * ポップアップの要素をスクロールさせる機能
 * 
 * @param popupContentId スクロール要素のID
 * @param scrollHeight スクロールバーの高さ
 * @return なし
 */

function popupContentMove(popupContentId, scrollHeight) {
	// スクロール要素の親のID
	var $scrollAreaId = $('#scrollArea_' + popupContentId );
	var touchStartPositionX;
	var touchStartPositionY;
	var touchMovePositionX;
	var touchMovePositionY;
	var moveFarX;
	var moveFarY;
	var startScrollX;
	var startScrollY;
	var moveScrollX;
	var moveScrollY;
	
	if($scrollAreaId != null){
		
		function touchHandler(e){
			var touch = e.originalEvent.touches[0];
			if(e.type == "touchstart"){
				touchStartPositionX = touch.pageX;
				touchStartPositionY = touch.pageY;
				//タッチ前スクロールをとる
				startScrollX = $scrollAreaId.scrollLeft();
				startScrollY = $scrollAreaId.scrollTop();
			}
			if(e.type == "touchmove"){
				//現在の座標を取得
				touchMovePositionX = touch.pageX;
				touchMovePositionY = touch.pageY;
				//差をとる
				moveFarX = touchStartPositionX - touchMovePositionX;
				moveFarY = touchStartPositionY - touchMovePositionY;
				//スクロールを動かす
				moveScrollX = startScrollX +moveFarX;
				moveScrollY = startScrollY +moveFarY;
				$scrollAreaId.scrollLeft(moveScrollX);
				$scrollAreaId.scrollTop(moveScrollY);
				//スクロールバーを動かす
				scrollMove(popupContentId, scrollHeight);
			}
		}
		
		$scrollAreaId.on("touchstart touchmove",touchHandler);

	}
}


/**
 * スクロールバーの位置を変更する。
 * 
 * @param popupContentId スクロール要素のID
 * @return なし
 */

function scrollMove(popupContentId, scrollHeight) {
    //スクロール要素の親要素の上部の位置
    var scrollAreaTop = $('#scrollArea_' + popupContentId).offset().top;
    //スクロール要素の上部の位置
    var popupContentTop = $('#' + popupContentId).offset().top;
    //スクロールバーの最大移動距離
    var scrollMoveMax = $('#' + popupContentId).outerHeight() - $('#scrollArea_' + popupContentId).outerHeight();
    //スクロールバーの位置を求める
    var scrollMoveNum = ( scrollAreaTop - popupContentTop ) / scrollMoveMax * ($('#scrollArea_' + popupContentId).outerHeight() - scrollHeight);
    
    $('#scroll_' + popupContentId).css('top', scrollMoveNum + 'px');

}

/**
 * スクロールバーの表示非表示を設定する。
 * 
 * @param popupId ポップアップ要素のID
 * @param popupContentId スクロール要素のID
 * @return なし
 */

function scrollCreate( popupId, popupContentId) {
    var scrollAreaId = 'scrollArea_' + popupContentId ;
    var scrollParentId = 'scrollParent_' + popupContentId ;
    var scrollId = 'scroll_' + popupContentId ;
    
    //高さの設定を一度解除する。
    if($('#' + scrollAreaId) != null){
            $('#' + scrollAreaId).css('height','');
    }
    if($('#' + scrollId) != null){
            $('#' + scrollId).css('display', 'none');
    }
    
    if(scrollDispCheck(popupId)){
        //スクロール要素の高さを決定する。
        var popupContentHeight = innerHeight * 0.9 - $('#' + popupId).outerHeight() + $('#' + popupContentId).outerHeight();
        
        //スクロール要素を囲む
        if($('#' + scrollAreaId).length == 0){
            $('#' + popupContentId).wrap('<div id = \'' + scrollAreaId + '\' />');
        }
        if(popupContentHeight > 0){
            $('#' + scrollAreaId).css('height',popupContentHeight + 'px');
        }
        $('#' + scrollAreaId).css('overflow','hidden');
        
        //スクロールバーを作成する

        if($('#' + scrollParentId).length == 0){
            $('#' + scrollAreaId).wrap('<div id = \'' + scrollParentId + '\' class = \'popupScrollParent\' />');
            $('#' + scrollParentId).append('<div id = \'' + scrollId + '\' class = \'popupScroll\'></div>');
        }
        //スクロールバーの高さと位置を決定する
        var scrollHeight = Math.pow($('#' + scrollAreaId).outerHeight(),2) / $('#' + popupContentId).outerHeight();
        if(scrollHeight > 0){
            $('#' + scrollId).css('height', scrollHeight + 'px');
        }
        $('#' + scrollId).css('display', '');
        
        scrollMove(popupContentId, scrollHeight);
        popupContentMove(popupContentId, scrollHeight);
    }
    // ポップアップの位置を調節する
    fixPositionSp(popupId);
}

/**
 * スクロールバーの表示判定を行う。
 * 
 * @param popupId ポップアップ要素のID
 * @return true：表示する false：表示しない
 */

function scrollDispCheck(popupId) {
    if(  $('#' + popupId).outerHeight() > (innerHeight * 0.9)){
       return true;
    }
    return false;
}


/**
 * ポップアップの位置を修正する。
 * 
 * @param popupId ポップアップ要素のID
 * @return なし
 */
function fixPositionSp(popupId) {
    var $popupId = $('#' + popupId);
    var top = Math.floor((window.innerHeight - $popupId.height()) / 2);
    var left = Math.floor((window.innerWidth - $popupId.width()) / 2);
    $popupId.css({"top": top, "left": left});
}


/*
 * ファイル名    sp_aaui002.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  明細/キャンペーンポップアップ表示機能
 * 
 * 修正履歴
 * 2014.05.07 NTTD 半田佳菜 次世代個人IB開発
 */
 
var detailPopup = {};
var campaignPopup = {};
var index = -1;
var zIndexDialog;

/**
 * ポップアップの初期設定
 * 
 * @param なし
 * @return なし
 */

detailPopup.init = function() {
    
    // 明細ポップアップの初期設定
    detailPopup.popup = document.getElementById("detailPopup");
    if (detailPopup.popup != null) {
        detailPopup.backButton = document.getElementById("detailPopupBackButton");
        detailPopup.nextButton = document.getElementById("detailPopupNextButton");
    }
    // キャンペーンポップアップの初期設定
    campaignPopup.popup = document.getElementById("campaignPopup");
    if (campaignPopup.popup != null) {
    }
    
    // 背面のレイヤーを作成する。
    laylerDialogDisp();
}

/**
 * ポップアップ表示機能
 * 
 * @param popupId ポップアップ要素のID
 * @param popupContentId スクロール要素のID
 * @return なし
 */
function showPopup(popupId, popupContentId) {
    
    var $popupId = $("#" + popupId);
    var $scrollAreaId =  $('#scrollArea_'+ popupContentId);
    var $scrollId =  $('#scroll_'+ popupContentId);
    var scrollHeight;
    
    if ($popupId != null) {
        // 背面のレイヤーを表示
        var currentMaxZIndex;
        $('#laylerDialog').dialog({
            open: function(event) {
              var arr = [...document.all].map(e => +window.getComputedStyle(e).zIndex || 0);
              currentMaxZIndex = arr.length ? Math.max(...arr) : 0;
              $("div.ui-widget-overlay.ui-front").css('z-index',currentMaxZIndex + 1);
            }
        });
        $('#laylerDialog').dialog('open');
    
        // ポップアップを表示させる
        $popupId.css({"display": "", "position": "fixed", "z-index": currentMaxZIndex + 2, "opacity": 1});
        
        // スクロールを禁止する
        $("html").on('touchmove.noScroll',function(e){
            e.preventDefault();
        });
        
        // ポップアップが画面よりも大きいか判定し、スクロールバーを付与する
        scrollCreate(popupId, popupContentId);

        // 画面の縦横が切り変わった際スクロールバー判定をやり直す
        $(window).on('orientationchange resize.reOpen',function(e){
            scrollCreate(popupId, popupContentId);
        });

        var version = androidVersion();
        if('2.3' == version) {
            $('body').prepend('<table id = "dummytable" height="9999"></table>');
        }
    }
}

/**
 * 次へ/戻るボタン機能(現行より修正なし)
 */

function build(n) {
  if (details != null && details.length > 0) {
    index > 0 ? detailPopup.backButton.style.display = "" : detailPopup.backButton.style.display = "none";
    index < details.length - 1 ? detailPopup.nextButton.style.display = "" : detailPopup.nextButton.style.display = "none";

    for (var key in details[n]) {
      var element = document.getElementById(key);

      if (element != null) {
        element.innerHTML = details[n][key];
      }

      if (hiddenRows[key] == "1") {
        var hiddenrow = document.getElementById(key);
        if ((details[n][key] == "" || details[n][key] == '　') && hiddenrow != null) {
          hiddenrow.style.display = "none";
        }
        else if (hiddenrow != null) {
          hiddenrow.style.display = "";
        }
      }
    }
  }
}

function back() {
  if (index > 0) {
    index--;
    build(index);
    if($('#detailPopup .noborder-table') != null){
      var popupContentId = $('#detailPopup .noborder-table').attr('id');
      scrollCreate("detailPopup" ,popupContentId);
    }
  }
}

function next() {
  if (index < details.length - 1) {
    index++;
    build(index);
    if($('#detailPopup .noborder-table') != null){
      var popupContentId = $('#detailPopup .noborder-table').attr('id');
      scrollCreate("detailPopup" ,popupContentId);
    }
  }
}

/**
 * ポップアップを閉じる機能
 * 
 * @param なし
 * @return なし
 */

function closePopup() {
    // 明細ポップアップを閉じる
    if (detailPopup.popup != null) {
        detailPopup.popup.style.display = "none";
        
    }
    // キャンペーンポップアップを閉じる
    if (campaignPopup.popup != null) {
        campaignPopup.popup.style.display = "none";
    }
    // スクロールを禁止を解除
    $("html").off('.noScroll');
    // 縦横変更時の設定を解除
    $(window).off('.reOpen');
    
    var version = androidVersion();
    if('2.3' == version) {
        $("#dummytable").remove();
    }

    // 背面のレイヤーを非表示
    $('#laylerDialog').dialog('close');
}


/**
 * キャンペーンポップアップを開く機能
 * 
 * @param なし
 * @return なし
 */
function showCampaignPopupWindow() {
    // ポップアップを一度閉じる
    closePopup();
    if($('#campaignPopup .body') != null){
        var popupContentId = $('#campaignPopup .body').attr('id');
        showPopup("campaignPopup",popupContentId);
    }
}
/**
 * 明細ポップアップを開く機能
 * 
 * @param なし
 * @return なし
 */
function showDetailPopup(n) {
    if (details != null && details.length > 0) {
        index = n;
        build(n);
        // ポップアップを一度閉じる
        closePopup();
        if($('#detailPopup .noborder-table') != null){
            var popupContentId = $('#detailPopup .noborder-table').attr('id');
            showPopup("detailPopup" ,popupContentId);
        }
    }
}

/**
 * 背面のレイヤーを表示する。
 * 
 * @param event ボタン押下時のDOM要素
 * @return なし
 */



function laylerDialogDisp() {
    //ダイアログを作成
    laylerDialog('', '', '200', '400', 'ok', 'キャンセル',
            function (cancel) {
                if (cancel) {
                    return;
                }
            });
    return true;
};

/**
 * レイヤー用のダイアログを作成する。
 * 
 * @param message ダイアログに表示するメッセージ
 * @param title ダイアログのタイトル
 * @param height ダイアログの高さ
 * @param width ダイアログの幅
 * @param buttonok OKボタン押下時の処理
 * @param buttoncancel キャンセルボタン押下時の処理
 * @param response コールバック関数
 * @return なし
 */
function laylerDialog(message, title, height, width,
        buttonok, buttoncancel, response) {
    var _dlg = $('<div id = \'laylerDialog\' >' + message + '</div>');
    var _buttons = {};    
    _buttons[buttonok] = function() {
        $(this).dialog('close');
        response(false)
    };
    _buttons[buttoncancel] = function() {
        $(this).dialog('close');
        response(true)
    };

    _dlg.dialog({
    	autoOpen: false,
    	modal: true,
    	draggable: false,
    	resizable: false,
    	title: title,
    	dialogClass : 'noDialog',
    	height: height,
    	width: width,
    	closeOnEscape: false,
    	buttons: _buttons,
    	overlay:{
    		opacity: 0.3,
    		background: '#225B7F'
    	}
    });
};

// PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 start
// キャンペーンポップアップ表示・非表示（投信）
/**
* キャンペーンポップアップを開く機能（投信）
* 
* @param なし
* @return なし
*/
function showInvCampaignPopupWindow() {
    // ポップアップを一度閉じる
    closeInvPopup();
    if ($('#campaignPopup .body') != null) {
        var popupContentId = $('#campaignPopup .body').attr('id');
        showPopup("campaignPopup",popupContentId);

        // スクロールを固定する
        scrollFixed();
    }
}

/**
* キャンペーンポップアップを閉じる機能（投信）
* 
* @param なし
* @return なし
*/
function closeInvPopup() {
    // キャンペーンポップアップを閉じる
    if (campaignPopup.popup != null) {
        campaignPopup.popup.style.display = "none";
    }

    // スクロールを禁止を解除
    $("html").off('.noScroll');
    // 縦横変更時の設定を解除
    $(window).off('.reOpen');

    var version = androidVersion();
    if ('2.3' == version) {
        $("#dummytable").remove();
    }

    // 背面のレイヤーを非表示
    $('#laylerDialog').dialog('close');
}

/**
* キャンペーンポップアップを閉じる機能（投信）
* スクロールロック固定の解除を追加し、closeInvPopupと区別する
* 
* @param なし
* @return なし
*/
function closeInvCampaignPopupWindow() {
    // キャンペーンポップアップを閉じる
    closeInvPopup();

    // スクロールロックを解除する
    unScrollFixed();
}

// スクロール位置を表すグローバル変数
var invScrollPosition;

// ポップアップ表示時にスクロールを固定する
/**
* スマホ画面のスクロールを固定する
* @return なし
*/
function scrollFixed() {

    if (navigator.userAgent.toLowerCase().match('android')) {

        // androidの場合
        $('body').css('overflow', 'hidden');

    } else {

        // それ以外
        invScrollPosition = $(window).scrollTop();
        $('body').css('position', 'fixed');
        $('body').css('top', '-' + invScrollPosition + 'px');
    }
}

// ポップアップ非表示化時に固定したスクロールロックを解除する
/** 
* スマホ画面のスクロール固定を解除する
* @return なし
*/
function unScrollFixed() {
    if ((navigator.userAgent.toLowerCase().match('android')) && (document.body.style.overflow = 'hidden')) {

        // androidの場合
        $('body').css('overflow', '');

    } else if (document.body.style.position = 'fixed') {

        // それ以外
        $('body').css('position', '');
        $('body').css('top', '');
        $(window).scrollTop(invScrollPosition);
    }
}
// PSL_OP_709:【投信】ポップアップ表示時のスクロールロック対応 end

/*
 * ファイル名    sp_aaui003.js
 * 開発システム   ANSER-WEB(AA)
 * 著作権  Copyright(C) 2012 NTT DATA
 * 収容物  口座情報折り返し機能
 * 
 * 修正履歴
 * 2014.05.07 NTTD 半田佳菜 次世代個人IB開発
 */
 
/**
 * 口座情報が折り返すとき、折り返し位置を調節する
 * 
 * @param なし
 * @return なし
 */
 
$().ready(function() {

	if($(".branch-name-JS02").length){
		$(".branch-name-JS02").each( function(){
			$(this).css('width','200%');
			var height01 = $(this).height();
			$(this).css('width','');
			if($(this).height() > height01){
				$(this).addClass("newLine");
			}
		});
	}
	
	if($(".branch-name-JS01").length){
		$(".branch-name-JS01").each( function(){
			if($(this).find(".newLine").length){
				$(this).addClass("newLine");
			}
		});
	}
	
	if($(".branch-name-JS04").length){
		$(".branch-name-JS04").each( function(){
			$(this).css('width','200%');
			var height01 = $(this).height();
			$(this).css('width','');
			if($(this).height() > height01){
				$(this).addClass("newLine");
			}
		});
	}
});

/**
 * ファイル名     aaui056.js
 * 開発システム   AnserParaSOL
 * 著作権  Copyright(C) 2022 NTT DATA
 * 収容物  PWマスク切替機能
 * 
 * 修正履歴
 * 2023.06.22 鈴木 捷悟 AnserParaSOL 第18版 R003_PWマスク表示切替機能 新規作成 
 * 
 * @author 株式会社 NTTデータフロンティア
 * @version 1.0
 */

/**
 * PWマスク切替機能
 */
function pushHideButton(pswdId,PasswordMaskOn,PasswordMaskOff) {

	// パスワード入力エリアの画面項目ID
	var txtPass = document.getElementById(pswdId);
	
	// マスキングボタンの画面項目ID
	var btnEye = document.getElementById(pswdId + "_img");

	// パスワード入力エリアのtype属性が、textであるか判定する。
	if (txtPass.type === "text") {
		
		// パスワード入力エリアのtype属性をpasswordへ変更
		txtPass.type = "password";
		btnEye.src =  PasswordMaskOn;
		btnEye.alt = "fa fa-eye"

	} else {

		// パスワード入力エリアのtype属性をtextへ変更
		txtPass.type = "text";
		btnEye.src = PasswordMaskOff;
		btnEye.alt = "fa fa-eye-slash"
	}
};
